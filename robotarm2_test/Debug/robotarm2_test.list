
robotarm2_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000156c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001734  08001734  00011734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001744  08001744  00011744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800174c  0800174c  0001174c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001750  08001750  00011750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000020  2000000c  08001760  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000002c  08001760  0002002c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000437c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e5b  00000000  00000000  000243b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000418  00000000  00000000  00025218  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000380  00000000  00000000  00025630  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001e2e  00000000  00000000  000259b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000183a  00000000  00000000  000277de  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00029018  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000e70  00000000  00000000  00029094  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800171c 	.word	0x0800171c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800171c 	.word	0x0800171c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b97a 	b.w	8000514 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	468c      	mov	ip, r1
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	9e08      	ldr	r6, [sp, #32]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d151      	bne.n	80002ec <__udivmoddi4+0xb4>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d96d      	bls.n	800032a <__udivmoddi4+0xf2>
 800024e:	fab2 fe82 	clz	lr, r2
 8000252:	f1be 0f00 	cmp.w	lr, #0
 8000256:	d00b      	beq.n	8000270 <__udivmoddi4+0x38>
 8000258:	f1ce 0c20 	rsb	ip, lr, #32
 800025c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000260:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000264:	fa02 f70e 	lsl.w	r7, r2, lr
 8000268:	ea4c 0c05 	orr.w	ip, ip, r5
 800026c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000270:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000274:	0c25      	lsrs	r5, r4, #16
 8000276:	fbbc f8fa 	udiv	r8, ip, sl
 800027a:	fa1f f987 	uxth.w	r9, r7
 800027e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000282:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000286:	fb08 f309 	mul.w	r3, r8, r9
 800028a:	42ab      	cmp	r3, r5
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x6c>
 800028e:	19ed      	adds	r5, r5, r7
 8000290:	f108 32ff 	add.w	r2, r8, #4294967295
 8000294:	f080 8123 	bcs.w	80004de <__udivmoddi4+0x2a6>
 8000298:	42ab      	cmp	r3, r5
 800029a:	f240 8120 	bls.w	80004de <__udivmoddi4+0x2a6>
 800029e:	f1a8 0802 	sub.w	r8, r8, #2
 80002a2:	443d      	add	r5, r7
 80002a4:	1aed      	subs	r5, r5, r3
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002ac:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b4:	fb00 f909 	mul.w	r9, r0, r9
 80002b8:	45a1      	cmp	r9, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x98>
 80002bc:	19e4      	adds	r4, r4, r7
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 810a 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80002c6:	45a1      	cmp	r9, r4
 80002c8:	f240 8107 	bls.w	80004da <__udivmoddi4+0x2a2>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	eba4 0409 	sub.w	r4, r4, r9
 80002d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d8:	2100      	movs	r1, #0
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d061      	beq.n	80003a2 <__udivmoddi4+0x16a>
 80002de:	fa24 f40e 	lsr.w	r4, r4, lr
 80002e2:	2300      	movs	r3, #0
 80002e4:	6034      	str	r4, [r6, #0]
 80002e6:	6073      	str	r3, [r6, #4]
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xc8>
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d054      	beq.n	800039e <__udivmoddi4+0x166>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	f040 808e 	bne.w	8000426 <__udivmoddi4+0x1ee>
 800030a:	42ab      	cmp	r3, r5
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xdc>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2d0>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb65 0503 	sbc.w	r5, r5, r3
 800031a:	2001      	movs	r0, #1
 800031c:	46ac      	mov	ip, r5
 800031e:	2e00      	cmp	r6, #0
 8000320:	d03f      	beq.n	80003a2 <__udivmoddi4+0x16a>
 8000322:	e886 1010 	stmia.w	r6, {r4, ip}
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	b912      	cbnz	r2, 8000332 <__udivmoddi4+0xfa>
 800032c:	2701      	movs	r7, #1
 800032e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000332:	fab7 fe87 	clz	lr, r7
 8000336:	f1be 0f00 	cmp.w	lr, #0
 800033a:	d134      	bne.n	80003a6 <__udivmoddi4+0x16e>
 800033c:	1beb      	subs	r3, r5, r7
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa1f fc87 	uxth.w	ip, r7
 8000344:	2101      	movs	r1, #1
 8000346:	fbb3 f8f2 	udiv	r8, r3, r2
 800034a:	0c25      	lsrs	r5, r4, #16
 800034c:	fb02 3318 	mls	r3, r2, r8, r3
 8000350:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000354:	fb0c f308 	mul.w	r3, ip, r8
 8000358:	42ab      	cmp	r3, r5
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x134>
 800035c:	19ed      	adds	r5, r5, r7
 800035e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x132>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f200 80d1 	bhi.w	800050c <__udivmoddi4+0x2d4>
 800036a:	4680      	mov	r8, r0
 800036c:	1aed      	subs	r5, r5, r3
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb5 f0f2 	udiv	r0, r5, r2
 8000374:	fb02 5510 	mls	r5, r2, r0, r5
 8000378:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800037c:	fb0c fc00 	mul.w	ip, ip, r0
 8000380:	45a4      	cmp	ip, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x15c>
 8000384:	19e4      	adds	r4, r4, r7
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x15a>
 800038c:	45a4      	cmp	ip, r4
 800038e:	f200 80b8 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 040c 	sub.w	r4, r4, ip
 8000398:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039c:	e79d      	b.n	80002da <__udivmoddi4+0xa2>
 800039e:	4631      	mov	r1, r6
 80003a0:	4630      	mov	r0, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	f1ce 0420 	rsb	r4, lr, #32
 80003aa:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ae:	fa07 f70e 	lsl.w	r7, r7, lr
 80003b2:	fa20 f804 	lsr.w	r8, r0, r4
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa25 f404 	lsr.w	r4, r5, r4
 80003bc:	ea48 0803 	orr.w	r8, r8, r3
 80003c0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c8:	fb02 4411 	mls	r4, r2, r1, r4
 80003cc:	fa1f fc87 	uxth.w	ip, r7
 80003d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d4:	fb01 f30c 	mul.w	r3, r1, ip
 80003d8:	42ab      	cmp	r3, r5
 80003da:	fa00 f40e 	lsl.w	r4, r0, lr
 80003de:	d909      	bls.n	80003f4 <__udivmoddi4+0x1bc>
 80003e0:	19ed      	adds	r5, r5, r7
 80003e2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e6:	f080 808a 	bcs.w	80004fe <__udivmoddi4+0x2c6>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	f240 8087 	bls.w	80004fe <__udivmoddi4+0x2c6>
 80003f0:	3902      	subs	r1, #2
 80003f2:	443d      	add	r5, r7
 80003f4:	1aeb      	subs	r3, r5, r3
 80003f6:	fa1f f588 	uxth.w	r5, r8
 80003fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fe:	fb02 3310 	mls	r3, r2, r0, r3
 8000402:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000406:	fb00 f30c 	mul.w	r3, r0, ip
 800040a:	42ab      	cmp	r3, r5
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x1e6>
 800040e:	19ed      	adds	r5, r5, r7
 8000410:	f100 38ff 	add.w	r8, r0, #4294967295
 8000414:	d26f      	bcs.n	80004f6 <__udivmoddi4+0x2be>
 8000416:	42ab      	cmp	r3, r5
 8000418:	d96d      	bls.n	80004f6 <__udivmoddi4+0x2be>
 800041a:	3802      	subs	r0, #2
 800041c:	443d      	add	r5, r7
 800041e:	1aeb      	subs	r3, r5, r3
 8000420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000424:	e78f      	b.n	8000346 <__udivmoddi4+0x10e>
 8000426:	f1c1 0720 	rsb	r7, r1, #32
 800042a:	fa22 f807 	lsr.w	r8, r2, r7
 800042e:	408b      	lsls	r3, r1
 8000430:	fa05 f401 	lsl.w	r4, r5, r1
 8000434:	ea48 0303 	orr.w	r3, r8, r3
 8000438:	fa20 fe07 	lsr.w	lr, r0, r7
 800043c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000440:	40fd      	lsrs	r5, r7
 8000442:	ea4e 0e04 	orr.w	lr, lr, r4
 8000446:	fbb5 f9fc 	udiv	r9, r5, ip
 800044a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000452:	fa1f f883 	uxth.w	r8, r3
 8000456:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800045a:	fb09 f408 	mul.w	r4, r9, r8
 800045e:	42ac      	cmp	r4, r5
 8000460:	fa02 f201 	lsl.w	r2, r2, r1
 8000464:	fa00 fa01 	lsl.w	sl, r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x244>
 800046a:	18ed      	adds	r5, r5, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	d243      	bcs.n	80004fa <__udivmoddi4+0x2c2>
 8000472:	42ac      	cmp	r4, r5
 8000474:	d941      	bls.n	80004fa <__udivmoddi4+0x2c2>
 8000476:	f1a9 0902 	sub.w	r9, r9, #2
 800047a:	441d      	add	r5, r3
 800047c:	1b2d      	subs	r5, r5, r4
 800047e:	fa1f fe8e 	uxth.w	lr, lr
 8000482:	fbb5 f0fc 	udiv	r0, r5, ip
 8000486:	fb0c 5510 	mls	r5, ip, r0, r5
 800048a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048e:	fb00 f808 	mul.w	r8, r0, r8
 8000492:	45a0      	cmp	r8, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x26e>
 8000496:	18e4      	adds	r4, r4, r3
 8000498:	f100 35ff 	add.w	r5, r0, #4294967295
 800049c:	d229      	bcs.n	80004f2 <__udivmoddi4+0x2ba>
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d927      	bls.n	80004f2 <__udivmoddi4+0x2ba>
 80004a2:	3802      	subs	r0, #2
 80004a4:	441c      	add	r4, r3
 80004a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004aa:	eba4 0408 	sub.w	r4, r4, r8
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	454c      	cmp	r4, r9
 80004b4:	46c6      	mov	lr, r8
 80004b6:	464d      	mov	r5, r9
 80004b8:	d315      	bcc.n	80004e6 <__udivmoddi4+0x2ae>
 80004ba:	d012      	beq.n	80004e2 <__udivmoddi4+0x2aa>
 80004bc:	b156      	cbz	r6, 80004d4 <__udivmoddi4+0x29c>
 80004be:	ebba 030e 	subs.w	r3, sl, lr
 80004c2:	eb64 0405 	sbc.w	r4, r4, r5
 80004c6:	fa04 f707 	lsl.w	r7, r4, r7
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431f      	orrs	r7, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	6037      	str	r7, [r6, #0]
 80004d2:	6074      	str	r4, [r6, #4]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	4618      	mov	r0, r3
 80004dc:	e6f8      	b.n	80002d0 <__udivmoddi4+0x98>
 80004de:	4690      	mov	r8, r2
 80004e0:	e6e0      	b.n	80002a4 <__udivmoddi4+0x6c>
 80004e2:	45c2      	cmp	sl, r8
 80004e4:	d2ea      	bcs.n	80004bc <__udivmoddi4+0x284>
 80004e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ea:	eb69 0503 	sbc.w	r5, r9, r3
 80004ee:	3801      	subs	r0, #1
 80004f0:	e7e4      	b.n	80004bc <__udivmoddi4+0x284>
 80004f2:	4628      	mov	r0, r5
 80004f4:	e7d7      	b.n	80004a6 <__udivmoddi4+0x26e>
 80004f6:	4640      	mov	r0, r8
 80004f8:	e791      	b.n	800041e <__udivmoddi4+0x1e6>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e7be      	b.n	800047c <__udivmoddi4+0x244>
 80004fe:	4601      	mov	r1, r0
 8000500:	e778      	b.n	80003f4 <__udivmoddi4+0x1bc>
 8000502:	3802      	subs	r0, #2
 8000504:	443c      	add	r4, r7
 8000506:	e745      	b.n	8000394 <__udivmoddi4+0x15c>
 8000508:	4608      	mov	r0, r1
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xe6>
 800050c:	f1a8 0802 	sub.w	r8, r8, #2
 8000510:	443d      	add	r5, r7
 8000512:	e72b      	b.n	800036c <__udivmoddi4+0x134>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4a1f      	ldr	r2, [pc, #124]	; (80005ac <MX_GPIO_Init+0x94>)
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_GPIO_Init+0x94>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_GPIO_Init+0x94>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4a19      	ldr	r2, [pc, #100]	; (80005ac <MX_GPIO_Init+0x94>)
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_GPIO_Init+0x94>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_GPIO_Init+0x94>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_green_Pin|led_red_Pin|led_blue_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f244 0181 	movw	r1, #16513	; 0x4081
 8000564:	4812      	ldr	r0, [pc, #72]	; (80005b0 <MX_GPIO_Init+0x98>)
 8000566:	f000 fc09 	bl	8000d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = btn_Pin;
 800056a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4619      	mov	r1, r3
 800057e:	480d      	ldr	r0, [pc, #52]	; (80005b4 <MX_GPIO_Init+0x9c>)
 8000580:	f000 fa52 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led_green_Pin|led_red_Pin|led_blue_Pin;
 8000584:	f244 0381 	movw	r3, #16513	; 0x4081
 8000588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	4619      	mov	r1, r3
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <MX_GPIO_Init+0x98>)
 800059e:	f000 fa43 	bl	8000a28 <HAL_GPIO_Init>

}
 80005a2:	bf00      	nop
 80005a4:	3720      	adds	r7, #32
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020400 	.word	0x40020400
 80005b4:	40020800 	.word	0x40020800

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 f8d0 	bl	8000760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f80e 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f7ff ffa8 	bl	8000518 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(led_blue_GPIO_Port, led_blue_Pin);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <main+0x24>)
 80005cc:	f000 fbef 	bl	8000dae <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 80005d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d4:	f000 f922 	bl	800081c <HAL_Delay>
	  HAL_GPIO_TogglePin(led_blue_GPIO_Port, led_blue_Pin);
 80005d8:	e7f6      	b.n	80005c8 <main+0x10>
 80005da:	bf00      	nop
 80005dc:	40020400 	.word	0x40020400

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 f88c 	bl	800170c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	4a22      	ldr	r2, [pc, #136]	; (8000690 <SystemClock_Config+0xb0>)
 8000606:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xb0>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xb0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800061c:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <SystemClock_Config+0xb4>)
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <SystemClock_Config+0xb4>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <SystemClock_Config+0xb4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000644:	2300      	movs	r3, #0
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fbc9 	bl	8000de4 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000658:	f000 f81e 	bl	8000698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fe58 	bl	800132c <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000682:	f000 f809 	bl	8000698 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069e:	e7fe      	b.n	800069e <Error_Handler+0x6>

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_MspInit+0x44>)
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_MspInit+0x44>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b0:	6413      	str	r3, [r2, #64]	; 0x40
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_MspInit+0x44>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4a09      	ldr	r2, [pc, #36]	; (80006e4 <HAL_MspInit+0x44>)
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <HAL_MspInit+0x44>)
 80006c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x44>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <NMI_Handler+0x4>

080006ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MemManage_Handler+0x4>

080006fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <UsageFault_Handler+0x4>

08000706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000734:	f000 f852 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <SystemInit+0x20>)
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <SystemInit+0x20>)
 8000744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000764:	2003      	movs	r0, #3
 8000766:	f000 f92b 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800076a:	2000      	movs	r0, #0
 800076c:	f000 f806 	bl	800077c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000770:	f7ff ff96 	bl	80006a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_InitTick+0x54>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_InitTick+0x58>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	fbb3 f3f1 	udiv	r3, r3, r1
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f937 	bl	8000a0e <HAL_SYSTICK_Config>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00e      	b.n	80007c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d80a      	bhi.n	80007c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f000 f90d 	bl	80009d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <HAL_InitTick+0x5c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000008 	.word	0x20000008
 80007d8:	20000004 	.word	0x20000004

080007dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_IncTick+0x20>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_IncTick+0x24>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_IncTick+0x24>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000028 	.word	0x20000028

08000804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_GetTick+0x14>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000028 	.word	0x20000028

0800081c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000824:	f7ff ffee 	bl	8000804 <HAL_GetTick>
 8000828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000834:	d005      	beq.n	8000842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_Delay+0x40>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	4413      	add	r3, r2
 8000840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000842:	bf00      	nop
 8000844:	f7ff ffde 	bl	8000804 <HAL_GetTick>
 8000848:	4602      	mov	r2, r0
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	1ad2      	subs	r2, r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	429a      	cmp	r2, r3
 8000852:	d3f7      	bcc.n	8000844 <HAL_Delay+0x28>
  {
  }
}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000008 	.word	0x20000008

08000860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <__NVIC_SetPriorityGrouping+0x40>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 800088a:	4313      	orrs	r3, r2
 800088c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088e:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <__NVIC_SetPriorityGrouping+0x40>)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	60d3      	str	r3, [r2, #12]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00
 80008a4:	05fa0000 	.word	0x05fa0000

080008a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	f003 0307 	and.w	r3, r3, #7
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	490d      	ldr	r1, [pc, #52]	; (8000910 <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	4909      	ldr	r1, [pc, #36]	; (8000914 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	2201      	movs	r2, #1
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	401a      	ands	r2, r3
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095e:	2101      	movs	r1, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	1e59      	subs	r1, r3, #1
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f7ff ff90 	bl	80008c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff49 	bl	8000860 <__NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e8:	f7ff ff5e 	bl	80008a8 <__NVIC_GetPriorityGrouping>
 80009ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff90 	bl	8000918 <NVIC_EncodePriority>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5f 	bl	80008c4 <__NVIC_SetPriority>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ffb0 	bl	800097c <SysTick_Config>
 8000a1c:	4603      	mov	r3, r0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b089      	sub	sp, #36	; 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
 8000a46:	e175      	b.n	8000d34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000a48:	2201      	movs	r2, #1
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	f040 8164 	bne.w	8000d2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d00b      	beq.n	8000a86 <HAL_GPIO_Init+0x5e>
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d007      	beq.n	8000a86 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a7a:	2b11      	cmp	r3, #17
 8000a7c:	d003      	beq.n	8000a86 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b12      	cmp	r3, #18
 8000a84:	d130      	bne.n	8000ae8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	2203      	movs	r2, #3
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43db      	mvns	r3, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	68da      	ldr	r2, [r3, #12]
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000abc:	2201      	movs	r2, #1
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	091b      	lsrs	r3, r3, #4
 8000ad2:	f003 0201 	and.w	r2, r3, #1
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2203      	movs	r2, #3
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	4013      	ands	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x100>
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2b12      	cmp	r3, #18
 8000b26:	d123      	bne.n	8000b70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	08da      	lsrs	r2, r3, #3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3208      	adds	r2, #8
 8000b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	f003 0307 	and.w	r3, r3, #7
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	220f      	movs	r2, #15
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	691a      	ldr	r2, [r3, #16]
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	08da      	lsrs	r2, r3, #3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3208      	adds	r2, #8
 8000b6a:	69b9      	ldr	r1, [r7, #24]
 8000b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	4013      	ands	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0203 	and.w	r2, r3, #3
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 80be 	beq.w	8000d2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4a65      	ldr	r2, [pc, #404]	; (8000d48 <HAL_GPIO_Init+0x320>)
 8000bb4:	4b64      	ldr	r3, [pc, #400]	; (8000d48 <HAL_GPIO_Init+0x320>)
 8000bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b62      	ldr	r3, [pc, #392]	; (8000d48 <HAL_GPIO_Init+0x320>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000bca:	4a60      	ldr	r2, [pc, #384]	; (8000d4c <HAL_GPIO_Init+0x324>)
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	220f      	movs	r2, #15
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	4013      	ands	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a57      	ldr	r2, [pc, #348]	; (8000d50 <HAL_GPIO_Init+0x328>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d037      	beq.n	8000c66 <HAL_GPIO_Init+0x23e>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a56      	ldr	r2, [pc, #344]	; (8000d54 <HAL_GPIO_Init+0x32c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d031      	beq.n	8000c62 <HAL_GPIO_Init+0x23a>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a55      	ldr	r2, [pc, #340]	; (8000d58 <HAL_GPIO_Init+0x330>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d02b      	beq.n	8000c5e <HAL_GPIO_Init+0x236>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a54      	ldr	r2, [pc, #336]	; (8000d5c <HAL_GPIO_Init+0x334>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d025      	beq.n	8000c5a <HAL_GPIO_Init+0x232>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a53      	ldr	r2, [pc, #332]	; (8000d60 <HAL_GPIO_Init+0x338>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d01f      	beq.n	8000c56 <HAL_GPIO_Init+0x22e>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a52      	ldr	r2, [pc, #328]	; (8000d64 <HAL_GPIO_Init+0x33c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d019      	beq.n	8000c52 <HAL_GPIO_Init+0x22a>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a51      	ldr	r2, [pc, #324]	; (8000d68 <HAL_GPIO_Init+0x340>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d013      	beq.n	8000c4e <HAL_GPIO_Init+0x226>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a50      	ldr	r2, [pc, #320]	; (8000d6c <HAL_GPIO_Init+0x344>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d00d      	beq.n	8000c4a <HAL_GPIO_Init+0x222>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a4f      	ldr	r2, [pc, #316]	; (8000d70 <HAL_GPIO_Init+0x348>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d007      	beq.n	8000c46 <HAL_GPIO_Init+0x21e>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a4e      	ldr	r2, [pc, #312]	; (8000d74 <HAL_GPIO_Init+0x34c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d101      	bne.n	8000c42 <HAL_GPIO_Init+0x21a>
 8000c3e:	2309      	movs	r3, #9
 8000c40:	e012      	b.n	8000c68 <HAL_GPIO_Init+0x240>
 8000c42:	230a      	movs	r3, #10
 8000c44:	e010      	b.n	8000c68 <HAL_GPIO_Init+0x240>
 8000c46:	2308      	movs	r3, #8
 8000c48:	e00e      	b.n	8000c68 <HAL_GPIO_Init+0x240>
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	e00c      	b.n	8000c68 <HAL_GPIO_Init+0x240>
 8000c4e:	2306      	movs	r3, #6
 8000c50:	e00a      	b.n	8000c68 <HAL_GPIO_Init+0x240>
 8000c52:	2305      	movs	r3, #5
 8000c54:	e008      	b.n	8000c68 <HAL_GPIO_Init+0x240>
 8000c56:	2304      	movs	r3, #4
 8000c58:	e006      	b.n	8000c68 <HAL_GPIO_Init+0x240>
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e004      	b.n	8000c68 <HAL_GPIO_Init+0x240>
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e002      	b.n	8000c68 <HAL_GPIO_Init+0x240>
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <HAL_GPIO_Init+0x240>
 8000c66:	2300      	movs	r3, #0
 8000c68:	69fa      	ldr	r2, [r7, #28]
 8000c6a:	f002 0203 	and.w	r2, r2, #3
 8000c6e:	0092      	lsls	r2, r2, #2
 8000c70:	4093      	lsls	r3, r2
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c78:	4934      	ldr	r1, [pc, #208]	; (8000d4c <HAL_GPIO_Init+0x324>)
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	3302      	adds	r3, #2
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c86:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <HAL_GPIO_Init+0x350>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4013      	ands	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000caa:	4a33      	ldr	r2, [pc, #204]	; (8000d78 <HAL_GPIO_Init+0x350>)
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cb0:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <HAL_GPIO_Init+0x350>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000cd4:	4a28      	ldr	r2, [pc, #160]	; (8000d78 <HAL_GPIO_Init+0x350>)
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <HAL_GPIO_Init+0x350>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <HAL_GPIO_Init+0x350>)
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <HAL_GPIO_Init+0x350>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d28:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <HAL_GPIO_Init+0x350>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3301      	adds	r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	2b0f      	cmp	r3, #15
 8000d38:	f67f ae86 	bls.w	8000a48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3724      	adds	r7, #36	; 0x24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40013800 	.word	0x40013800
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40020400 	.word	0x40020400
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	40020c00 	.word	0x40020c00
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40021400 	.word	0x40021400
 8000d68:	40021800 	.word	0x40021800
 8000d6c:	40021c00 	.word	0x40021c00
 8000d70:	40022000 	.word	0x40022000
 8000d74:	40022400 	.word	0x40022400
 8000d78:	40013c00 	.word	0x40013c00

08000d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d8c:	787b      	ldrb	r3, [r7, #1]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d92:	887a      	ldrh	r2, [r7, #2]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000d98:	e003      	b.n	8000da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	041a      	lsls	r2, r3, #16
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	619a      	str	r2, [r3, #24]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	460b      	mov	r3, r1
 8000db8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dc0:	887a      	ldrh	r2, [r7, #2]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	041a      	lsls	r2, r3, #16
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	887b      	ldrh	r3, [r7, #2]
 8000dce:	400b      	ands	r3, r1
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	619a      	str	r2, [r3, #24]
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e291      	b.n	800131e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8087 	beq.w	8000f16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e08:	4b96      	ldr	r3, [pc, #600]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d00c      	beq.n	8000e2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e14:	4b93      	ldr	r3, [pc, #588]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 030c 	and.w	r3, r3, #12
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d112      	bne.n	8000e46 <HAL_RCC_OscConfig+0x62>
 8000e20:	4b90      	ldr	r3, [pc, #576]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e2c:	d10b      	bne.n	8000e46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2e:	4b8d      	ldr	r3, [pc, #564]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d06c      	beq.n	8000f14 <HAL_RCC_OscConfig+0x130>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d168      	bne.n	8000f14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e26b      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e4e:	d106      	bne.n	8000e5e <HAL_RCC_OscConfig+0x7a>
 8000e50:	4a84      	ldr	r2, [pc, #528]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e52:	4b84      	ldr	r3, [pc, #528]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	e02e      	b.n	8000ebc <HAL_RCC_OscConfig+0xd8>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x9c>
 8000e66:	4a7f      	ldr	r2, [pc, #508]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e68:	4b7e      	ldr	r3, [pc, #504]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	4a7c      	ldr	r2, [pc, #496]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e74:	4b7b      	ldr	r3, [pc, #492]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e01d      	b.n	8000ebc <HAL_RCC_OscConfig+0xd8>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e88:	d10c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0xc0>
 8000e8a:	4a76      	ldr	r2, [pc, #472]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e8c:	4b75      	ldr	r3, [pc, #468]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4a73      	ldr	r2, [pc, #460]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e98:	4b72      	ldr	r3, [pc, #456]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e00b      	b.n	8000ebc <HAL_RCC_OscConfig+0xd8>
 8000ea4:	4a6f      	ldr	r2, [pc, #444]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000ea6:	4b6f      	ldr	r3, [pc, #444]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4a6c      	ldr	r2, [pc, #432]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000eb2:	4b6c      	ldr	r3, [pc, #432]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d013      	beq.n	8000eec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fc9e 	bl	8000804 <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ecc:	f7ff fc9a 	bl	8000804 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b64      	cmp	r3, #100	; 0x64
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e21f      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ede:	4b61      	ldr	r3, [pc, #388]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f0      	beq.n	8000ecc <HAL_RCC_OscConfig+0xe8>
 8000eea:	e014      	b.n	8000f16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eec:	f7ff fc8a 	bl	8000804 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff fc86 	bl	8000804 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b64      	cmp	r3, #100	; 0x64
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e20b      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f06:	4b57      	ldr	r3, [pc, #348]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x110>
 8000f12:	e000      	b.n	8000f16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d069      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f22:	4b50      	ldr	r3, [pc, #320]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f2e:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 030c 	and.w	r3, r3, #12
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	d11c      	bne.n	8000f74 <HAL_RCC_OscConfig+0x190>
 8000f3a:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d116      	bne.n	8000f74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f46:	4b47      	ldr	r3, [pc, #284]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <HAL_RCC_OscConfig+0x17a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d001      	beq.n	8000f5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e1df      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5e:	4941      	ldr	r1, [pc, #260]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000f60:	4b40      	ldr	r3, [pc, #256]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f72:	e040      	b.n	8000ff6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d023      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f7c:	4a39      	ldr	r2, [pc, #228]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000f7e:	4b39      	ldr	r3, [pc, #228]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f88:	f7ff fc3c 	bl	8000804 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f90:	f7ff fc38 	bl	8000804 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e1bd      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa2:	4b30      	ldr	r3, [pc, #192]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f0      	beq.n	8000f90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fae:	492d      	ldr	r1, [pc, #180]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]
 8000fc2:	e018      	b.n	8000ff6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc4:	4a27      	ldr	r2, [pc, #156]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 0301 	bic.w	r3, r3, #1
 8000fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fc18 	bl	8000804 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd8:	f7ff fc14 	bl	8000804 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e199      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d038      	beq.n	8001074 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d019      	beq.n	800103e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 800100e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001016:	f7ff fbf5 	bl	8000804 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800101e:	f7ff fbf1 	bl	8000804 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e176      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8001032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x23a>
 800103c:	e01a      	b.n	8001074 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_RCC_OscConfig+0x280>)
 8001042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800104a:	f7ff fbdb 	bl	8000804 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001052:	f7ff fbd7 	bl	8000804 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d903      	bls.n	8001068 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e15c      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
 8001064:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001068:	4b91      	ldr	r3, [pc, #580]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 800106a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1ee      	bne.n	8001052 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80a4 	beq.w	80011ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001082:	4b8b      	ldr	r3, [pc, #556]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10d      	bne.n	80010aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4a88      	ldr	r2, [pc, #544]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001090:	4b87      	ldr	r3, [pc, #540]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b85      	ldr	r3, [pc, #532]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010a6:	2301      	movs	r3, #1
 80010a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010aa:	4b82      	ldr	r3, [pc, #520]	; (80012b4 <HAL_RCC_OscConfig+0x4d0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d118      	bne.n	80010e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80010b6:	4a7f      	ldr	r2, [pc, #508]	; (80012b4 <HAL_RCC_OscConfig+0x4d0>)
 80010b8:	4b7e      	ldr	r3, [pc, #504]	; (80012b4 <HAL_RCC_OscConfig+0x4d0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c2:	f7ff fb9f 	bl	8000804 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ca:	f7ff fb9b 	bl	8000804 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b64      	cmp	r3, #100	; 0x64
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e120      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010dc:	4b75      	ldr	r3, [pc, #468]	; (80012b4 <HAL_RCC_OscConfig+0x4d0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f0      	beq.n	80010ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d106      	bne.n	80010fe <HAL_RCC_OscConfig+0x31a>
 80010f0:	4a6f      	ldr	r2, [pc, #444]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 80010f2:	4b6f      	ldr	r3, [pc, #444]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 80010f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6713      	str	r3, [r2, #112]	; 0x70
 80010fc:	e02d      	b.n	800115a <HAL_RCC_OscConfig+0x376>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0x33c>
 8001106:	4a6a      	ldr	r2, [pc, #424]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001108:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 800110a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	6713      	str	r3, [r2, #112]	; 0x70
 8001112:	4a67      	ldr	r2, [pc, #412]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001114:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001118:	f023 0304 	bic.w	r3, r3, #4
 800111c:	6713      	str	r3, [r2, #112]	; 0x70
 800111e:	e01c      	b.n	800115a <HAL_RCC_OscConfig+0x376>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b05      	cmp	r3, #5
 8001126:	d10c      	bne.n	8001142 <HAL_RCC_OscConfig+0x35e>
 8001128:	4a61      	ldr	r2, [pc, #388]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 800112a:	4b61      	ldr	r3, [pc, #388]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 800112c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6713      	str	r3, [r2, #112]	; 0x70
 8001134:	4a5e      	ldr	r2, [pc, #376]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001136:	4b5e      	ldr	r3, [pc, #376]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6713      	str	r3, [r2, #112]	; 0x70
 8001140:	e00b      	b.n	800115a <HAL_RCC_OscConfig+0x376>
 8001142:	4a5b      	ldr	r2, [pc, #364]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001144:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001148:	f023 0301 	bic.w	r3, r3, #1
 800114c:	6713      	str	r3, [r2, #112]	; 0x70
 800114e:	4a58      	ldr	r2, [pc, #352]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001150:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001154:	f023 0304 	bic.w	r3, r3, #4
 8001158:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d015      	beq.n	800118e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001162:	f7ff fb4f 	bl	8000804 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001168:	e00a      	b.n	8001180 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116a:	f7ff fb4b 	bl	8000804 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	f241 3288 	movw	r2, #5000	; 0x1388
 8001178:	4293      	cmp	r3, r2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e0ce      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001180:	4b4b      	ldr	r3, [pc, #300]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0ee      	beq.n	800116a <HAL_RCC_OscConfig+0x386>
 800118c:	e014      	b.n	80011b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118e:	f7ff fb39 	bl	8000804 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001194:	e00a      	b.n	80011ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001196:	f7ff fb35 	bl	8000804 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e0b8      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ac:	4b40      	ldr	r3, [pc, #256]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 80011ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1ee      	bne.n	8001196 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d105      	bne.n	80011ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011be:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 80011c0:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 80a4 	beq.w	800131c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d4:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d06b      	beq.n	80012b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d149      	bne.n	800127c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e8:	4a31      	ldr	r2, [pc, #196]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f4:	f7ff fb06 	bl	8000804 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff fb02 	bl	8000804 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e087      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800121a:	4925      	ldr	r1, [pc, #148]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69da      	ldr	r2, [r3, #28]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	019b      	lsls	r3, r3, #6
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001232:	085b      	lsrs	r3, r3, #1
 8001234:	3b01      	subs	r3, #1
 8001236:	041b      	lsls	r3, r3, #16
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	061b      	lsls	r3, r3, #24
 8001240:	4313      	orrs	r3, r2
 8001242:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff fad6 	bl	8000804 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125c:	f7ff fad2 	bl	8000804 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e057      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x478>
 800127a:	e04f      	b.n	800131c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800127c:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001288:	f7ff fabc 	bl	8000804 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001290:	f7ff fab8 	bl	8000804 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e03d      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a2:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0x4ac>
 80012ae:	e035      	b.n	800131c <HAL_RCC_OscConfig+0x538>
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_RCC_OscConfig+0x544>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d028      	beq.n	8001318 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d121      	bne.n	8001318 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012de:	429a      	cmp	r2, r3
 80012e0:	d11a      	bne.n	8001318 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012e8:	4013      	ands	r3, r2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d111      	bne.n	8001318 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	085b      	lsrs	r3, r3, #1
 8001300:	3b01      	subs	r3, #1
 8001302:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001304:	429a      	cmp	r2, r3
 8001306:	d107      	bne.n	8001318 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0d0      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001344:	4b6a      	ldr	r3, [pc, #424]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 020f 	and.w	r2, r3, #15
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d210      	bcs.n	8001374 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001352:	4967      	ldr	r1, [pc, #412]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	4b66      	ldr	r3, [pc, #408]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 020f 	bic.w	r2, r3, #15
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001362:	4b63      	ldr	r3, [pc, #396]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 020f 	and.w	r2, r3, #15
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d001      	beq.n	8001374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e0b8      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800138c:	4a59      	ldr	r2, [pc, #356]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 800138e:	4b59      	ldr	r3, [pc, #356]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001396:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013a4:	4a53      	ldr	r2, [pc, #332]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 80013a6:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b0:	4950      	ldr	r1, [pc, #320]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 80013b2:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	4313      	orrs	r3, r2
 80013c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d040      	beq.n	8001450 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d107      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b47      	ldr	r3, [pc, #284]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d115      	bne.n	800140e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e07f      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d107      	bne.n	80013fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d109      	bne.n	800140e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e073      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fe:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e06b      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800140e:	4939      	ldr	r1, [pc, #228]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001410:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f023 0203 	bic.w	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4313      	orrs	r3, r2
 800141e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001420:	f7ff f9f0 	bl	8000804 <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001426:	e00a      	b.n	800143e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001428:	f7ff f9ec 	bl	8000804 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	; 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e053      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143e:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 020c 	and.w	r2, r3, #12
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	429a      	cmp	r2, r3
 800144e:	d1eb      	bne.n	8001428 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 020f 	and.w	r2, r3, #15
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d910      	bls.n	8001480 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4924      	ldr	r1, [pc, #144]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 020f 	bic.w	r2, r3, #15
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 020f 	and.w	r2, r3, #15
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e032      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800148c:	4919      	ldr	r1, [pc, #100]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d009      	beq.n	80014be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014aa:	4912      	ldr	r1, [pc, #72]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014be:	f000 f821 	bl	8001504 <HAL_RCC_GetSysClockFreq>
 80014c2:	4601      	mov	r1, r0
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <HAL_RCC_ClockConfig+0x1cc>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	fa21 f303 	lsr.w	r3, r1, r3
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_RCC_ClockConfig+0x1d0>)
 80014d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_RCC_ClockConfig+0x1d4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f94c 	bl	800077c <HAL_InitTick>

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00
 80014f4:	40023800 	.word	0x40023800
 80014f8:	08001734 	.word	0x08001734
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001508:	b087      	sub	sp, #28
 800150a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800150c:	2200      	movs	r2, #0
 800150e:	60fa      	str	r2, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	617a      	str	r2, [r7, #20]
 8001514:	2200      	movs	r2, #0
 8001516:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8001518:	2200      	movs	r2, #0
 800151a:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800151c:	4a51      	ldr	r2, [pc, #324]	; (8001664 <HAL_RCC_GetSysClockFreq+0x160>)
 800151e:	6892      	ldr	r2, [r2, #8]
 8001520:	f002 020c 	and.w	r2, r2, #12
 8001524:	2a04      	cmp	r2, #4
 8001526:	d007      	beq.n	8001538 <HAL_RCC_GetSysClockFreq+0x34>
 8001528:	2a08      	cmp	r2, #8
 800152a:	d008      	beq.n	800153e <HAL_RCC_GetSysClockFreq+0x3a>
 800152c:	2a00      	cmp	r2, #0
 800152e:	f040 8090 	bne.w	8001652 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <HAL_RCC_GetSysClockFreq+0x164>)
 8001534:	613b      	str	r3, [r7, #16]
      break;
 8001536:	e08f      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001538:	4b4c      	ldr	r3, [pc, #304]	; (800166c <HAL_RCC_GetSysClockFreq+0x168>)
 800153a:	613b      	str	r3, [r7, #16]
      break;
 800153c:	e08c      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800153e:	4a49      	ldr	r2, [pc, #292]	; (8001664 <HAL_RCC_GetSysClockFreq+0x160>)
 8001540:	6852      	ldr	r2, [r2, #4]
 8001542:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001546:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001548:	4a46      	ldr	r2, [pc, #280]	; (8001664 <HAL_RCC_GetSysClockFreq+0x160>)
 800154a:	6852      	ldr	r2, [r2, #4]
 800154c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001550:	2a00      	cmp	r2, #0
 8001552:	d023      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001554:	4b43      	ldr	r3, [pc, #268]	; (8001664 <HAL_RCC_GetSysClockFreq+0x160>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	f04f 0400 	mov.w	r4, #0
 800155e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	ea03 0301 	and.w	r3, r3, r1
 800156a:	ea04 0402 	and.w	r4, r4, r2
 800156e:	4a3f      	ldr	r2, [pc, #252]	; (800166c <HAL_RCC_GetSysClockFreq+0x168>)
 8001570:	fb02 f104 	mul.w	r1, r2, r4
 8001574:	2200      	movs	r2, #0
 8001576:	fb02 f203 	mul.w	r2, r2, r3
 800157a:	440a      	add	r2, r1
 800157c:	493b      	ldr	r1, [pc, #236]	; (800166c <HAL_RCC_GetSysClockFreq+0x168>)
 800157e:	fba3 0101 	umull	r0, r1, r3, r1
 8001582:	1853      	adds	r3, r2, r1
 8001584:	4619      	mov	r1, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f04f 0400 	mov.w	r4, #0
 800158c:	461a      	mov	r2, r3
 800158e:	4623      	mov	r3, r4
 8001590:	f7fe fe3a 	bl	8000208 <__aeabi_uldivmod>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e04c      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800159c:	4a31      	ldr	r2, [pc, #196]	; (8001664 <HAL_RCC_GetSysClockFreq+0x160>)
 800159e:	6852      	ldr	r2, [r2, #4]
 80015a0:	0992      	lsrs	r2, r2, #6
 80015a2:	4611      	mov	r1, r2
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f240 15ff 	movw	r5, #511	; 0x1ff
 80015ac:	f04f 0600 	mov.w	r6, #0
 80015b0:	ea05 0501 	and.w	r5, r5, r1
 80015b4:	ea06 0602 	and.w	r6, r6, r2
 80015b8:	4629      	mov	r1, r5
 80015ba:	4632      	mov	r2, r6
 80015bc:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80015c0:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80015c4:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80015c8:	4651      	mov	r1, sl
 80015ca:	465a      	mov	r2, fp
 80015cc:	46aa      	mov	sl, r5
 80015ce:	46b3      	mov	fp, r6
 80015d0:	4655      	mov	r5, sl
 80015d2:	465e      	mov	r6, fp
 80015d4:	1b4d      	subs	r5, r1, r5
 80015d6:	eb62 0606 	sbc.w	r6, r2, r6
 80015da:	4629      	mov	r1, r5
 80015dc:	4632      	mov	r2, r6
 80015de:	0194      	lsls	r4, r2, #6
 80015e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015e4:	018b      	lsls	r3, r1, #6
 80015e6:	1a5b      	subs	r3, r3, r1
 80015e8:	eb64 0402 	sbc.w	r4, r4, r2
 80015ec:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80015f0:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80015f4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80015f8:	4643      	mov	r3, r8
 80015fa:	464c      	mov	r4, r9
 80015fc:	4655      	mov	r5, sl
 80015fe:	465e      	mov	r6, fp
 8001600:	18ed      	adds	r5, r5, r3
 8001602:	eb46 0604 	adc.w	r6, r6, r4
 8001606:	462b      	mov	r3, r5
 8001608:	4634      	mov	r4, r6
 800160a:	02a2      	lsls	r2, r4, #10
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	029b      	lsls	r3, r3, #10
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800161e:	4618      	mov	r0, r3
 8001620:	4621      	mov	r1, r4
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f04f 0400 	mov.w	r4, #0
 8001628:	461a      	mov	r2, r3
 800162a:	4623      	mov	r3, r4
 800162c:	f7fe fdec 	bl	8000208 <__aeabi_uldivmod>
 8001630:	4603      	mov	r3, r0
 8001632:	460c      	mov	r4, r1
 8001634:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_GetSysClockFreq+0x160>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	0c1b      	lsrs	r3, r3, #16
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	3301      	adds	r3, #1
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco / pllp;
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	613b      	str	r3, [r7, #16]
      break;
 8001650:	e002      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_RCC_GetSysClockFreq+0x164>)
 8001654:	613b      	str	r3, [r7, #16]
      break;
 8001656:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001658:	693b      	ldr	r3, [r7, #16]
}
 800165a:	4618      	mov	r0, r3
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	00f42400 	.word	0x00f42400
 800166c:	017d7840 	.word	0x017d7840

08001670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001674:	480d      	ldr	r0, [pc, #52]	; (80016ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001676:	490e      	ldr	r1, [pc, #56]	; (80016b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800168c:	4c0b      	ldr	r4, [pc, #44]	; (80016bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800169a:	f7ff f84f 	bl	800073c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169e:	f000 f811 	bl	80016c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a2:	f7fe ff89 	bl	80005b8 <main>
  bx  lr    
 80016a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016b4:	08001754 	.word	0x08001754
  ldr r2, =_sbss
 80016b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016bc:	2000002c 	.word	0x2000002c

080016c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC_IRQHandler>
	...

080016c4 <__libc_init_array>:
 80016c4:	b570      	push	{r4, r5, r6, lr}
 80016c6:	4e0d      	ldr	r6, [pc, #52]	; (80016fc <__libc_init_array+0x38>)
 80016c8:	4c0d      	ldr	r4, [pc, #52]	; (8001700 <__libc_init_array+0x3c>)
 80016ca:	1ba4      	subs	r4, r4, r6
 80016cc:	10a4      	asrs	r4, r4, #2
 80016ce:	2500      	movs	r5, #0
 80016d0:	42a5      	cmp	r5, r4
 80016d2:	d109      	bne.n	80016e8 <__libc_init_array+0x24>
 80016d4:	4e0b      	ldr	r6, [pc, #44]	; (8001704 <__libc_init_array+0x40>)
 80016d6:	4c0c      	ldr	r4, [pc, #48]	; (8001708 <__libc_init_array+0x44>)
 80016d8:	f000 f820 	bl	800171c <_init>
 80016dc:	1ba4      	subs	r4, r4, r6
 80016de:	10a4      	asrs	r4, r4, #2
 80016e0:	2500      	movs	r5, #0
 80016e2:	42a5      	cmp	r5, r4
 80016e4:	d105      	bne.n	80016f2 <__libc_init_array+0x2e>
 80016e6:	bd70      	pop	{r4, r5, r6, pc}
 80016e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016ec:	4798      	blx	r3
 80016ee:	3501      	adds	r5, #1
 80016f0:	e7ee      	b.n	80016d0 <__libc_init_array+0xc>
 80016f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016f6:	4798      	blx	r3
 80016f8:	3501      	adds	r5, #1
 80016fa:	e7f2      	b.n	80016e2 <__libc_init_array+0x1e>
 80016fc:	0800174c 	.word	0x0800174c
 8001700:	0800174c 	.word	0x0800174c
 8001704:	0800174c 	.word	0x0800174c
 8001708:	08001750 	.word	0x08001750

0800170c <memset>:
 800170c:	4402      	add	r2, r0
 800170e:	4603      	mov	r3, r0
 8001710:	4293      	cmp	r3, r2
 8001712:	d100      	bne.n	8001716 <memset+0xa>
 8001714:	4770      	bx	lr
 8001716:	f803 1b01 	strb.w	r1, [r3], #1
 800171a:	e7f9      	b.n	8001710 <memset+0x4>

0800171c <_init>:
 800171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171e:	bf00      	nop
 8001720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001722:	bc08      	pop	{r3}
 8001724:	469e      	mov	lr, r3
 8001726:	4770      	bx	lr

08001728 <_fini>:
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172a:	bf00      	nop
 800172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172e:	bc08      	pop	{r3}
 8001730:	469e      	mov	lr, r3
 8001732:	4770      	bx	lr
