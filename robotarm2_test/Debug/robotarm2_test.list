
robotarm2_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003374  080118c8  080118c8  000218c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014c3c  08014c3c  00024c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014c44  08014c44  00024c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014c48  08014c48  00024c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  08014c4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006cc0  20000080  08014ccc  00030080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20006d40  08014ccc  00036d40  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ba23  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000051bf  00000000  00000000  0005bad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001270  00000000  00000000  00060c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001198  00000000  00000000  00061f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d919  00000000  00000000  000630a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006246  00000000  00000000  000709b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00076bff  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004f20  00000000  00000000  00076c7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080118b0 	.word	0x080118b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080118b0 	.word	0x080118b0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b97a 	b.w	80005ec <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4a25      	ldr	r2, [pc, #148]	; (800069c <MX_GPIO_Init+0xac>)
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <MX_GPIO_Init+0xac>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b22      	ldr	r3, [pc, #136]	; (800069c <MX_GPIO_Init+0xac>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4a1f      	ldr	r2, [pc, #124]	; (800069c <MX_GPIO_Init+0xac>)
 8000620:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_GPIO_Init+0xac>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_GPIO_Init+0xac>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4a19      	ldr	r2, [pc, #100]	; (800069c <MX_GPIO_Init+0xac>)
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_GPIO_Init+0xac>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_GPIO_Init+0xac>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_red_Pin|led_blue_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000654:	4812      	ldr	r0, [pc, #72]	; (80006a0 <MX_GPIO_Init+0xb0>)
 8000656:	f001 fdb3 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = btn_Pin;
 800065a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000670:	f001 fbfc 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = led_red_Pin|led_blue_Pin;
 8000674:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_GPIO_Init+0xb0>)
 800068e:	f001 fbed 	bl	8001e6c <HAL_GPIO_Init>

}
 8000692:	bf00      	nop
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40020400 	.word	0x40020400
 80006a4:	40020800 	.word	0x40020800

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 f978 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f80a 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f7ff ff9c 	bl	80005f0 <MX_GPIO_Init>
  MX_LWIP_Init();
 80006b8:	f002 fa3e 	bl	8002b38 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  httpd_init();
 80006bc:	f003 fbf6 	bl	8003eac <httpd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 MX_LWIP_Process();
 80006c0:	f002 fa7e 	bl	8002bc0 <MX_LWIP_Process>
 80006c4:	e7fc      	b.n	80006c0 <main+0x18>
	...

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f010 f988 	bl	80109ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <SystemClock_Config+0xd0>)
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <SystemClock_Config+0xd0>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <SystemClock_Config+0xd0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	4a25      	ldr	r2, [pc, #148]	; (800079c <SystemClock_Config+0xd4>)
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemClock_Config+0xd4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemClock_Config+0xd4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000734:	23d8      	movs	r3, #216	; 0xd8
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fda5 	bl	8002294 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000750:	f000 f826 	bl	80007a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000754:	f001 fd4e 	bl	80021f4 <HAL_PWREx_EnableOverDrive>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075e:	f000 f81f 	bl	80007a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2107      	movs	r1, #7
 8000780:	4618      	mov	r0, r3
 8000782:	f002 f82b 	bl	80027dc <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800078c:	f000 f808 	bl	80007a0 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <Error_Handler+0x6>

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <HAL_MspInit+0x44>)
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_MspInit+0x44>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_MspInit+0x44>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4a09      	ldr	r2, [pc, #36]	; (80007ec <HAL_MspInit+0x44>)
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <HAL_MspInit+0x44>)
 80007ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x44>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x4>

08000802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <UsageFault_Handler+0x4>

0800080e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 f8ee 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e00a      	b.n	800086c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000856:	68bc      	ldr	r4, [r7, #8]
 8000858:	1c63      	adds	r3, r4, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	f3af 8000 	nop.w
 8000860:	4603      	mov	r3, r0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf0      	blt.n	8000856 <_read+0x12>
	}

return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	371c      	adds	r7, #28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd90      	pop	{r4, r7, pc}

0800087e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e009      	b.n	80008a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	60ba      	str	r2, [r7, #8]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3301      	adds	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dbf1      	blt.n	8000890 <_write+0x12>
	}
	return len;
 80008ac:	687b      	ldr	r3, [r7, #4]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <_sbrk+0x50>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <_sbrk+0x16>
		heap_end = &end;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <_sbrk+0x50>)
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <_sbrk+0x54>)
 80008cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <_sbrk+0x50>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <_sbrk+0x50>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	466a      	mov	r2, sp
 80008de:	4293      	cmp	r3, r2
 80008e0:	d905      	bls.n	80008ee <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <_sbrk+0x58>)
 80008e4:	220c      	movs	r2, #12
 80008e6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	e006      	b.n	80008fc <_sbrk+0x44>
	}

	heap_end += incr;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <_sbrk+0x50>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <_sbrk+0x50>)
 80008f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008fa:	68fb      	ldr	r3, [r7, #12]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	2000009c 	.word	0x2000009c
 800090c:	20006d40 	.word	0x20006d40
 8000910:	20006d3c 	.word	0x20006d3c

08000914 <_close>:

int _close(int file)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	return -1;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093c:	605a      	str	r2, [r3, #4]
	return 0;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <_isatty>:

int _isatty(int file)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	return 1;
 8000954:	2301      	movs	r3, #1
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000962:	b480      	push	{r7}
 8000964:	b085      	sub	sp, #20
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
	return 0;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <SystemInit+0x20>)
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <SystemInit+0x20>)
 8000984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f92b 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 f806 	bl	80009bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fefa 	bl	80007a8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_InitTick+0x54>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x58>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f937 	bl	8000c4e <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f000 f90d 	bl	8000c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <HAL_InitTick+0x5c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x20>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x24>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_IncTick+0x24>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000664 	.word	0x20000664

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000664 	.word	0x20000664

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff ffee 	bl	8000a44 <HAL_GetTick>
 8000a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d005      	beq.n	8000a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_Delay+0x40>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a82:	bf00      	nop
 8000a84:	f7ff ffde 	bl	8000a44 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad2      	subs	r2, r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d3f7      	bcc.n	8000a84 <HAL_Delay+0x28>
  {
  }
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000008 	.word	0x20000008

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	4313      	orrs	r3, r2
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00
 8000ae4:	05fa0000 	.word	0x05fa0000

08000ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	490d      	ldr	r1, [pc, #52]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	4909      	ldr	r1, [pc, #36]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	1e5a      	subs	r2, r3, #1
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	401a      	ands	r2, r3
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	1e59      	subs	r1, r3, #1
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f7ff ff90 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff49 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff5e 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff90 	bl	8000b58 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5f 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffb0 	bl	8000bbc <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000c78:	4ba9      	ldr	r3, [pc, #676]	; (8000f20 <HAL_ETH_Init+0x2b8>)
 8000c7a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e183      	b.n	8000f96 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d106      	bne.n	8000ca8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f001 ff98 	bl	8002bd8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca8:	4a9e      	ldr	r2, [pc, #632]	; (8000f24 <HAL_ETH_Init+0x2bc>)
 8000caa:	4b9e      	ldr	r3, [pc, #632]	; (8000f24 <HAL_ETH_Init+0x2bc>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb4:	4b9b      	ldr	r3, [pc, #620]	; (8000f24 <HAL_ETH_Init+0x2bc>)
 8000cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000cc0:	4a99      	ldr	r2, [pc, #612]	; (8000f28 <HAL_ETH_Init+0x2c0>)
 8000cc2:	4b99      	ldr	r3, [pc, #612]	; (8000f28 <HAL_ETH_Init+0x2c0>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000cca:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000ccc:	4996      	ldr	r1, [pc, #600]	; (8000f28 <HAL_ETH_Init+0x2c0>)
 8000cce:	4b96      	ldr	r3, [pc, #600]	; (8000f28 <HAL_ETH_Init+0x2c0>)
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a1b      	ldr	r3, [r3, #32]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000ce6:	6812      	ldr	r2, [r2, #0]
 8000ce8:	f042 0201 	orr.w	r2, r2, #1
 8000cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cf0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000cf2:	f7ff fea7 	bl	8000a44 <HAL_GetTick>
 8000cf6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000cf8:	e011      	b.n	8000d1e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000cfa:	f7ff fea3 	bl	8000a44 <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d08:	d909      	bls.n	8000d1e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e13b      	b.n	8000f96 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1e4      	bne.n	8000cfa <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f023 031c 	bic.w	r3, r3, #28
 8000d3e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000d40:	f001 feee 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8000d44:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	4a78      	ldr	r2, [pc, #480]	; (8000f2c <HAL_ETH_Init+0x2c4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d908      	bls.n	8000d60 <HAL_ETH_Init+0xf8>
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4a77      	ldr	r2, [pc, #476]	; (8000f30 <HAL_ETH_Init+0x2c8>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d804      	bhi.n	8000d60 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	61fb      	str	r3, [r7, #28]
 8000d5e:	e027      	b.n	8000db0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	4a73      	ldr	r2, [pc, #460]	; (8000f30 <HAL_ETH_Init+0x2c8>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d908      	bls.n	8000d7a <HAL_ETH_Init+0x112>
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	4a72      	ldr	r2, [pc, #456]	; (8000f34 <HAL_ETH_Init+0x2cc>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d804      	bhi.n	8000d7a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f043 030c 	orr.w	r3, r3, #12
 8000d76:	61fb      	str	r3, [r7, #28]
 8000d78:	e01a      	b.n	8000db0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4a6d      	ldr	r2, [pc, #436]	; (8000f34 <HAL_ETH_Init+0x2cc>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d903      	bls.n	8000d8a <HAL_ETH_Init+0x122>
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4a6c      	ldr	r2, [pc, #432]	; (8000f38 <HAL_ETH_Init+0x2d0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d911      	bls.n	8000dae <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4a6a      	ldr	r2, [pc, #424]	; (8000f38 <HAL_ETH_Init+0x2d0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d908      	bls.n	8000da4 <HAL_ETH_Init+0x13c>
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	4a69      	ldr	r2, [pc, #420]	; (8000f3c <HAL_ETH_Init+0x2d4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d804      	bhi.n	8000da4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	e005      	b.n	8000db0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	61fb      	str	r3, [r7, #28]
 8000dac:	e000      	b.n	8000db0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000dae:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	69fa      	ldr	r2, [r7, #28]
 8000db6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000db8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fb9a 	bl	80014f8 <HAL_ETH_WritePHYRegister>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00b      	beq.n	8000de2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000dce:	6939      	ldr	r1, [r7, #16]
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 fd4d 	bl	8001870 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e0d9      	b.n	8000f96 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	f7ff fe3a 	bl	8000a5c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80a7 	beq.w	8000f40 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000df2:	f7ff fe27 	bl	8000a44 <HAL_GetTick>
 8000df6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	2101      	movs	r1, #1
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 fb11 	bl	8001428 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000e06:	f7ff fe1d 	bl	8000a44 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d90f      	bls.n	8000e38 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000e1c:	6939      	ldr	r1, [r7, #16]
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 fd26 	bl	8001870 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e0ae      	b.n	8000f96 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0da      	beq.n	8000df8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000e42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e46:	2100      	movs	r1, #0
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 fb55 	bl	80014f8 <HAL_ETH_WritePHYRegister>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00b      	beq.n	8000e6c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000e58:	6939      	ldr	r1, [r7, #16]
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 fd08 	bl	8001870 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e094      	b.n	8000f96 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000e6c:	f7ff fdea 	bl	8000a44 <HAL_GetTick>
 8000e70:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	461a      	mov	r2, r3
 8000e78:	2101      	movs	r1, #1
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 fad4 	bl	8001428 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000e80:	f7ff fde0 	bl	8000a44 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d90f      	bls.n	8000eb2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000e96:	6939      	ldr	r1, [r7, #16]
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 fce9 	bl	8001870 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e071      	b.n	8000f96 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f003 0320 	and.w	r3, r3, #32
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0da      	beq.n	8000e72 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	211f      	movs	r1, #31
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 faaf 	bl	8001428 <HAL_ETH_ReadPHYRegister>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00b      	beq.n	8000ee8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ed4:	6939      	ldr	r1, [r7, #16]
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 fcca 	bl	8001870 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e056      	b.n	8000f96 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d004      	beq.n	8000efc <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	e002      	b.n	8000f02 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	e037      	b.n	8000f84 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	e032      	b.n	8000f84 <HAL_ETH_Init+0x31c>
 8000f1e:	bf00      	nop
 8000f20:	03938700 	.word	0x03938700
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40013800 	.word	0x40013800
 8000f2c:	01312cff 	.word	0x01312cff
 8000f30:	02160ebf 	.word	0x02160ebf
 8000f34:	039386ff 	.word	0x039386ff
 8000f38:	05f5e0ff 	.word	0x05f5e0ff
 8000f3c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	08db      	lsrs	r3, r3, #3
 8000f46:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	085b      	lsrs	r3, r3, #1
 8000f4e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 facd 	bl	80014f8 <HAL_ETH_WritePHYRegister>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f68:	6939      	ldr	r1, [r7, #16]
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fc80 	bl	8001870 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e00c      	b.n	8000f96 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000f7c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f80:	f7ff fd6c 	bl	8000a5c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000f84:	6939      	ldr	r1, [r7, #16]
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fc72 	bl	8001870 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3720      	adds	r7, #32
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop

08000fa0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HAL_ETH_DMATxDescListInit+0x20>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e052      	b.n	8001066 <HAL_ETH_DMATxDescListInit+0xc6>
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2202      	movs	r2, #2
 8000fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	e030      	b.n	800103e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	015b      	lsls	r3, r3, #5
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fec:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	429a      	cmp	r2, r3
 800101e:	d908      	bls.n	8001032 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	015b      	lsls	r3, r3, #5
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	4413      	add	r3, r2
 800102a:	461a      	mov	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	e002      	b.n	8001038 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d3ca      	bcc.n	8000fdc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6819      	ldr	r1, [r3, #0]
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f241 0310 	movw	r3, #4112	; 0x1010
 8001050:	440b      	add	r3, r1
 8001052:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001072:	b480      	push	{r7}
 8001074:	b087      	sub	sp, #28
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_ETH_DMARxDescListInit+0x20>
 800108e:	2302      	movs	r3, #2
 8001090:	e056      	b.n	8001140 <HAL_ETH_DMARxDescListInit+0xce>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2202      	movs	r2, #2
 800109e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e034      	b.n	8001118 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	015b      	lsls	r3, r3, #5
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	4413      	add	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010be:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80010c6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	461a      	mov	r2, r3
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d105      	bne.n	80010f0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	1e5a      	subs	r2, r3, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d908      	bls.n	800110c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	015b      	lsls	r3, r3, #5
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	4413      	add	r3, r2
 8001104:	461a      	mov	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	e002      	b.n	8001112 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d3c6      	bcc.n	80010ae <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6819      	ldr	r1, [r3, #0]
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	f241 030c 	movw	r3, #4108	; 0x100c
 800112a:	440b      	add	r3, r1
 800112c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_ETH_TransmitFrame+0x24>
 800116c:	2302      	movs	r3, #2
 800116e:	e0cd      	b.n	800130c <HAL_ETH_TransmitFrame+0x1c0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2202      	movs	r2, #2
 800117c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001196:	2301      	movs	r3, #1
 8001198:	e0b8      	b.n	800130c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	da09      	bge.n	80011b8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2212      	movs	r2, #18
 80011a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e0a9      	b.n	800130c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011be:	4293      	cmp	r3, r2
 80011c0:	d915      	bls.n	80011ee <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	4a54      	ldr	r2, [pc, #336]	; (8001318 <HAL_ETH_TransmitFrame+0x1cc>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0a9b      	lsrs	r3, r3, #10
 80011cc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	4b51      	ldr	r3, [pc, #324]	; (8001318 <HAL_ETH_TransmitFrame+0x1cc>)
 80011d2:	fba3 1302 	umull	r1, r3, r3, r2
 80011d6:	0a9b      	lsrs	r3, r3, #10
 80011d8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e001      	b.n	80011f2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d11c      	bne.n	8001232 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001206:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001212:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001222:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	461a      	mov	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001230:	e04b      	b.n	80012ca <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	e044      	b.n	80012c2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001246:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d107      	bne.n	800125e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800125c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001266:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	1e5a      	subs	r2, r3, #1
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	429a      	cmp	r2, r3
 8001270:	d116      	bne.n	80012a0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001280:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	4a25      	ldr	r2, [pc, #148]	; (800131c <HAL_ETH_TransmitFrame+0x1d0>)
 8001286:	fb02 f203 	mul.w	r2, r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001292:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800129e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012ae:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	3301      	adds	r3, #1
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3b6      	bcc.n	8001238 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	f241 0314 	movw	r3, #4116	; 0x1014
 80012d2:	4413      	add	r3, r2
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00d      	beq.n	80012fa <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	f241 0314 	movw	r3, #4116	; 0x1014
 80012e6:	4413      	add	r3, r2
 80012e8:	2204      	movs	r2, #4
 80012ea:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	f241 0304 	movw	r3, #4100	; 0x1004
 80012f4:	4413      	add	r3, r2
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	ac02b00b 	.word	0xac02b00b
 800131c:	fffffa0c 	.word	0xfffffa0c

08001320 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_ETH_GetReceivedFrame+0x1a>
 8001336:	2302      	movs	r3, #2
 8001338:	e070      	b.n	800141c <HAL_ETH_GetReceivedFrame+0xfc>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2202      	movs	r2, #2
 8001346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db5a      	blt.n	800140a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d030      	beq.n	80013c4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001370:	2b01      	cmp	r3, #1
 8001372:	d103      	bne.n	800137c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	0c1b      	lsrs	r3, r3, #16
 800138c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001390:	3b04      	subs	r3, #4
 8001392:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	461a      	mov	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e02b      	b.n	800141c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d010      	beq.n	80013f4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	461a      	mov	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	629a      	str	r2, [r3, #40]	; 0x28
 80013f2:	e00a      	b.n	800140a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	461a      	mov	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	460b      	mov	r3, r1
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b82      	cmp	r3, #130	; 0x82
 8001448:	d101      	bne.n	800144e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800144a:	2302      	movs	r3, #2
 800144c:	e050      	b.n	80014f0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2282      	movs	r2, #130	; 0x82
 8001452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f003 031c 	and.w	r3, r3, #28
 8001464:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	8a1b      	ldrh	r3, [r3, #16]
 800146a:	02db      	lsls	r3, r3, #11
 800146c:	b29b      	uxth	r3, r3
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4313      	orrs	r3, r2
 8001472:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001474:	897b      	ldrh	r3, [r7, #10]
 8001476:	019b      	lsls	r3, r3, #6
 8001478:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4313      	orrs	r3, r2
 8001480:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f023 0302 	bic.w	r3, r3, #2
 8001488:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800149a:	f7ff fad3 	bl	8000a44 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014a0:	e015      	b.n	80014ce <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80014a2:	f7ff facf 	bl	8000a44 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b0:	d309      	bcc.n	80014c6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e014      	b.n	80014f0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e4      	bne.n	80014a2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	460b      	mov	r3, r1
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b42      	cmp	r3, #66	; 0x42
 8001518:	d101      	bne.n	800151e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800151a:	2302      	movs	r3, #2
 800151c:	e04e      	b.n	80015bc <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2242      	movs	r2, #66	; 0x42
 8001522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f003 031c 	and.w	r3, r3, #28
 8001534:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8a1b      	ldrh	r3, [r3, #16]
 800153a:	02db      	lsls	r3, r3, #11
 800153c:	b29b      	uxth	r3, r3
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4313      	orrs	r3, r2
 8001542:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001544:	897b      	ldrh	r3, [r7, #10]
 8001546:	019b      	lsls	r3, r3, #6
 8001548:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	4313      	orrs	r3, r2
 8001550:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	b292      	uxth	r2, r2
 800156a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001574:	f7ff fa66 	bl	8000a44 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800157a:	e015      	b.n	80015a8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800157c:	f7ff fa62 	bl	8000a44 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158a:	d309      	bcc.n	80015a0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e00d      	b.n	80015bc <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1e4      	bne.n	800157c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_ETH_Start+0x16>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e01f      	b.n	800161a <HAL_ETH_Start+0x56>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2202      	movs	r2, #2
 80015e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 fb40 	bl	8001c70 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fb77 	bl	8001ce4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fc0e 	bl	8001e18 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fbab 	bl	8001d58 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fbd8 	bl	8001db8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_ETH_Stop+0x16>
 8001634:	2302      	movs	r3, #2
 8001636:	e01f      	b.n	8001678 <HAL_ETH_Stop+0x56>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fb9d 	bl	8001d88 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fbca 	bl	8001de8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 fb62 	bl	8001d1e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fbdc 	bl	8001e18 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 fb22 	bl	8001caa <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <HAL_ETH_ConfigMAC+0x1c>
 8001698:	2302      	movs	r3, #2
 800169a:	e0e3      	b.n	8001864 <HAL_ETH_ConfigMAC+0x1e4>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80b0 	beq.w	8001814 <HAL_ETH_ConfigMAC+0x194>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4b6b      	ldr	r3, [pc, #428]	; (800186c <HAL_ETH_ConfigMAC+0x1ec>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80016cc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80016d2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80016d8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80016de:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80016e4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80016ea:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80016f0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80016f6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80016fc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001702:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001708:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800170e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff f998 	bl	8000a5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	6b12      	ldr	r2, [r2, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001740:	4311      	orrs	r1, r2
                                          macconf->PassControlFrames |
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	6b52      	ldr	r2, [r2, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001746:	4311      	orrs	r1, r2
                                          macconf->BroadcastFramesReception | 
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	6b92      	ldr	r2, [r2, #56]	; 0x38
                                          macconf->PassControlFrames |
 800174c:	4311      	orrs	r1, r2
                                          macconf->DestinationAddrFilter |
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001752:	4311      	orrs	r1, r2
                                          macconf->PromiscuousMode |
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	6c12      	ldr	r2, [r2, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001758:	4311      	orrs	r1, r2
                                          macconf->MulticastFramesFilter |
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	6c52      	ldr	r2, [r2, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800175e:	4311      	orrs	r1, r2
                                          macconf->UnicastFramesFilter);
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	6c92      	ldr	r2, [r2, #72]	; 0x48
                                          macconf->MulticastFramesFilter |
 8001764:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001766:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001770:	2001      	movs	r0, #1
 8001772:	f7ff f973 	bl	8000a5c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001786:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001790:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f64f 7341 	movw	r3, #65345	; 0xff41
 80017a0:	4013      	ands	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80017ae:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80017b4:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80017ba:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80017c0:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80017c6:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff f93c 	bl	8000a5c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80017f8:	430a      	orrs	r2, r1
 80017fa:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001804:	2001      	movs	r0, #1
 8001806:	f7ff f929 	bl	8000a5c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	61da      	str	r2, [r3, #28]
 8001812:	e01e      	b.n	8001852 <HAL_ETH_ConfigMAC+0x1d2>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001822:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4313      	orrs	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff f909 	bl	8000a5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	ff20810f 	.word	0xff20810f

08001870 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0b0      	sub	sp, #192	; 0xc0
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800188c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001894:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800189e:	2300      	movs	r3, #0
 80018a0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80018b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ba:	663b      	str	r3, [r7, #96]	; 0x60
 80018bc:	e001      	b.n	80018c2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80018c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018cc:	2300      	movs	r3, #0
 80018ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80018dc:	2340      	movs	r3, #64	; 0x40
 80018de:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001944:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001948:	4baa      	ldr	r3, [pc, #680]	; (8001bf4 <ETH_MACDMAConfig+0x384>)
 800194a:	4013      	ands	r3, r2
 800194c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001950:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001954:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001958:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800195a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800195c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001962:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001966:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800196a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001970:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001974:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001978:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800197a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800197c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800197e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001980:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001984:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001986:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800198a:	4313      	orrs	r3, r2
 800198c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001998:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff f859 	bl	8000a5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019b2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80019ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019bc:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 80019be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80019c0:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 80019c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80019c6:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 80019c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80019cc:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 80019ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80019d2:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 80019d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80019d8:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 80019da:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 80019de:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019e0:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff f835 	bl	8000a5c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019fa:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a04:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a0e:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001a1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a1e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a22:	4013      	ands	r3, r2
 8001a24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a2c:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001a2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a32:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001a34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001a38:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001a3e:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001a44:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001a46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001a4a:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a50:	4313      	orrs	r3, r2
 8001a52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a5e:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f7fe fff6 	bl	8000a5c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a78:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001a82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a86:	430a      	orrs	r2, r1
 8001a88:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7fe ffe1 	bl	8000a5c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aa2:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001aa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aac:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001ab2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ab6:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ad8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ade:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae2:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	f241 0318 	movw	r3, #4120	; 0x1018
 8001af8:	4413      	add	r3, r2
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001b00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b04:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <ETH_MACDMAConfig+0x388>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b0c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b10:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001b12:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001b14:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001b16:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001b18:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001b1a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001b1c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001b1e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001b20:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001b22:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001b24:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001b28:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001b2c:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b32:	4313      	orrs	r3, r2
 8001b34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b40:	4413      	add	r3, r2
 8001b42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b46:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b50:	4413      	add	r3, r2
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f7fe ff7f 	bl	8000a5c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b66:	4413      	add	r3, r2
 8001b68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b6c:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b76:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001b7a:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 8001b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b7e:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 8001b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001b82:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b86:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001b88:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 8001b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b8c:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b8e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f7fe ff58 	bl	8000a5c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bb8:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d10d      	bne.n	8001bde <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	f241 031c 	movw	r3, #4124	; 0x101c
 8001bce:	4413      	add	r3, r2
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <ETH_MACDMAConfig+0x38c>)
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	f241 031c 	movw	r3, #4124	; 0x101c
 8001bda:	440b      	add	r3, r1
 8001bdc:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	461a      	mov	r2, r3
 8001be4:	2100      	movs	r1, #0
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f80a 	bl	8001c00 <ETH_MACAddressConfig>
}
 8001bec:	bf00      	nop
 8001bee:	37c0      	adds	r7, #192	; 0xc0
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	ff20810f 	.word	0xff20810f
 8001bf8:	f8de3f23 	.word	0xf8de3f23
 8001bfc:	00010040 	.word	0x00010040

08001c00 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3305      	adds	r3, #5
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	3204      	adds	r2, #4
 8001c18:	7812      	ldrb	r2, [r2, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <ETH_MACAddressConfig+0x68>)
 8001c22:	4413      	add	r3, r2
 8001c24:	461a      	mov	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3303      	adds	r3, #3
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	061a      	lsls	r2, r3, #24
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3302      	adds	r3, #2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	4313      	orrs	r3, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <ETH_MACAddressConfig+0x6c>)
 8001c52:	4413      	add	r3, r2
 8001c54:	461a      	mov	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	6013      	str	r3, [r2, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40028040 	.word	0x40028040
 8001c6c:	40028044 	.word	0x40028044

08001c70 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	f042 0208 	orr.w	r2, r2, #8
 8001c8a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7fe fee1 	bl	8000a5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	601a      	str	r2, [r3, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	f022 0208 	bic.w	r2, r2, #8
 8001cc4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7fe fec4 	bl	8000a5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	601a      	str	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	f042 0204 	orr.w	r2, r2, #4
 8001cfe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7fe fea7 	bl	8000a5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	f022 0204 	bic.w	r2, r2, #4
 8001d38:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f7fe fe8a 	bl	8000a5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	601a      	str	r2, [r3, #0]
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d74:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d78:	440b      	add	r3, r1
 8001d7a:	601a      	str	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6819      	ldr	r1, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d9c:	4413      	add	r3, r2
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001da4:	f241 0318 	movw	r3, #4120	; 0x1018
 8001da8:	440b      	add	r3, r1
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6819      	ldr	r1, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	f241 0318 	movw	r3, #4120	; 0x1018
 8001dcc:	4413      	add	r3, r2
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f043 0202 	orr.w	r2, r3, #2
 8001dd4:	f241 0318 	movw	r3, #4120	; 0x1018
 8001dd8:	440b      	add	r3, r1
 8001dda:	601a      	str	r2, [r3, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	f241 0318 	movw	r3, #4120	; 0x1018
 8001dfc:	4413      	add	r3, r2
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 0202 	bic.w	r2, r3, #2
 8001e04:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e08:	440b      	add	r3, r1
 8001e0a:	601a      	str	r2, [r3, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6819      	ldr	r1, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e30:	4413      	add	r3, r2
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e38:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e3c:	440b      	add	r3, r1
 8001e3e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e48:	4413      	add	r3, r2
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f7fe fe04 	bl	8000a5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6819      	ldr	r1, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e5e:	440b      	add	r3, r1
 8001e60:	601a      	str	r2, [r3, #0]
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	e175      	b.n	8002178 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	f040 8164 	bne.w	8002172 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d00b      	beq.n	8001eca <HAL_GPIO_Init+0x5e>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d007      	beq.n	8001eca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ebe:	2b11      	cmp	r3, #17
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b12      	cmp	r3, #18
 8001ec8:	d130      	bne.n	8001f2c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x100>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b12      	cmp	r3, #18
 8001f6a:	d123      	bne.n	8001fb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	08da      	lsrs	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3208      	adds	r2, #8
 8001f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	69b9      	ldr	r1, [r7, #24]
 8001fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0203 	and.w	r2, r3, #3
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80be 	beq.w	8002172 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	4a65      	ldr	r2, [pc, #404]	; (800218c <HAL_GPIO_Init+0x320>)
 8001ff8:	4b64      	ldr	r3, [pc, #400]	; (800218c <HAL_GPIO_Init+0x320>)
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b62      	ldr	r3, [pc, #392]	; (800218c <HAL_GPIO_Init+0x320>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800200e:	4a60      	ldr	r2, [pc, #384]	; (8002190 <HAL_GPIO_Init+0x324>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a57      	ldr	r2, [pc, #348]	; (8002194 <HAL_GPIO_Init+0x328>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d037      	beq.n	80020aa <HAL_GPIO_Init+0x23e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a56      	ldr	r2, [pc, #344]	; (8002198 <HAL_GPIO_Init+0x32c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d031      	beq.n	80020a6 <HAL_GPIO_Init+0x23a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a55      	ldr	r2, [pc, #340]	; (800219c <HAL_GPIO_Init+0x330>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d02b      	beq.n	80020a2 <HAL_GPIO_Init+0x236>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a54      	ldr	r2, [pc, #336]	; (80021a0 <HAL_GPIO_Init+0x334>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d025      	beq.n	800209e <HAL_GPIO_Init+0x232>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a53      	ldr	r2, [pc, #332]	; (80021a4 <HAL_GPIO_Init+0x338>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01f      	beq.n	800209a <HAL_GPIO_Init+0x22e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <HAL_GPIO_Init+0x33c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d019      	beq.n	8002096 <HAL_GPIO_Init+0x22a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a51      	ldr	r2, [pc, #324]	; (80021ac <HAL_GPIO_Init+0x340>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0x226>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a50      	ldr	r2, [pc, #320]	; (80021b0 <HAL_GPIO_Init+0x344>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00d      	beq.n	800208e <HAL_GPIO_Init+0x222>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4f      	ldr	r2, [pc, #316]	; (80021b4 <HAL_GPIO_Init+0x348>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_GPIO_Init+0x21e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4e      	ldr	r2, [pc, #312]	; (80021b8 <HAL_GPIO_Init+0x34c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_GPIO_Init+0x21a>
 8002082:	2309      	movs	r3, #9
 8002084:	e012      	b.n	80020ac <HAL_GPIO_Init+0x240>
 8002086:	230a      	movs	r3, #10
 8002088:	e010      	b.n	80020ac <HAL_GPIO_Init+0x240>
 800208a:	2308      	movs	r3, #8
 800208c:	e00e      	b.n	80020ac <HAL_GPIO_Init+0x240>
 800208e:	2307      	movs	r3, #7
 8002090:	e00c      	b.n	80020ac <HAL_GPIO_Init+0x240>
 8002092:	2306      	movs	r3, #6
 8002094:	e00a      	b.n	80020ac <HAL_GPIO_Init+0x240>
 8002096:	2305      	movs	r3, #5
 8002098:	e008      	b.n	80020ac <HAL_GPIO_Init+0x240>
 800209a:	2304      	movs	r3, #4
 800209c:	e006      	b.n	80020ac <HAL_GPIO_Init+0x240>
 800209e:	2303      	movs	r3, #3
 80020a0:	e004      	b.n	80020ac <HAL_GPIO_Init+0x240>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e002      	b.n	80020ac <HAL_GPIO_Init+0x240>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_GPIO_Init+0x240>
 80020aa:	2300      	movs	r3, #0
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	f002 0203 	and.w	r2, r2, #3
 80020b2:	0092      	lsls	r2, r2, #2
 80020b4:	4093      	lsls	r3, r2
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020bc:	4934      	ldr	r1, [pc, #208]	; (8002190 <HAL_GPIO_Init+0x324>)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	3302      	adds	r3, #2
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ca:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <HAL_GPIO_Init+0x350>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ee:	4a33      	ldr	r2, [pc, #204]	; (80021bc <HAL_GPIO_Init+0x350>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_GPIO_Init+0x350>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002118:	4a28      	ldr	r2, [pc, #160]	; (80021bc <HAL_GPIO_Init+0x350>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211e:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_GPIO_Init+0x350>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002142:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <HAL_GPIO_Init+0x350>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_GPIO_Init+0x350>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800216c:	4a13      	ldr	r2, [pc, #76]	; (80021bc <HAL_GPIO_Init+0x350>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3301      	adds	r3, #1
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b0f      	cmp	r3, #15
 800217c:	f67f ae86 	bls.w	8001e8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002180:	bf00      	nop
 8002182:	3724      	adds	r7, #36	; 0x24
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40023800 	.word	0x40023800
 8002190:	40013800 	.word	0x40013800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40021400 	.word	0x40021400
 80021ac:	40021800 	.word	0x40021800
 80021b0:	40021c00 	.word	0x40021c00
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40022400 	.word	0x40022400
 80021bc:	40013c00 	.word	0x40013c00

080021c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d0:	787b      	ldrb	r3, [r7, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021dc:	e003      	b.n	80021e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021de:	887b      	ldrh	r3, [r7, #2]
 80021e0:	041a      	lsls	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	619a      	str	r2, [r3, #24]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	4a23      	ldr	r2, [pc, #140]	; (800228c <HAL_PWREx_EnableOverDrive+0x98>)
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_PWREx_EnableOverDrive+0x98>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_PWREx_EnableOverDrive+0x98>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002216:	4a1e      	ldr	r2, [pc, #120]	; (8002290 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_PWREx_EnableOverDrive+0x9c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002220:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002222:	f7fe fc0f 	bl	8000a44 <HAL_GetTick>
 8002226:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002228:	e009      	b.n	800223e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800222a:	f7fe fc0b 	bl	8000a44 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002238:	d901      	bls.n	800223e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e022      	b.n	8002284 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224a:	d1ee      	bne.n	800222a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800224c:	4a10      	ldr	r2, [pc, #64]	; (8002290 <HAL_PWREx_EnableOverDrive+0x9c>)
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002256:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002258:	f7fe fbf4 	bl	8000a44 <HAL_GetTick>
 800225c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800225e:	e009      	b.n	8002274 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002260:	f7fe fbf0 	bl	8000a44 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800226e:	d901      	bls.n	8002274 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e007      	b.n	8002284 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002280:	d1ee      	bne.n	8002260 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000

08002294 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800229c:	2300      	movs	r3, #0
 800229e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e291      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8087 	beq.w	80023c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022b8:	4b96      	ldr	r3, [pc, #600]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d00c      	beq.n	80022de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c4:	4b93      	ldr	r3, [pc, #588]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d112      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62>
 80022d0:	4b90      	ldr	r3, [pc, #576]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022dc:	d10b      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022de:	4b8d      	ldr	r3, [pc, #564]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d06c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x130>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d168      	bne.n	80023c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e26b      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x7a>
 8002300:	4a84      	ldr	r2, [pc, #528]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002302:	4b84      	ldr	r3, [pc, #528]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e02e      	b.n	800236c <HAL_RCC_OscConfig+0xd8>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x9c>
 8002316:	4a7f      	ldr	r2, [pc, #508]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002318:	4b7e      	ldr	r3, [pc, #504]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4a7c      	ldr	r2, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002324:	4b7b      	ldr	r3, [pc, #492]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e01d      	b.n	800236c <HAL_RCC_OscConfig+0xd8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0xc0>
 800233a:	4a76      	ldr	r2, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 800233c:	4b75      	ldr	r3, [pc, #468]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4a73      	ldr	r2, [pc, #460]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002348:	4b72      	ldr	r3, [pc, #456]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0xd8>
 8002354:	4a6f      	ldr	r2, [pc, #444]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002356:	4b6f      	ldr	r3, [pc, #444]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4a6c      	ldr	r2, [pc, #432]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002362:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe fb66 	bl	8000a44 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7fe fb62 	bl	8000a44 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e21f      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b61      	ldr	r3, [pc, #388]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0xe8>
 800239a:	e014      	b.n	80023c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7fe fb52 	bl	8000a44 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a4:	f7fe fb4e 	bl	8000a44 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e20b      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	4b57      	ldr	r3, [pc, #348]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x110>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d069      	beq.n	80024a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d2:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023de:	4b4d      	ldr	r3, [pc, #308]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d11c      	bne.n	8002424 <HAL_RCC_OscConfig+0x190>
 80023ea:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d116      	bne.n	8002424 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_RCC_OscConfig+0x17a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e1df      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	4941      	ldr	r1, [pc, #260]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002410:	4b40      	ldr	r3, [pc, #256]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	e040      	b.n	80024a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d023      	beq.n	8002474 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800242c:	4a39      	ldr	r2, [pc, #228]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fb04 	bl	8000a44 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002440:	f7fe fb00 	bl	8000a44 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1bd      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002452:	4b30      	ldr	r3, [pc, #192]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	492d      	ldr	r1, [pc, #180]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002460:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
 8002472:	e018      	b.n	80024a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002474:	4a27      	ldr	r2, [pc, #156]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002476:	4b27      	ldr	r3, [pc, #156]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fae0 	bl	8000a44 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002488:	f7fe fadc 	bl	8000a44 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e199      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249a:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d038      	beq.n	8002524 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d019      	beq.n	80024ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ba:	4a16      	ldr	r2, [pc, #88]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80024be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe fabd 	bl	8000a44 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ce:	f7fe fab9 	bl	8000a44 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e176      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80024e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x23a>
 80024ec:	e01a      	b.n	8002524 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ee:	4a09      	ldr	r2, [pc, #36]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80024f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7fe faa3 	bl	8000a44 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002502:	f7fe fa9f 	bl	8000a44 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d903      	bls.n	8002518 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e15c      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
 8002514:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	4b91      	ldr	r3, [pc, #580]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 800251a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ee      	bne.n	8002502 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80a4 	beq.w	800267a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002532:	4b8b      	ldr	r3, [pc, #556]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10d      	bne.n	800255a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	4a88      	ldr	r2, [pc, #544]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002540:	4b87      	ldr	r3, [pc, #540]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b85      	ldr	r3, [pc, #532]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002556:	2301      	movs	r3, #1
 8002558:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255a:	4b82      	ldr	r3, [pc, #520]	; (8002764 <HAL_RCC_OscConfig+0x4d0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d118      	bne.n	8002598 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002566:	4a7f      	ldr	r2, [pc, #508]	; (8002764 <HAL_RCC_OscConfig+0x4d0>)
 8002568:	4b7e      	ldr	r3, [pc, #504]	; (8002764 <HAL_RCC_OscConfig+0x4d0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002572:	f7fe fa67 	bl	8000a44 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257a:	f7fe fa63 	bl	8000a44 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b64      	cmp	r3, #100	; 0x64
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e120      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258c:	4b75      	ldr	r3, [pc, #468]	; (8002764 <HAL_RCC_OscConfig+0x4d0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x31a>
 80025a0:	4a6f      	ldr	r2, [pc, #444]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80025a2:	4b6f      	ldr	r3, [pc, #444]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6713      	str	r3, [r2, #112]	; 0x70
 80025ac:	e02d      	b.n	800260a <HAL_RCC_OscConfig+0x376>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x33c>
 80025b6:	4a6a      	ldr	r2, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	4b69      	ldr	r3, [pc, #420]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	6713      	str	r3, [r2, #112]	; 0x70
 80025c2:	4a67      	ldr	r2, [pc, #412]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80025c4:	4b66      	ldr	r3, [pc, #408]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	e01c      	b.n	800260a <HAL_RCC_OscConfig+0x376>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d10c      	bne.n	80025f2 <HAL_RCC_OscConfig+0x35e>
 80025d8:	4a61      	ldr	r2, [pc, #388]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80025da:	4b61      	ldr	r3, [pc, #388]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
 80025e4:	4a5e      	ldr	r2, [pc, #376]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80025e6:	4b5e      	ldr	r3, [pc, #376]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
 80025f0:	e00b      	b.n	800260a <HAL_RCC_OscConfig+0x376>
 80025f2:	4a5b      	ldr	r2, [pc, #364]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80025f4:	4b5a      	ldr	r3, [pc, #360]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	4a58      	ldr	r2, [pc, #352]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002600:	4b57      	ldr	r3, [pc, #348]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d015      	beq.n	800263e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7fe fa17 	bl	8000a44 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fe fa13 	bl	8000a44 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e0ce      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	4b4b      	ldr	r3, [pc, #300]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ee      	beq.n	800261a <HAL_RCC_OscConfig+0x386>
 800263c:	e014      	b.n	8002668 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7fe fa01 	bl	8000a44 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe f9fd 	bl	8000a44 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0b8      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	4b40      	ldr	r3, [pc, #256]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ee      	bne.n	8002646 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d105      	bne.n	800267a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266e:	4a3c      	ldr	r2, [pc, #240]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002670:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80a4 	beq.w	80027cc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002684:	4b36      	ldr	r3, [pc, #216]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d06b      	beq.n	8002768 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d149      	bne.n	800272c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002698:	4a31      	ldr	r2, [pc, #196]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 800269a:	4b31      	ldr	r3, [pc, #196]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe f9ce 	bl	8000a44 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe f9ca 	bl	8000a44 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e087      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b28      	ldr	r3, [pc, #160]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ca:	4925      	ldr	r1, [pc, #148]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69da      	ldr	r2, [r3, #28]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	019b      	lsls	r3, r3, #6
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	3b01      	subs	r3, #1
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	061b      	lsls	r3, r3, #24
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f8:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe f99e 	bl	8000a44 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7fe f99a 	bl	8000a44 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e057      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x478>
 800272a:	e04f      	b.n	80027cc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272c:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe f984 	bl	8000a44 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe f980 	bl	8000a44 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e03d      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_RCC_OscConfig+0x4cc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x4ac>
 800275e:	e035      	b.n	80027cc <HAL_RCC_OscConfig+0x538>
 8002760:	40023800 	.word	0x40023800
 8002764:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x544>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d028      	beq.n	80027c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d121      	bne.n	80027c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d11a      	bne.n	80027c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800279e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d111      	bne.n	80027c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	3b01      	subs	r3, #1
 80027b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800

080027dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0d0      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d210      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4967      	ldr	r1, [pc, #412]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	4b66      	ldr	r3, [pc, #408]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 020f 	bic.w	r2, r3, #15
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 020f 	and.w	r2, r3, #15
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0b8      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800283c:	4a59      	ldr	r2, [pc, #356]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002846:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002854:	4a53      	ldr	r2, [pc, #332]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002856:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800285e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002860:	4950      	ldr	r1, [pc, #320]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002862:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d040      	beq.n	8002900 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d115      	bne.n	80028be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e07f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e073      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ae:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e06b      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028be:	4939      	ldr	r1, [pc, #228]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 0203 	bic.w	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d0:	f7fe f8b8 	bl	8000a44 <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d8:	f7fe f8b4 	bl	8000a44 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e053      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 020c 	and.w	r2, r3, #12
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d1eb      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 020f 	and.w	r2, r3, #15
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d910      	bls.n	8002930 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4924      	ldr	r1, [pc, #144]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 020f 	bic.w	r2, r3, #15
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 020f 	and.w	r2, r3, #15
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e032      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800293c:	4919      	ldr	r1, [pc, #100]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800295a:	4912      	ldr	r1, [pc, #72]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800296e:	f000 f821 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8002972:	4601      	mov	r1, r0
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	fa21 f303 	lsr.w	r3, r1, r3
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x1d0>)
 8002988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1d4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe f814 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023c00 	.word	0x40023c00
 80029a4:	40023800 	.word	0x40023800
 80029a8:	08014868 	.word	0x08014868
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000004 	.word	0x20000004

080029b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029b8:	b087      	sub	sp, #28
 80029ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029bc:	2200      	movs	r2, #0
 80029be:	60fa      	str	r2, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	617a      	str	r2, [r7, #20]
 80029c4:	2200      	movs	r2, #0
 80029c6:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 80029c8:	2200      	movs	r2, #0
 80029ca:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029cc:	4a51      	ldr	r2, [pc, #324]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ce:	6892      	ldr	r2, [r2, #8]
 80029d0:	f002 020c 	and.w	r2, r2, #12
 80029d4:	2a04      	cmp	r2, #4
 80029d6:	d007      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x34>
 80029d8:	2a08      	cmp	r2, #8
 80029da:	d008      	beq.n	80029ee <HAL_RCC_GetSysClockFreq+0x3a>
 80029dc:	2a00      	cmp	r2, #0
 80029de:	f040 8090 	bne.w	8002b02 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029e2:	4b4d      	ldr	r3, [pc, #308]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x164>)
 80029e4:	613b      	str	r3, [r7, #16]
      break;
 80029e6:	e08f      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029e8:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x168>)
 80029ea:	613b      	str	r3, [r7, #16]
      break;
 80029ec:	e08c      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ee:	4a49      	ldr	r2, [pc, #292]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f0:	6852      	ldr	r2, [r2, #4]
 80029f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80029f6:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029f8:	4a46      	ldr	r2, [pc, #280]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x160>)
 80029fa:	6852      	ldr	r2, [r2, #4]
 80029fc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	d023      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a04:	4b43      	ldr	r3, [pc, #268]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	f04f 0400 	mov.w	r4, #0
 8002a0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	ea03 0301 	and.w	r3, r3, r1
 8002a1a:	ea04 0402 	and.w	r4, r4, r2
 8002a1e:	4a3f      	ldr	r2, [pc, #252]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x168>)
 8002a20:	fb02 f104 	mul.w	r1, r2, r4
 8002a24:	2200      	movs	r2, #0
 8002a26:	fb02 f203 	mul.w	r2, r2, r3
 8002a2a:	440a      	add	r2, r1
 8002a2c:	493b      	ldr	r1, [pc, #236]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x168>)
 8002a2e:	fba3 0101 	umull	r0, r1, r3, r1
 8002a32:	1853      	adds	r3, r2, r1
 8002a34:	4619      	mov	r1, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4623      	mov	r3, r4
 8002a40:	f7fd fc4e 	bl	80002e0 <__aeabi_uldivmod>
 8002a44:	4603      	mov	r3, r0
 8002a46:	460c      	mov	r4, r1
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e04c      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4c:	4a31      	ldr	r2, [pc, #196]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a4e:	6852      	ldr	r2, [r2, #4]
 8002a50:	0992      	lsrs	r2, r2, #6
 8002a52:	4611      	mov	r1, r2
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002a5c:	f04f 0600 	mov.w	r6, #0
 8002a60:	ea05 0501 	and.w	r5, r5, r1
 8002a64:	ea06 0602 	and.w	r6, r6, r2
 8002a68:	4629      	mov	r1, r5
 8002a6a:	4632      	mov	r2, r6
 8002a6c:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002a70:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002a74:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8002a78:	4651      	mov	r1, sl
 8002a7a:	465a      	mov	r2, fp
 8002a7c:	46aa      	mov	sl, r5
 8002a7e:	46b3      	mov	fp, r6
 8002a80:	4655      	mov	r5, sl
 8002a82:	465e      	mov	r6, fp
 8002a84:	1b4d      	subs	r5, r1, r5
 8002a86:	eb62 0606 	sbc.w	r6, r2, r6
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	4632      	mov	r2, r6
 8002a8e:	0194      	lsls	r4, r2, #6
 8002a90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a94:	018b      	lsls	r3, r1, #6
 8002a96:	1a5b      	subs	r3, r3, r1
 8002a98:	eb64 0402 	sbc.w	r4, r4, r2
 8002a9c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002aa0:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002aa4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002aa8:	4643      	mov	r3, r8
 8002aaa:	464c      	mov	r4, r9
 8002aac:	4655      	mov	r5, sl
 8002aae:	465e      	mov	r6, fp
 8002ab0:	18ed      	adds	r5, r5, r3
 8002ab2:	eb46 0604 	adc.w	r6, r6, r4
 8002ab6:	462b      	mov	r3, r5
 8002ab8:	4634      	mov	r4, r6
 8002aba:	02a2      	lsls	r2, r4, #10
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	029b      	lsls	r3, r3, #10
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f04f 0400 	mov.w	r4, #0
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4623      	mov	r3, r4
 8002adc:	f7fd fc00 	bl	80002e0 <__aeabi_uldivmod>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	460c      	mov	r4, r1
 8002ae4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	3301      	adds	r3, #1
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco / pllp;
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	613b      	str	r3, [r7, #16]
      break;
 8002b00:	e002      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b04:	613b      	str	r3, [r7, #16]
      break;
 8002b06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b08:	693b      	ldr	r3, [r7, #16]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	00f42400 	.word	0x00f42400
 8002b1c:	017d7840 	.word	0x017d7840

08002b20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000000 	.word	0x20000000

08002b38 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002b3e:	f001 fa39 	bl	8003fb4 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8002b42:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <MX_LWIP_Init+0x6c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8002b48:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <MX_LWIP_Init+0x70>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <MX_LWIP_Init+0x74>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002b54:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <MX_LWIP_Init+0x78>)
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <MX_LWIP_Init+0x7c>)
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <MX_LWIP_Init+0x74>)
 8002b62:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <MX_LWIP_Init+0x70>)
 8002b64:	490f      	ldr	r1, [pc, #60]	; (8002ba4 <MX_LWIP_Init+0x6c>)
 8002b66:	4814      	ldr	r0, [pc, #80]	; (8002bb8 <MX_LWIP_Init+0x80>)
 8002b68:	f005 ff1c 	bl	80089a4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002b6c:	4812      	ldr	r0, [pc, #72]	; (8002bb8 <MX_LWIP_Init+0x80>)
 8002b6e:	f006 f8d3 	bl	8008d18 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <MX_LWIP_Init+0x80>)
 8002b74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <MX_LWIP_Init+0x50>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002b80:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <MX_LWIP_Init+0x80>)
 8002b82:	f006 f8d9 	bl	8008d38 <netif_set_up>
 8002b86:	e002      	b.n	8002b8e <MX_LWIP_Init+0x56>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002b88:	480b      	ldr	r0, [pc, #44]	; (8002bb8 <MX_LWIP_Init+0x80>)
 8002b8a:	f006 f941 	bl	8008e10 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8002b8e:	490b      	ldr	r1, [pc, #44]	; (8002bbc <MX_LWIP_Init+0x84>)
 8002b90:	4809      	ldr	r0, [pc, #36]	; (8002bb8 <MX_LWIP_Init+0x80>)
 8002b92:	f006 f96f 	bl	8008e74 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8002b96:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <MX_LWIP_Init+0x80>)
 8002b98:	f001 fda0 	bl	80046dc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200006a0 	.word	0x200006a0
 8002ba8:	200006a4 	.word	0x200006a4
 8002bac:	200006a8 	.word	0x200006a8
 8002bb0:	08010771 	.word	0x08010771
 8002bb4:	08003149 	.word	0x08003149
 8002bb8:	20000668 	.word	0x20000668
 8002bbc:	080031b5 	.word	0x080031b5

08002bc0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8002bc4:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <MX_LWIP_Process+0x14>)
 8002bc6:	f000 fa9f 	bl	8003108 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8002bca:	f00d f8d5 	bl	800fd78 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000668 	.word	0x20000668

08002bd8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08e      	sub	sp, #56	; 0x38
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a3f      	ldr	r2, [pc, #252]	; (8002cf4 <HAL_ETH_MspInit+0x11c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d178      	bne.n	8002cec <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002bfa:	4a3f      	ldr	r2, [pc, #252]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002bfc:	4b3e      	ldr	r3, [pc, #248]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	623b      	str	r3, [r7, #32]
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	4a39      	ldr	r2, [pc, #228]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c14:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	4a33      	ldr	r2, [pc, #204]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c34:	6313      	str	r3, [r2, #48]	; 0x30
 8002c36:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c42:	4a2d      	ldr	r2, [pc, #180]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c44:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	f043 0304 	orr.w	r3, r3, #4
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5a:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c5c:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c72:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c74:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <HAL_ETH_MspInit+0x120>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002c8a:	2332      	movs	r3, #50	; 0x32
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c96:	2303      	movs	r3, #3
 8002c98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c9a:	230b      	movs	r3, #11
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4815      	ldr	r0, [pc, #84]	; (8002cfc <HAL_ETH_MspInit+0x124>)
 8002ca6:	f7ff f8e1 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002caa:	2386      	movs	r3, #134	; 0x86
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cba:	230b      	movs	r3, #11
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	480e      	ldr	r0, [pc, #56]	; (8002d00 <HAL_ETH_MspInit+0x128>)
 8002cc6:	f7ff f8d1 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002cca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cdc:	230b      	movs	r3, #11
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4807      	ldr	r0, [pc, #28]	; (8002d04 <HAL_ETH_MspInit+0x12c>)
 8002ce8:	f7ff f8c0 	bl	8001e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002cec:	bf00      	nop
 8002cee:	3738      	adds	r7, #56	; 0x38
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40028000 	.word	0x40028000
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40020800 	.word	0x40020800
 8002d00:	40020000 	.word	0x40020000
 8002d04:	40020400 	.word	0x40020400

08002d08 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002d14:	4b4d      	ldr	r3, [pc, #308]	; (8002e4c <low_level_init+0x144>)
 8002d16:	4a4e      	ldr	r2, [pc, #312]	; (8002e50 <low_level_init+0x148>)
 8002d18:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002d1a:	4b4c      	ldr	r3, [pc, #304]	; (8002e4c <low_level_init+0x144>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8002d20:	4b4a      	ldr	r3, [pc, #296]	; (8002e4c <low_level_init+0x144>)
 8002d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d26:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8002d28:	4b48      	ldr	r3, [pc, #288]	; (8002e4c <low_level_init+0x144>)
 8002d2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d2e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002d30:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <low_level_init+0x144>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8002d36:	2300      	movs	r3, #0
 8002d38:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002d3e:	23e1      	movs	r3, #225	; 0xe1
 8002d40:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002d42:	2300      	movs	r3, #0
 8002d44:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002d46:	2300      	movs	r3, #0
 8002d48:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002d4e:	4a3f      	ldr	r2, [pc, #252]	; (8002e4c <low_level_init+0x144>)
 8002d50:	f107 0308 	add.w	r3, r7, #8
 8002d54:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002d56:	4b3d      	ldr	r3, [pc, #244]	; (8002e4c <low_level_init+0x144>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002d5c:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <low_level_init+0x144>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002d62:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <low_level_init+0x144>)
 8002d64:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002d68:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002d6a:	4838      	ldr	r0, [pc, #224]	; (8002e4c <low_level_init+0x144>)
 8002d6c:	f7fd ff7c 	bl	8000c68 <HAL_ETH_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d108      	bne.n	8002d8c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	4a31      	ldr	r2, [pc, #196]	; (8002e54 <low_level_init+0x14c>)
 8002d90:	4931      	ldr	r1, [pc, #196]	; (8002e58 <low_level_init+0x150>)
 8002d92:	482e      	ldr	r0, [pc, #184]	; (8002e4c <low_level_init+0x144>)
 8002d94:	f7fe f904 	bl	8000fa0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002d98:	2304      	movs	r3, #4
 8002d9a:	4a30      	ldr	r2, [pc, #192]	; (8002e5c <low_level_init+0x154>)
 8002d9c:	4930      	ldr	r1, [pc, #192]	; (8002e60 <low_level_init+0x158>)
 8002d9e:	482b      	ldr	r0, [pc, #172]	; (8002e4c <low_level_init+0x144>)
 8002da0:	f7fe f967 	bl	8001072 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2206      	movs	r2, #6
 8002da8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002dac:	4b27      	ldr	r3, [pc, #156]	; (8002e4c <low_level_init+0x144>)
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002db8:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <low_level_init+0x144>)
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	785a      	ldrb	r2, [r3, #1]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002dc4:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <low_level_init+0x144>)
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	789a      	ldrb	r2, [r3, #2]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <low_level_init+0x144>)
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	78da      	ldrb	r2, [r3, #3]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <low_level_init+0x144>)
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	791a      	ldrb	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002de8:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <low_level_init+0x144>)
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	795a      	ldrb	r2, [r3, #5]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002dfa:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e02:	f043 030a 	orr.w	r3, r3, #10
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8002e0e:	480f      	ldr	r0, [pc, #60]	; (8002e4c <low_level_init+0x144>)
 8002e10:	f7fe fbd8 	bl	80015c4 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8002e14:	f107 0310 	add.w	r3, r7, #16
 8002e18:	461a      	mov	r2, r3
 8002e1a:	211d      	movs	r1, #29
 8002e1c:	480b      	ldr	r0, [pc, #44]	; (8002e4c <low_level_init+0x144>)
 8002e1e:	f7fe fb03 	bl	8001428 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f043 030b 	orr.w	r3, r3, #11
 8002e28:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	211d      	movs	r1, #29
 8002e30:	4806      	ldr	r0, [pc, #24]	; (8002e4c <low_level_init+0x144>)
 8002e32:	f7fe fb61 	bl	80014f8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8002e36:	f107 0310 	add.w	r3, r7, #16
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	211d      	movs	r1, #29
 8002e3e:	4803      	ldr	r0, [pc, #12]	; (8002e4c <low_level_init+0x144>)
 8002e40:	f7fe faf2 	bl	8001428 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8002e44:	bf00      	nop
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20001f7c 	.word	0x20001f7c
 8002e50:	40028000 	.word	0x40028000
 8002e54:	20001fc4 	.word	0x20001fc4
 8002e58:	200006ac 	.word	0x200006ac
 8002e5c:	2000072c 	.word	0x2000072c
 8002e60:	20001efc 	.word	0x20001efc

08002e64 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8002e6e:	4b4b      	ldr	r3, [pc, #300]	; (8002f9c <low_level_output+0x138>)
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8002e86:	4b45      	ldr	r3, [pc, #276]	; (8002f9c <low_level_output+0x138>)
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	623b      	str	r3, [r7, #32]
 8002e94:	e05a      	b.n	8002f4c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	da03      	bge.n	8002ea6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8002e9e:	23f8      	movs	r3, #248	; 0xf8
 8002ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8002ea4:	e05c      	b.n	8002f60 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	895b      	ldrh	r3, [r3, #10]
 8002eaa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002eb0:	e02f      	b.n	8002f12 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	18d0      	adds	r0, r2, r3
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	18d1      	adds	r1, r2, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f00d fd84 	bl	80109d6 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	da03      	bge.n	8002ee4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8002edc:	23f8      	movs	r3, #248	; 0xf8
 8002ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8002ee2:	e03d      	b.n	8002f60 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8002ef4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002f00:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002f0c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d8c8      	bhi.n	8002eb2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	18d0      	adds	r0, r2, r3
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4619      	mov	r1, r3
 8002f32:	f00d fd50 	bl	80109d6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4413      	add	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1a1      	bne.n	8002e96 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8002f52:	6979      	ldr	r1, [r7, #20]
 8002f54:	4811      	ldr	r0, [pc, #68]	; (8002f9c <low_level_output+0x138>)
 8002f56:	f7fe f8f9 	bl	800114c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <low_level_output+0x138>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	f241 0314 	movw	r3, #4116	; 0x1014
 8002f68:	4413      	add	r3, r2
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00d      	beq.n	8002f90 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <low_level_output+0x138>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	f241 0314 	movw	r3, #4116	; 0x1014
 8002f7c:	4413      	add	r3, r2
 8002f7e:	2220      	movs	r2, #32
 8002f80:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <low_level_output+0x138>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	f241 0304 	movw	r3, #4100	; 0x1004
 8002f8a:	4413      	add	r3, r2
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8002f90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3728      	adds	r7, #40	; 0x28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20001f7c 	.word	0x20001f7c

08002fa0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08c      	sub	sp, #48	; 0x30
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8002fc4:	484f      	ldr	r0, [pc, #316]	; (8003104 <low_level_input+0x164>)
 8002fc6:	f7fe f9ab 	bl	8001320 <HAL_ETH_GetReceivedFrame>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <low_level_input+0x34>

    return NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e092      	b.n	80030fa <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8002fd4:	4b4b      	ldr	r3, [pc, #300]	; (8003104 <low_level_input+0x164>)
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8002fda:	4b4a      	ldr	r3, [pc, #296]	; (8003104 <low_level_input+0x164>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8002fe0:	89fb      	ldrh	r3, [r7, #14]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8002fe6:	89fb      	ldrh	r3, [r7, #14]
 8002fe8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002fec:	4619      	mov	r1, r3
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f005 ffdc 	bl	8008fac <pbuf_alloc>
 8002ff4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d04b      	beq.n	8003094 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8002ffc:	4b41      	ldr	r3, [pc, #260]	; (8003104 <low_level_input+0x164>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
 800300a:	e040      	b.n	800308e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	895b      	ldrh	r3, [r3, #10]
 8003010:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003016:	e021      	b.n	800305c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	18d0      	adds	r0, r2, r3
 8003020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	18d1      	adds	r1, r2, r3
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	461a      	mov	r2, r3
 8003030:	f00d fcd1 	bl	80109d6 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	4413      	add	r3, r2
 8003046:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800304a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003056:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	4413      	add	r3, r2
 8003062:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003066:	4293      	cmp	r3, r2
 8003068:	d8d6      	bhi.n	8003018 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	18d0      	adds	r0, r2, r3
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	4413      	add	r3, r2
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4619      	mov	r1, r3
 800307c:	f00d fcab 	bl	80109d6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003080:	69fa      	ldr	r2, [r7, #28]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	4413      	add	r3, r2
 8003086:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1bb      	bne.n	800300c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <low_level_input+0x164>)
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	e00b      	b.n	80030b8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	3301      	adds	r3, #1
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <low_level_input+0x164>)
 80030ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d8ee      	bhi.n	80030a0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <low_level_input+0x164>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <low_level_input+0x164>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	f241 0314 	movw	r3, #4116	; 0x1014
 80030d0:	4413      	add	r3, r2
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00d      	beq.n	80030f8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <low_level_input+0x164>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	f241 0314 	movw	r3, #4116	; 0x1014
 80030e4:	4413      	add	r3, r2
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <low_level_input+0x164>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	f241 0308 	movw	r3, #4104	; 0x1008
 80030f2:	4413      	add	r3, r2
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3730      	adds	r7, #48	; 0x30
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20001f7c 	.word	0x20001f7c

08003108 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ff45 	bl	8002fa0 <low_level_input>
 8003116:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d010      	beq.n	8003140 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	4798      	blx	r3
 8003128:	4603      	mov	r3, r0
 800312a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800312c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d006      	beq.n	8003142 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f006 fa1b 	bl	8009570 <pbuf_free>
    p = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	e000      	b.n	8003142 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003140:	bf00      	nop
  }
}
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <ethernetif_init+0x1c>
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <ethernetif_init+0x48>)
 8003158:	f240 2207 	movw	r2, #519	; 0x207
 800315c:	490d      	ldr	r1, [pc, #52]	; (8003194 <ethernetif_init+0x4c>)
 800315e:	480e      	ldr	r0, [pc, #56]	; (8003198 <ethernetif_init+0x50>)
 8003160:	f00d fc4c 	bl	80109fc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2273      	movs	r2, #115	; 0x73
 8003168:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2274      	movs	r2, #116	; 0x74
 8003170:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a09      	ldr	r2, [pc, #36]	; (800319c <ethernetif_init+0x54>)
 8003178:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a08      	ldr	r2, [pc, #32]	; (80031a0 <ethernetif_init+0x58>)
 800317e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff fdc1 	bl	8002d08 <low_level_init>

  return ERR_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	080118c8 	.word	0x080118c8
 8003194:	080118e4 	.word	0x080118e4
 8003198:	080118f4 	.word	0x080118f4
 800319c:	0800652d 	.word	0x0800652d
 80031a0:	08002e65 	.word	0x08002e65

080031a4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80031a8:	f7fd fc4c 	bl	8000a44 <HAL_GetTick>
 80031ac:	4603      	mov	r3, r0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d05b      	beq.n	800328a <ethernetif_update_config+0xd6>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80031d2:	4b33      	ldr	r3, [pc, #204]	; (80032a0 <ethernetif_update_config+0xec>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d040      	beq.n	800325c <ethernetif_update_config+0xa8>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80031da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031de:	2100      	movs	r1, #0
 80031e0:	482f      	ldr	r0, [pc, #188]	; (80032a0 <ethernetif_update_config+0xec>)
 80031e2:	f7fe f989 	bl	80014f8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80031e6:	f7fd fc2d 	bl	8000a44 <HAL_GetTick>
 80031ea:	4603      	mov	r3, r0
 80031ec:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80031ee:	f107 0308 	add.w	r3, r7, #8
 80031f2:	461a      	mov	r2, r3
 80031f4:	2101      	movs	r1, #1
 80031f6:	482a      	ldr	r0, [pc, #168]	; (80032a0 <ethernetif_update_config+0xec>)
 80031f8:	f7fe f916 	bl	8001428 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80031fc:	f7fd fc22 	bl	8000a44 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800320a:	d826      	bhi.n	800325a <ethernetif_update_config+0xa6>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0eb      	beq.n	80031ee <ethernetif_update_config+0x3a>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003216:	f107 0308 	add.w	r3, r7, #8
 800321a:	461a      	mov	r2, r3
 800321c:	211f      	movs	r1, #31
 800321e:	4820      	ldr	r0, [pc, #128]	; (80032a0 <ethernetif_update_config+0xec>)
 8003220:	f7fe f902 	bl	8001428 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <ethernetif_update_config+0x84>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <ethernetif_update_config+0xec>)
 8003230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	e002      	b.n	800323e <ethernetif_update_config+0x8a>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <ethernetif_update_config+0xec>)
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <ethernetif_update_config+0x9c>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <ethernetif_update_config+0xec>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	e014      	b.n	800327a <ethernetif_update_config+0xc6>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <ethernetif_update_config+0xec>)
 8003252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	e00f      	b.n	800327a <ethernetif_update_config+0xc6>
          goto error;
 800325a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <ethernetif_update_config+0xec>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	08db      	lsrs	r3, r3, #3
 8003262:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <ethernetif_update_config+0xec>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800326c:	4313      	orrs	r3, r2
 800326e:	b29b      	uxth	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	2100      	movs	r1, #0
 8003274:	480a      	ldr	r0, [pc, #40]	; (80032a0 <ethernetif_update_config+0xec>)
 8003276:	f7fe f93f 	bl	80014f8 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800327a:	2100      	movs	r1, #0
 800327c:	4808      	ldr	r0, [pc, #32]	; (80032a0 <ethernetif_update_config+0xec>)
 800327e:	f7fe f9ff 	bl	8001680 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003282:	4807      	ldr	r0, [pc, #28]	; (80032a0 <ethernetif_update_config+0xec>)
 8003284:	f7fe f99e 	bl	80015c4 <HAL_ETH_Start>
 8003288:	e002      	b.n	8003290 <ethernetif_update_config+0xdc>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800328a:	4805      	ldr	r0, [pc, #20]	; (80032a0 <ethernetif_update_config+0xec>)
 800328c:	f7fe f9c9 	bl	8001622 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f807 	bl	80032a4 <ethernetif_notify_conn_changed>
}
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20001f7c 	.word	0x20001f7c

080032a4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <fs_open+0x16>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <fs_open+0x1c>
    return ERR_ARG;
 80032ce:	f06f 030f 	mvn.w	r3, #15
 80032d2:	e028      	b.n	8003326 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80032d4:	4b16      	ldr	r3, [pc, #88]	; (8003330 <fs_open+0x78>)
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e020      	b.n	800331c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4619      	mov	r1, r3
 80032e0:	6838      	ldr	r0, [r7, #0]
 80032e2:	f7fc ff95 	bl	8000210 <strcmp>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d114      	bne.n	8003316 <fs_open+0x5e>
      file->data = (const char *)f->data;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	7c1a      	ldrb	r2, [r3, #16]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e007      	b.n	8003326 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1db      	bne.n	80032da <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8003322:	f06f 0305 	mvn.w	r3, #5
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	08014a70 	.word	0x08014a70

08003334 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	1ad3      	subs	r3, r2, r3
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800336e:	222c      	movs	r2, #44	; 0x2c
 8003370:	2100      	movs	r1, #0
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f00d fb3a 	bl	80109ec <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003386:	202c      	movs	r0, #44	; 0x2c
 8003388:	f005 f920 	bl	80085cc <mem_malloc>
 800338c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <http_state_alloc+0x1a>
    http_state_init(ret);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ffe6 	bl	8003366 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800339a:	687b      	ldr	r3, [r7, #4]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ffbb 	bl	8003334 <fs_close>
    hs->handle = NULL;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <http_state_eof+0x38>
    pbuf_free(hs->req);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f006 f8cd 	bl	8009570 <pbuf_free>
    hs->req = NULL;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <http_state_free+0x1a>
    http_state_eof(hs);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ffd6 	bl	80033a4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f004 ff81 	bl	8008300 <mem_free>
  }
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d106      	bne.n	800342a <http_write+0x22>
 800341c:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <http_write+0xc8>)
 800341e:	f240 2219 	movw	r2, #537	; 0x219
 8003422:	492c      	ldr	r1, [pc, #176]	; (80034d4 <http_write+0xcc>)
 8003424:	482c      	ldr	r0, [pc, #176]	; (80034d8 <http_write+0xd0>)
 8003426:	f00d fae9 	bl	80109fc <iprintf>
  len = *length;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8003430:	8afb      	ldrh	r3, [r7, #22]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <http_write+0x32>
    return ERR_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e045      	b.n	80034c6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003440:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8003442:	8aba      	ldrh	r2, [r7, #20]
 8003444:	8afb      	ldrh	r3, [r7, #22]
 8003446:	429a      	cmp	r2, r3
 8003448:	d201      	bcs.n	800344e <http_write+0x46>
    len = max_len;
 800344a:	8abb      	ldrh	r3, [r7, #20]
 800344c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8003456:	8afa      	ldrh	r2, [r7, #22]
 8003458:	8abb      	ldrh	r3, [r7, #20]
 800345a:	429a      	cmp	r2, r3
 800345c:	d901      	bls.n	8003462 <http_write+0x5a>
    len = max_len;
 800345e:	8abb      	ldrh	r3, [r7, #20]
 8003460:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	8afa      	ldrh	r2, [r7, #22]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f00a fe0b 	bl	800e084 <tcp_write>
 800346e:	4603      	mov	r3, r0
 8003470:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8003472:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d10f      	bne.n	800349c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800348c:	2b08      	cmp	r3, #8
 800348e:	d902      	bls.n	8003496 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8003490:	2301      	movs	r3, #1
 8003492:	82fb      	strh	r3, [r7, #22]
 8003494:	e002      	b.n	800349c <http_write+0x94>
      } else {
        len /= 2;
 8003496:	8afb      	ldrh	r3, [r7, #22]
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800349c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d102      	bne.n	80034ac <http_write+0xa4>
 80034a6:	8afb      	ldrh	r3, [r7, #22]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d8da      	bhi.n	8003462 <http_write+0x5a>

  if (err == ERR_OK) {
 80034ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8afa      	ldrh	r2, [r7, #22]
 80034b8:	801a      	strh	r2, [r3, #0]
 80034ba:	e002      	b.n	80034c2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 80034c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	0801195c 	.word	0x0801195c
 80034d4:	08011994 	.word	0x08011994
 80034d8:	080119a4 	.word	0x080119a4

080034dc <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 80034ea:	2100      	movs	r1, #0
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f007 fe8b 	bl	800b208 <tcp_arg>
  altcp_recv(pcb, NULL);
 80034f2:	2100      	movs	r1, #0
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f007 fe99 	bl	800b22c <tcp_recv>
  altcp_err(pcb, NULL);
 80034fa:	2100      	movs	r1, #0
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f007 fed9 	bl	800b2b4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	2100      	movs	r1, #0
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f007 ff0e 	bl	800b328 <tcp_poll>
  altcp_sent(pcb, NULL);
 800350c:	2100      	movs	r1, #0
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f007 feae 	bl	800b270 <tcp_sent>
  if (hs != NULL) {
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800351a:	68b8      	ldr	r0, [r7, #8]
 800351c:	f7ff ff62 	bl	80033e4 <http_state_free>
  }

  if (abort_conn) {
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f006 fdb2 	bl	800a090 <tcp_abort>
    return ERR_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	e00f      	b.n	8003550 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f006 fcc3 	bl	8009ebc <tcp_close>
 8003536:	4603      	mov	r3, r0
 8003538:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800353a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d004      	beq.n	800354c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003542:	2204      	movs	r2, #4
 8003544:	4904      	ldr	r1, [pc, #16]	; (8003558 <http_close_or_abort_conn+0x7c>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f007 feee 	bl	800b328 <tcp_poll>
  }
  return err;
 800354c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	08003c1f 	.word	0x08003c1f

0800355c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffb6 	bl	80034dc <http_close_or_abort_conn>
 8003570:	4603      	mov	r3, r0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003584:	6839      	ldr	r1, [r7, #0]
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffe8 	bl	800355c <http_close_conn>
  }
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d105      	bne.n	80035b2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80035a6:	6839      	ldr	r1, [r7, #0]
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff ffe6 	bl	800357a <http_eof>
    return 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e016      	b.n	80035e0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fec6 	bl	8003348 <fs_bytes_left>
 80035bc:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	dc05      	bgt.n	80035d0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80035c4:	6839      	ldr	r1, [r7, #0]
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ffd7 	bl	800357a <http_eof>
    return 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e007      	b.n	80035e0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <http_check_eof+0x54>)
 80035d2:	f240 429d 	movw	r2, #1181	; 0x49d
 80035d6:	4905      	ldr	r1, [pc, #20]	; (80035ec <http_check_eof+0x58>)
 80035d8:	4805      	ldr	r0, [pc, #20]	; (80035f0 <http_check_eof+0x5c>)
 80035da:	f00d fa0f 	bl	80109fc <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	0801195c 	.word	0x0801195c
 80035ec:	080119cc 	.word	0x080119cc
 80035f0:	080119a4 	.word	0x080119a4

080035f4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800360a:	4293      	cmp	r3, r2
 800360c:	d803      	bhi.n	8003616 <http_send_data_nonssi+0x22>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	b29b      	uxth	r3, r3
 8003614:	e001      	b.n	800361a <http_send_data_nonssi+0x26>
 8003616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800361a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6999      	ldr	r1, [r3, #24]
 8003620:	f107 020c 	add.w	r2, r7, #12
 8003624:	2300      	movs	r3, #0
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff feee 	bl	8003408 <http_write>
 800362c:	4603      	mov	r3, r0
 800362e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8003630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10d      	bne.n	8003654 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	89ba      	ldrh	r2, [r7, #12]
 8003642:	441a      	add	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	89ba      	ldrh	r2, [r7, #12]
 800364e:	1a9a      	subs	r2, r3, r2
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8003668:	2300      	movs	r3, #0
 800366a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <http_send+0x18>
    return 0;
 8003672:	2300      	movs	r3, #0
 8003674:	e025      	b.n	80036c2 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b00      	cmp	r3, #0
 800367c:	d108      	bne.n	8003690 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800367e:	6839      	ldr	r1, [r7, #0]
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ff87 	bl	8003594 <http_check_eof>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <http_send+0x32>
      return 0;
 800368c:	2300      	movs	r3, #0
 800368e:	e018      	b.n	80036c2 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8003690:	6839      	ldr	r1, [r7, #0]
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ffae 	bl	80035f4 <http_send_data_nonssi>
 8003698:	4603      	mov	r3, r0
 800369a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10d      	bne.n	80036c0 <http_send+0x62>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fe4d 	bl	8003348 <fs_bytes_left>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	dc05      	bgt.n	80036c0 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80036b4:	6839      	ldr	r1, [r7, #0]
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ff5f 	bl	800357a <http_eof>
    return 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	e000      	b.n	80036c2 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	4a1c      	ldr	r2, [pc, #112]	; (800374c <http_get_404_file+0x80>)
 80036da:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7ff fde7 	bl	80032b8 <fs_open>
 80036ea:	4603      	mov	r3, r0
 80036ec:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80036ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d024      	beq.n	8003740 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	4a15      	ldr	r2, [pc, #84]	; (8003750 <http_get_404_file+0x84>)
 80036fa:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f7ff fdd7 	bl	80032b8 <fs_open>
 800370a:	4603      	mov	r3, r0
 800370c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800370e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d014      	beq.n	8003740 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	4a0e      	ldr	r2, [pc, #56]	; (8003754 <http_get_404_file+0x88>)
 800371a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4619      	mov	r1, r3
 8003724:	4610      	mov	r0, r2
 8003726:	f7ff fdc7 	bl	80032b8 <fs_open>
 800372a:	4603      	mov	r3, r0
 800372c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800372e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
        return NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8003740:	687b      	ldr	r3, [r7, #4]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	08011a04 	.word	0x08011a04
 8003750:	08011a10 	.word	0x08011a10
 8003754:	08011a1c 	.word	0x08011a1c

08003758 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	; 0x38
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <http_parse_request+0x24>
 800376e:	4b65      	ldr	r3, [pc, #404]	; (8003904 <http_parse_request+0x1ac>)
 8003770:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8003774:	4964      	ldr	r1, [pc, #400]	; (8003908 <http_parse_request+0x1b0>)
 8003776:	4865      	ldr	r0, [pc, #404]	; (800390c <http_parse_request+0x1b4>)
 8003778:	f00d f940 	bl	80109fc <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <http_parse_request+0x38>
 8003782:	4b60      	ldr	r3, [pc, #384]	; (8003904 <http_parse_request+0x1ac>)
 8003784:	f240 72af 	movw	r2, #1967	; 0x7af
 8003788:	4961      	ldr	r1, [pc, #388]	; (8003910 <http_parse_request+0x1b8>)
 800378a:	4860      	ldr	r0, [pc, #384]	; (800390c <http_parse_request+0x1b4>)
 800378c:	f00d f936 	bl	80109fc <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <http_parse_request+0x48>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80037a0:	f06f 0307 	mvn.w	r3, #7
 80037a4:	e0aa      	b.n	80038fc <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b2:	621a      	str	r2, [r3, #32]
 80037b4:	e005      	b.n	80037c2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037bc:	4618      	mov	r0, r3
 80037be:	f005 ff99 	bl	80096f4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80037c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037c4:	f005 ff74 	bl	80096b0 <pbuf_ref>

  if (hs->req->next != NULL) {
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d012      	beq.n	80037f8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	891b      	ldrh	r3, [r3, #8]
 80037d8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80037dc:	4293      	cmp	r3, r2
 80037de:	bf28      	it	cs
 80037e0:	4613      	movcs	r3, r2
 80037e2:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	6a18      	ldr	r0, [r3, #32]
 80037e8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80037ea:	2300      	movs	r3, #0
 80037ec:	4949      	ldr	r1, [pc, #292]	; (8003914 <http_parse_request+0x1bc>)
 80037ee:	f006 f8b9 	bl	8009964 <pbuf_copy_partial>
    data = httpd_req_buf;
 80037f2:	4b48      	ldr	r3, [pc, #288]	; (8003914 <http_parse_request+0x1bc>)
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
 80037f6:	e005      	b.n	8003804 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	895b      	ldrh	r3, [r3, #10]
 8003802:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8003804:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003806:	2b06      	cmp	r3, #6
 8003808:	d963      	bls.n	80038d2 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800380a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800380c:	461a      	mov	r2, r3
 800380e:	4942      	ldr	r1, [pc, #264]	; (8003918 <http_parse_request+0x1c0>)
 8003810:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003812:	f000 fb99 	bl	8003f48 <lwip_strnstr>
 8003816:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d059      	beq.n	80038d2 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8003822:	2204      	movs	r2, #4
 8003824:	493d      	ldr	r1, [pc, #244]	; (800391c <http_parse_request+0x1c4>)
 8003826:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003828:	f00d f948 	bl	8010abc <strncmp>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d117      	bne.n	8003862 <http_parse_request+0x10a>
        sp1 = data + 3;
 8003832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003834:	3303      	adds	r3, #3
 8003836:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	3301      	adds	r3, #1
 800383c:	461a      	mov	r2, r3
 800383e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	b29b      	uxth	r3, r3
 8003844:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3301      	adds	r3, #1
 800384e:	8b7a      	ldrh	r2, [r7, #26]
 8003850:	4933      	ldr	r1, [pc, #204]	; (8003920 <http_parse_request+0x1c8>)
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fb78 	bl	8003f48 <lwip_strnstr>
 8003858:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	d111      	bne.n	8003884 <http_parse_request+0x12c>
 8003860:	e006      	b.n	8003870 <http_parse_request+0x118>
        data[4] = 0;
 8003862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003864:	3304      	adds	r3, #4
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800386a:	f06f 030f 	mvn.w	r3, #15
 800386e:	e045      	b.n	80038fc <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	3301      	adds	r3, #1
 8003874:	8b7a      	ldrh	r2, [r7, #26]
 8003876:	4928      	ldr	r1, [pc, #160]	; (8003918 <http_parse_request+0x1c0>)
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fb65 	bl	8003f48 <lwip_strnstr>
 800387e:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8003880:	2301      	movs	r3, #1
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	3201      	adds	r2, #1
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01e      	beq.n	80038d2 <http_parse_request+0x17a>
 8003894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	429a      	cmp	r2, r3
 800389a:	d91a      	bls.n	80038d2 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800389c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800389e:	461a      	mov	r2, r3
 80038a0:	4920      	ldr	r1, [pc, #128]	; (8003924 <http_parse_request+0x1cc>)
 80038a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038a4:	f000 fb50 	bl	8003f48 <lwip_strnstr>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d011      	beq.n	80038d2 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3301      	adds	r3, #1
 80038b2:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80038ba:	8b3b      	ldrh	r3, [r7, #24]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4413      	add	r3, r2
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80038c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c6:	6979      	ldr	r1, [r7, #20]
 80038c8:	68b8      	ldr	r0, [r7, #8]
 80038ca:	f000 f82d 	bl	8003928 <http_find_file>
 80038ce:	4603      	mov	r3, r0
 80038d0:	e014      	b.n	80038fc <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f005 fed2 	bl	8009680 <pbuf_clen>
 80038dc:	4603      	mov	r3, r0
 80038de:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	891b      	ldrh	r3, [r3, #8]
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ea:	d205      	bcs.n	80038f8 <http_parse_request+0x1a0>
 80038ec:	8a7b      	ldrh	r3, [r7, #18]
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d802      	bhi.n	80038f8 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80038f2:	f06f 0304 	mvn.w	r3, #4
 80038f6:	e001      	b.n	80038fc <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80038f8:	f06f 030f 	mvn.w	r3, #15
  }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3738      	adds	r7, #56	; 0x38
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	0801195c 	.word	0x0801195c
 8003908:	08011a28 	.word	0x08011a28
 800390c:	080119a4 	.word	0x080119a4
 8003910:	08011a34 	.word	0x08011a34
 8003914:	200000a0 	.word	0x200000a0
 8003918:	08011a40 	.word	0x08011a40
 800391c:	08011a44 	.word	0x08011a44
 8003920:	08011a4c 	.word	0x08011a4c
 8003924:	08011a50 	.word	0x08011a50

08003928 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b092      	sub	sp, #72	; 0x48
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8003934:	2300      	movs	r3, #0
 8003936:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8003938:	2300      	movs	r3, #0
 800393a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fc6d 	bl	8000224 <strlen>
 800394a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	2b00      	cmp	r3, #0
 8003950:	d06b      	beq.n	8003a2a <http_find_file+0x102>
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	3b01      	subs	r3, #1
 8003958:	4413      	add	r3, r2
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b2f      	cmp	r3, #47	; 0x2f
 800395e:	d164      	bne.n	8003a2a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8003960:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8003962:	4a53      	ldr	r2, [pc, #332]	; (8003ab0 <http_find_file+0x188>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d102      	bne.n	800396e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	2b01      	cmp	r3, #1
 800396c:	d15d      	bne.n	8003a2a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	2b3f      	cmp	r3, #63	; 0x3f
 8003974:	bf28      	it	cs
 8003976:	233f      	movcs	r3, #63	; 0x3f
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003984:	4619      	mov	r1, r3
 8003986:	484a      	ldr	r0, [pc, #296]	; (8003ab0 <http_find_file+0x188>)
 8003988:	f00d f825 	bl	80109d6 <memcpy>
      http_uri_buf[copy_len] = 0;
 800398c:	4a48      	ldr	r2, [pc, #288]	; (8003ab0 <http_find_file+0x188>)
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	4413      	add	r3, r2
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8003996:	2300      	movs	r3, #0
 8003998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800399a:	e043      	b.n	8003a24 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d028      	beq.n	80039f4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80039a8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01e      	beq.n	80039ee <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80039b0:	4a40      	ldr	r2, [pc, #256]	; (8003ab4 <http_find_file+0x18c>)
 80039b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fc fc33 	bl	8000224 <strlen>
 80039be:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80039c0:	69fa      	ldr	r2, [r7, #28]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	4293      	cmp	r3, r2
 80039c6:	bf28      	it	cs
 80039c8:	4613      	movcs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	4a38      	ldr	r2, [pc, #224]	; (8003ab0 <http_find_file+0x188>)
 80039d0:	1898      	adds	r0, r3, r2
 80039d2:	4a38      	ldr	r2, [pc, #224]	; (8003ab4 <http_find_file+0x18c>)
 80039d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4619      	mov	r1, r3
 80039de:	f00c fffa 	bl	80109d6 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80039e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	4413      	add	r3, r2
 80039e8:	4a31      	ldr	r2, [pc, #196]	; (8003ab0 <http_find_file+0x188>)
 80039ea:	2100      	movs	r1, #0
 80039ec:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80039ee:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <http_find_file+0x188>)
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
 80039f2:	e004      	b.n	80039fe <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80039f4:	4a2f      	ldr	r2, [pc, #188]	; (8003ab4 <http_find_file+0x18c>)
 80039f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039fc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fc58 	bl	80032b8 <fs_open>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8003a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d104      	bne.n	8003a1e <http_find_file+0xf6>
        uri = file_name;
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8003a1c:	e005      	b.n	8003a2a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8003a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a20:	3301      	adds	r3, #1
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d9b8      	bls.n	800399c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d124      	bne.n	8003a7a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	213f      	movs	r1, #63	; 0x3f
 8003a34:	4618      	mov	r0, r3
 8003a36:	f00d f833 	bl	8010aa0 <strchr>
 8003a3a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8003a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
      params++;
 8003a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fc2f 	bl	80032b8 <fs_open>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8003a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <http_find_file+0x144>
      file = &hs->file_handle;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a6a:	e006      	b.n	8003a7a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8003a6c:	f107 0308 	add.w	r3, r7, #8
 8003a70:	4619      	mov	r1, r3
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f7ff fe2a 	bl	80036cc <http_get_404_file>
 8003a78:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8003a80:	f107 0308 	add.w	r3, r7, #8
 8003a84:	4619      	mov	r1, r3
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f7ff fe20 	bl	80036cc <http_get_404_file>
 8003a8c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f809 	bl	8003ab8 <http_init_file>
 8003aa6:	4603      	mov	r3, r0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3740      	adds	r7, #64	; 0x40
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	200004a0 	.word	0x200004a0
 8003ab4:	08014a84 	.word	0x08014a84

08003ab8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d05d      	beq.n	8003b88 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <http_init_file+0x2a>
 8003ad4:	4b35      	ldr	r3, [pc, #212]	; (8003bac <http_init_file+0xf4>)
 8003ad6:	f640 120b 	movw	r2, #2315	; 0x90b
 8003ada:	4935      	ldr	r1, [pc, #212]	; (8003bb0 <http_init_file+0xf8>)
 8003adc:	4835      	ldr	r0, [pc, #212]	; (8003bb4 <http_init_file+0xfc>)
 8003ade:	f00c ff8d 	bl	80109fc <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	da06      	bge.n	8003b06 <http_init_file+0x4e>
 8003af8:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <http_init_file+0xf4>)
 8003afa:	f640 1234 	movw	r2, #2356	; 0x934
 8003afe:	492e      	ldr	r1, [pc, #184]	; (8003bb8 <http_init_file+0x100>)
 8003b00:	482c      	ldr	r0, [pc, #176]	; (8003bb4 <http_init_file+0xfc>)
 8003b02:	f00c ff7b 	bl	80109fc <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	7c1b      	ldrb	r3, [r3, #16]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <http_init_file+0x7c>
 8003b26:	4b21      	ldr	r3, [pc, #132]	; (8003bac <http_init_file+0xf4>)
 8003b28:	f640 1244 	movw	r2, #2372	; 0x944
 8003b2c:	4923      	ldr	r1, [pc, #140]	; (8003bbc <http_init_file+0x104>)
 8003b2e:	4821      	ldr	r0, [pc, #132]	; (8003bb4 <http_init_file+0xfc>)
 8003b30:	f00c ff64 	bl	80109fc <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d033      	beq.n	8003ba2 <http_init_file+0xea>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	7c1b      	ldrb	r3, [r3, #16]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02c      	beq.n	8003ba2 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6998      	ldr	r0, [r3, #24]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	461a      	mov	r2, r3
 8003b52:	491b      	ldr	r1, [pc, #108]	; (8003bc0 <http_init_file+0x108>)
 8003b54:	f000 f9f8 	bl	8003f48 <lwip_strnstr>
 8003b58:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d020      	beq.n	8003ba2 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3304      	adds	r3, #4
 8003b64:	461a      	mov	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	441a      	add	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad2      	subs	r2, r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
 8003b86:	e00c      	b.n	8003ba2 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	0801195c 	.word	0x0801195c
 8003bb0:	08011a58 	.word	0x08011a58
 8003bb4:	080119a4 	.word	0x080119a4
 8003bb8:	08011a6c 	.word	0x08011a6c
 8003bbc:	08011a8c 	.word	0x08011a8c
 8003bc0:	08011a50 	.word	0x08011a50

08003bc4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <http_err+0x1c>
    http_state_free(hs);
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f7ff fc02 	bl	80033e4 <http_state_free>
  }
}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <http_sent+0x1c>
    return ERR_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	e008      	b.n	8003c16 <http_sent+0x2e>
  }

  hs->retries = 0;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8003c0c:	6979      	ldr	r1, [r7, #20]
 8003c0e:	68b8      	ldr	r0, [r7, #8]
 8003c10:	f7ff fd25 	bl	800365e <http_send>

  return ERR_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d107      	bne.n	8003c42 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8003c32:	2100      	movs	r1, #0
 8003c34:	6838      	ldr	r0, [r7, #0]
 8003c36:	f7ff fc91 	bl	800355c <http_close_conn>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e021      	b.n	8003c86 <http_poll+0x68>
  } else {
    hs->retries++;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c48:	3301      	adds	r3, #1
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d105      	bne.n	8003c68 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8003c5c:	68f9      	ldr	r1, [r7, #12]
 8003c5e:	6838      	ldr	r0, [r7, #0]
 8003c60:	f7ff fc7c 	bl	800355c <http_close_conn>
      return ERR_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e00e      	b.n	8003c86 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8003c70:	68f9      	ldr	r1, [r7, #12]
 8003c72:	6838      	ldr	r0, [r7, #0]
 8003c74:	f7ff fcf3 	bl	800365e <http_send>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8003c7e:	6838      	ldr	r0, [r7, #0]
 8003c80:	f00a fff0 	bl	800ec64 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8003ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d105      	bne.n	8003cb6 <http_recv+0x26>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <http_recv+0x26>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d111      	bne.n	8003cda <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	891b      	ldrh	r3, [r3, #8]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	68b8      	ldr	r0, [r7, #8]
 8003cc4:	f006 fbc0 	bl	800a448 <tcp_recved>
      pbuf_free(p);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f005 fc51 	bl	8009570 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8003cce:	6979      	ldr	r1, [r7, #20]
 8003cd0:	68b8      	ldr	r0, [r7, #8]
 8003cd2:	f7ff fc43 	bl	800355c <http_close_conn>
    return ERR_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e055      	b.n	8003d86 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	891b      	ldrh	r3, [r3, #8]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	68b8      	ldr	r0, [r7, #8]
 8003ce2:	f006 fbb1 	bl	800a448 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d147      	bne.n	8003d7e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fd30 	bl	8003758 <http_parse_request>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8003cfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <http_recv+0xa0>
 8003d04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003d08:	f113 0f05 	cmn.w	r3, #5
 8003d0c:	d010      	beq.n	8003d30 <http_recv+0xa0>
 8003d0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003d12:	f113 0f10 	cmn.w	r3, #16
 8003d16:	d00b      	beq.n	8003d30 <http_recv+0xa0>
 8003d18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003d1c:	f113 0f08 	cmn.w	r3, #8
 8003d20:	d006      	beq.n	8003d30 <http_recv+0xa0>
 8003d22:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <http_recv+0x100>)
 8003d24:	f640 2205 	movw	r2, #2565	; 0xa05
 8003d28:	491a      	ldr	r1, [pc, #104]	; (8003d94 <http_recv+0x104>)
 8003d2a:	481b      	ldr	r0, [pc, #108]	; (8003d98 <http_recv+0x108>)
 8003d2c:	f00c fe66 	bl	80109fc <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8003d30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003d34:	f113 0f05 	cmn.w	r3, #5
 8003d38:	d00b      	beq.n	8003d52 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <http_recv+0xc2>
          pbuf_free(hs->req);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f005 fc12 	bl	8009570 <pbuf_free>
          hs->req = NULL;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f005 fc0c 	bl	8009570 <pbuf_free>
      if (parsed == ERR_OK) {
 8003d58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8003d60:	6979      	ldr	r1, [r7, #20]
 8003d62:	68b8      	ldr	r0, [r7, #8]
 8003d64:	f7ff fc7b 	bl	800365e <http_send>
 8003d68:	e00c      	b.n	8003d84 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8003d6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003d6e:	f113 0f10 	cmn.w	r3, #16
 8003d72:	d107      	bne.n	8003d84 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8003d74:	6979      	ldr	r1, [r7, #20]
 8003d76:	68b8      	ldr	r0, [r7, #8]
 8003d78:	f7ff fbf0 	bl	800355c <http_close_conn>
 8003d7c:	e002      	b.n	8003d84 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f005 fbf6 	bl	8009570 <pbuf_free>
    }
  }
  return ERR_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	0801195c 	.word	0x0801195c
 8003d94:	08011ab8 	.word	0x08011ab8
 8003d98:	080119a4 	.word	0x080119a4

08003d9c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <http_accept+0x1c>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <http_accept+0x22>
    return ERR_VAL;
 8003db8:	f06f 0305 	mvn.w	r3, #5
 8003dbc:	e025      	b.n	8003e0a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	68b8      	ldr	r0, [r7, #8]
 8003dc2:	f007 f821 	bl	800ae08 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8003dc6:	f7ff fadb 	bl	8003380 <http_state_alloc>
 8003dca:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d102      	bne.n	8003dd8 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	e018      	b.n	8003e0a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8003dde:	6979      	ldr	r1, [r7, #20]
 8003de0:	68b8      	ldr	r0, [r7, #8]
 8003de2:	f007 fa11 	bl	800b208 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8003de6:	490b      	ldr	r1, [pc, #44]	; (8003e14 <http_accept+0x78>)
 8003de8:	68b8      	ldr	r0, [r7, #8]
 8003dea:	f007 fa1f 	bl	800b22c <tcp_recv>
  altcp_err(pcb, http_err);
 8003dee:	490a      	ldr	r1, [pc, #40]	; (8003e18 <http_accept+0x7c>)
 8003df0:	68b8      	ldr	r0, [r7, #8]
 8003df2:	f007 fa5f 	bl	800b2b4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003df6:	2204      	movs	r2, #4
 8003df8:	4908      	ldr	r1, [pc, #32]	; (8003e1c <http_accept+0x80>)
 8003dfa:	68b8      	ldr	r0, [r7, #8]
 8003dfc:	f007 fa94 	bl	800b328 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8003e00:	4907      	ldr	r1, [pc, #28]	; (8003e20 <http_accept+0x84>)
 8003e02:	68b8      	ldr	r0, [r7, #8]
 8003e04:	f007 fa34 	bl	800b270 <tcp_sent>

  return ERR_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	08003c91 	.word	0x08003c91
 8003e18:	08003bc5 	.word	0x08003bc5
 8003e1c:	08003c1f 	.word	0x08003c1f
 8003e20:	08003be9 	.word	0x08003be9

08003e24 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d029      	beq.n	8003e8a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8003e36:	2101      	movs	r1, #1
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f006 ffe5 	bl	800ae08 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8003e3e:	887b      	ldrh	r3, [r7, #2]
 8003e40:	461a      	mov	r2, r3
 8003e42:	4914      	ldr	r1, [pc, #80]	; (8003e94 <httpd_init_pcb+0x70>)
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f006 f92f 	bl	800a0a8 <tcp_bind>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8003e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d006      	beq.n	8003e64 <httpd_init_pcb+0x40>
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <httpd_init_pcb+0x74>)
 8003e58:	f640 2257 	movw	r2, #2647	; 0xa57
 8003e5c:	490f      	ldr	r1, [pc, #60]	; (8003e9c <httpd_init_pcb+0x78>)
 8003e5e:	4810      	ldr	r0, [pc, #64]	; (8003ea0 <httpd_init_pcb+0x7c>)
 8003e60:	f00c fdcc 	bl	80109fc <iprintf>
    pcb = altcp_listen(pcb);
 8003e64:	21ff      	movs	r1, #255	; 0xff
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f006 f9d6 	bl	800a218 <tcp_listen_with_backlog>
 8003e6c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <httpd_init_pcb+0x5e>
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <httpd_init_pcb+0x74>)
 8003e76:	f640 2259 	movw	r2, #2649	; 0xa59
 8003e7a:	490a      	ldr	r1, [pc, #40]	; (8003ea4 <httpd_init_pcb+0x80>)
 8003e7c:	4808      	ldr	r0, [pc, #32]	; (8003ea0 <httpd_init_pcb+0x7c>)
 8003e7e:	f00c fdbd 	bl	80109fc <iprintf>
    altcp_accept(pcb, http_accept);
 8003e82:	4909      	ldr	r1, [pc, #36]	; (8003ea8 <httpd_init_pcb+0x84>)
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f007 fa37 	bl	800b2f8 <tcp_accept>
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	08014aac 	.word	0x08014aac
 8003e98:	0801195c 	.word	0x0801195c
 8003e9c:	08011ae4 	.word	0x08011ae4
 8003ea0:	080119a4 	.word	0x080119a4
 8003ea4:	08011b00 	.word	0x08011b00
 8003ea8:	08003d9d 	.word	0x08003d9d

08003eac <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8003eb2:	202e      	movs	r0, #46	; 0x2e
 8003eb4:	f007 f99a 	bl	800b1ec <tcp_new_ip_type>
 8003eb8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <httpd_init+0x22>
 8003ec0:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <httpd_init+0x34>)
 8003ec2:	f640 2272 	movw	r2, #2674	; 0xa72
 8003ec6:	4907      	ldr	r1, [pc, #28]	; (8003ee4 <httpd_init+0x38>)
 8003ec8:	4807      	ldr	r0, [pc, #28]	; (8003ee8 <httpd_init+0x3c>)
 8003eca:	f00c fd97 	bl	80109fc <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8003ece:	2150      	movs	r1, #80	; 0x50
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff ffa7 	bl	8003e24 <httpd_init_pcb>
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	0801195c 	.word	0x0801195c
 8003ee4:	08011b20 	.word	0x08011b20
 8003ee8:	080119a4 	.word	0x080119a4

08003eec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	b21a      	sxth	r2, r3
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	4313      	orrs	r3, r2
 8003f06:	b21b      	sxth	r3, r3
 8003f08:	b29b      	uxth	r3, r3
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	061a      	lsls	r2, r3, #24
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	0a1b      	lsrs	r3, r3, #8
 8003f30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0e1b      	lsrs	r3, r3, #24
 8003f3a:	4313      	orrs	r3, r2
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8003f54:	68b8      	ldr	r0, [r7, #8]
 8003f56:	f7fc f965 	bl	8000224 <strlen>
 8003f5a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	e022      	b.n	8003fac <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	e012      	b.n	8003f92 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	781a      	ldrb	r2, [r3, #0]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d109      	bne.n	8003f8c <lwip_strnstr+0x44>
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	6978      	ldr	r0, [r7, #20]
 8003f7e:	f00c fd9d 	bl	8010abc <strncmp>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	e00f      	b.n	8003fac <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <lwip_strnstr+0x62>
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	441a      	add	r2, r3
 8003fa0:	68f9      	ldr	r1, [r7, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	440b      	add	r3, r1
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d9e0      	bls.n	8003f6c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003fbe:	f004 f927 	bl	8008210 <mem_init>
  memp_init();
 8003fc2:	f004 fc2d 	bl	8008820 <memp_init>
  pbuf_init();
  netif_init();
 8003fc6:	f004 fce5 	bl	8008994 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003fca:	f00b ff13 	bl	800fdf4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003fce:	f005 fd6d 	bl	8009aac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003fd2:	f00b fe8b 	bl	800fcec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8003fe4:	4b20      	ldr	r3, [pc, #128]	; (8004068 <dhcp_inc_pcb_refcount+0x88>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d133      	bne.n	8004054 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8003fec:	4b1f      	ldr	r3, [pc, #124]	; (800406c <dhcp_inc_pcb_refcount+0x8c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <dhcp_inc_pcb_refcount+0x20>
 8003ff4:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <dhcp_inc_pcb_refcount+0x90>)
 8003ff6:	22e5      	movs	r2, #229	; 0xe5
 8003ff8:	491e      	ldr	r1, [pc, #120]	; (8004074 <dhcp_inc_pcb_refcount+0x94>)
 8003ffa:	481f      	ldr	r0, [pc, #124]	; (8004078 <dhcp_inc_pcb_refcount+0x98>)
 8003ffc:	f00c fcfe 	bl	80109fc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8004000:	f00c fb6e 	bl	80106e0 <udp_new>
 8004004:	4602      	mov	r2, r0
 8004006:	4b19      	ldr	r3, [pc, #100]	; (800406c <dhcp_inc_pcb_refcount+0x8c>)
 8004008:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800400a:	4b18      	ldr	r3, [pc, #96]	; (800406c <dhcp_inc_pcb_refcount+0x8c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	e024      	b.n	8004062 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <dhcp_inc_pcb_refcount+0x8c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a13      	ldr	r2, [pc, #76]	; (800406c <dhcp_inc_pcb_refcount+0x8c>)
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	7a52      	ldrb	r2, [r2, #9]
 8004022:	f042 0220 	orr.w	r2, r2, #32
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <dhcp_inc_pcb_refcount+0x8c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2244      	movs	r2, #68	; 0x44
 8004030:	4912      	ldr	r1, [pc, #72]	; (800407c <dhcp_inc_pcb_refcount+0x9c>)
 8004032:	4618      	mov	r0, r3
 8004034:	f00c f9fc 	bl	8010430 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8004038:	4b0c      	ldr	r3, [pc, #48]	; (800406c <dhcp_inc_pcb_refcount+0x8c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2243      	movs	r2, #67	; 0x43
 800403e:	490f      	ldr	r1, [pc, #60]	; (800407c <dhcp_inc_pcb_refcount+0x9c>)
 8004040:	4618      	mov	r0, r3
 8004042:	f00c fa7d 	bl	8010540 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <dhcp_inc_pcb_refcount+0x8c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2200      	movs	r2, #0
 800404c:	490c      	ldr	r1, [pc, #48]	; (8004080 <dhcp_inc_pcb_refcount+0xa0>)
 800404e:	4618      	mov	r0, r3
 8004050:	f00c fae4 	bl	801061c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <dhcp_inc_pcb_refcount+0x88>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	3301      	adds	r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	4b02      	ldr	r3, [pc, #8]	; (8004068 <dhcp_inc_pcb_refcount+0x88>)
 800405e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	200004e4 	.word	0x200004e4
 800406c:	200004e0 	.word	0x200004e0
 8004070:	08011b3c 	.word	0x08011b3c
 8004074:	08011b74 	.word	0x08011b74
 8004078:	08011b9c 	.word	0x08011b9c
 800407c:	08014aac 	.word	0x08014aac
 8004080:	080058a9 	.word	0x080058a9

08004084 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8004088:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <dhcp_dec_pcb_refcount+0x40>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <dhcp_dec_pcb_refcount+0x18>
 8004090:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <dhcp_dec_pcb_refcount+0x44>)
 8004092:	22ff      	movs	r2, #255	; 0xff
 8004094:	490d      	ldr	r1, [pc, #52]	; (80040cc <dhcp_dec_pcb_refcount+0x48>)
 8004096:	480e      	ldr	r0, [pc, #56]	; (80040d0 <dhcp_dec_pcb_refcount+0x4c>)
 8004098:	f00c fcb0 	bl	80109fc <iprintf>
  dhcp_pcb_refcount--;
 800409c:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <dhcp_dec_pcb_refcount+0x40>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <dhcp_dec_pcb_refcount+0x40>)
 80040a6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80040a8:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <dhcp_dec_pcb_refcount+0x40>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d107      	bne.n	80040c0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80040b0:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <dhcp_dec_pcb_refcount+0x50>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f00c fad1 	bl	801065c <udp_remove>
    dhcp_pcb = NULL;
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <dhcp_dec_pcb_refcount+0x50>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
  }
}
 80040c0:	bf00      	nop
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	200004e4 	.word	0x200004e4
 80040c8:	08011b3c 	.word	0x08011b3c
 80040cc:	08011bc4 	.word	0x08011bc4
 80040d0:	08011b9c 	.word	0x08011b9c
 80040d4:	200004e0 	.word	0x200004e0

080040d8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80040e6:	210c      	movs	r1, #12
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f001 f81b 	bl	8005124 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <dhcp_handle_nak+0x30>)
 80040f0:	4a05      	ldr	r2, [pc, #20]	; (8004108 <dhcp_handle_nak+0x30>)
 80040f2:	4905      	ldr	r1, [pc, #20]	; (8004108 <dhcp_handle_nak+0x30>)
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f004 fdc5 	bl	8008c84 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fc0e 	bl	800491c <dhcp_discover>
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	08014aac 	.word	0x08014aac

0800410c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800411a:	2108      	movs	r1, #8
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f001 f801 	bl	8005124 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	331c      	adds	r3, #28
 8004126:	2200      	movs	r2, #0
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f002 fb00 	bl	8006730 <etharp_query>
 8004130:	4603      	mov	r3, r0
 8004132:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	799b      	ldrb	r3, [r3, #6]
 8004138:	2bff      	cmp	r3, #255	; 0xff
 800413a:	d005      	beq.n	8004148 <dhcp_check+0x3c>
    dhcp->tries++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	799b      	ldrb	r3, [r3, #6]
 8004140:	3301      	adds	r3, #1
 8004142:	b2da      	uxtb	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8004148:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800414c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800414e:	893b      	ldrh	r3, [r7, #8]
 8004150:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004154:	4a06      	ldr	r2, [pc, #24]	; (8004170 <dhcp_check+0x64>)
 8004156:	fb82 1203 	smull	r1, r2, r2, r3
 800415a:	1152      	asrs	r2, r2, #5
 800415c:	17db      	asrs	r3, r3, #31
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	10624dd3 	.word	0x10624dd3

08004174 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <dhcp_handle_offer+0x44>)
 8004186:	789b      	ldrb	r3, [r3, #2]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d011      	beq.n	80041b0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <dhcp_handle_offer+0x48>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff febd 	bl	8003f16 <lwip_htonl>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f808 	bl	80041c0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	200037ac 	.word	0x200037ac
 80041bc:	200037b4 	.word	0x200037b4

080041c0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80041c0:	b5b0      	push	{r4, r5, r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <dhcp_select+0x22>
 80041ce:	4b71      	ldr	r3, [pc, #452]	; (8004394 <dhcp_select+0x1d4>)
 80041d0:	f240 1277 	movw	r2, #375	; 0x177
 80041d4:	4970      	ldr	r1, [pc, #448]	; (8004398 <dhcp_select+0x1d8>)
 80041d6:	4871      	ldr	r0, [pc, #452]	; (800439c <dhcp_select+0x1dc>)
 80041d8:	f00c fc10 	bl	80109fc <iprintf>
 80041dc:	f06f 030f 	mvn.w	r3, #15
 80041e0:	e0d3      	b.n	800438a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <dhcp_select+0x42>
 80041ee:	4b69      	ldr	r3, [pc, #420]	; (8004394 <dhcp_select+0x1d4>)
 80041f0:	f240 1279 	movw	r2, #377	; 0x179
 80041f4:	496a      	ldr	r1, [pc, #424]	; (80043a0 <dhcp_select+0x1e0>)
 80041f6:	4869      	ldr	r0, [pc, #420]	; (800439c <dhcp_select+0x1dc>)
 80041f8:	f00c fc00 	bl	80109fc <iprintf>
 80041fc:	f06f 0305 	mvn.w	r3, #5
 8004200:	e0c3      	b.n	800438a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8004202:	2101      	movs	r1, #1
 8004204:	69b8      	ldr	r0, [r7, #24]
 8004206:	f000 ff8d 	bl	8005124 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800420a:	f107 030c 	add.w	r3, r7, #12
 800420e:	2203      	movs	r2, #3
 8004210:	69b9      	ldr	r1, [r7, #24]
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f001 fc10 	bl	8005a38 <dhcp_create_msg>
 8004218:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8085 	beq.w	800432c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004228:	89b8      	ldrh	r0, [r7, #12]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004230:	2302      	movs	r3, #2
 8004232:	2239      	movs	r2, #57	; 0x39
 8004234:	f000 ff90 	bl	8005158 <dhcp_option>
 8004238:	4603      	mov	r3, r0
 800423a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800423c:	89b8      	ldrh	r0, [r7, #12]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	461a      	mov	r2, r3
 800424a:	f000 ffdf 	bl	800520c <dhcp_option_short>
 800424e:	4603      	mov	r3, r0
 8004250:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8004252:	89b8      	ldrh	r0, [r7, #12]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800425a:	2304      	movs	r3, #4
 800425c:	2232      	movs	r2, #50	; 0x32
 800425e:	f000 ff7b 	bl	8005158 <dhcp_option>
 8004262:	4603      	mov	r3, r0
 8004264:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004266:	89bc      	ldrh	r4, [r7, #12]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fe4f 	bl	8003f16 <lwip_htonl>
 8004278:	4603      	mov	r3, r0
 800427a:	461a      	mov	r2, r3
 800427c:	4629      	mov	r1, r5
 800427e:	4620      	mov	r0, r4
 8004280:	f000 fff6 	bl	8005270 <dhcp_option_long>
 8004284:	4603      	mov	r3, r0
 8004286:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8004288:	89b8      	ldrh	r0, [r7, #12]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004290:	2304      	movs	r3, #4
 8004292:	2236      	movs	r2, #54	; 0x36
 8004294:	f000 ff60 	bl	8005158 <dhcp_option>
 8004298:	4603      	mov	r3, r0
 800429a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800429c:	89bc      	ldrh	r4, [r7, #12]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fe34 	bl	8003f16 <lwip_htonl>
 80042ae:	4603      	mov	r3, r0
 80042b0:	461a      	mov	r2, r3
 80042b2:	4629      	mov	r1, r5
 80042b4:	4620      	mov	r0, r4
 80042b6:	f000 ffdb 	bl	8005270 <dhcp_option_long>
 80042ba:	4603      	mov	r3, r0
 80042bc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80042be:	89b8      	ldrh	r0, [r7, #12]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80042c6:	2303      	movs	r3, #3
 80042c8:	2237      	movs	r2, #55	; 0x37
 80042ca:	f000 ff45 	bl	8005158 <dhcp_option>
 80042ce:	4603      	mov	r3, r0
 80042d0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80042d2:	2300      	movs	r3, #0
 80042d4:	77bb      	strb	r3, [r7, #30]
 80042d6:	e00e      	b.n	80042f6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80042d8:	89b8      	ldrh	r0, [r7, #12]
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80042e0:	7fbb      	ldrb	r3, [r7, #30]
 80042e2:	4a30      	ldr	r2, [pc, #192]	; (80043a4 <dhcp_select+0x1e4>)
 80042e4:	5cd3      	ldrb	r3, [r2, r3]
 80042e6:	461a      	mov	r2, r3
 80042e8:	f000 ff6a 	bl	80051c0 <dhcp_option_byte>
 80042ec:	4603      	mov	r3, r0
 80042ee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80042f0:	7fbb      	ldrb	r3, [r7, #30]
 80042f2:	3301      	adds	r3, #1
 80042f4:	77bb      	strb	r3, [r7, #30]
 80042f6:	7fbb      	ldrb	r3, [r7, #30]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d9ed      	bls.n	80042d8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80042fc:	89b8      	ldrh	r0, [r7, #12]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	33f0      	adds	r3, #240	; 0xf0
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4619      	mov	r1, r3
 8004306:	f001 fc6d 	bl	8005be4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800430a:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <dhcp_select+0x1e8>)
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	4b27      	ldr	r3, [pc, #156]	; (80043ac <dhcp_select+0x1ec>)
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	2343      	movs	r3, #67	; 0x43
 8004318:	4a25      	ldr	r2, [pc, #148]	; (80043b0 <dhcp_select+0x1f0>)
 800431a:	6979      	ldr	r1, [r7, #20]
 800431c:	f00b ffa0 	bl	8010260 <udp_sendto_if_src>
 8004320:	4603      	mov	r3, r0
 8004322:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8004324:	6978      	ldr	r0, [r7, #20]
 8004326:	f005 f923 	bl	8009570 <pbuf_free>
 800432a:	e001      	b.n	8004330 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800432c:	23ff      	movs	r3, #255	; 0xff
 800432e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	799b      	ldrb	r3, [r3, #6]
 8004334:	2bff      	cmp	r3, #255	; 0xff
 8004336:	d005      	beq.n	8004344 <dhcp_select+0x184>
    dhcp->tries++;
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	799b      	ldrb	r3, [r3, #6]
 800433c:	3301      	adds	r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	799b      	ldrb	r3, [r3, #6]
 8004348:	2b05      	cmp	r3, #5
 800434a:	d80d      	bhi.n	8004368 <dhcp_select+0x1a8>
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	799b      	ldrb	r3, [r3, #6]
 8004350:	461a      	mov	r2, r3
 8004352:	2301      	movs	r3, #1
 8004354:	4093      	lsls	r3, r2
 8004356:	b29b      	uxth	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	0152      	lsls	r2, r2, #5
 800435c:	1ad2      	subs	r2, r2, r3
 800435e:	0092      	lsls	r2, r2, #2
 8004360:	4413      	add	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	b29b      	uxth	r3, r3
 8004366:	e001      	b.n	800436c <dhcp_select+0x1ac>
 8004368:	f64e 2360 	movw	r3, #60000	; 0xea60
 800436c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800436e:	89fb      	ldrh	r3, [r7, #14]
 8004370:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004374:	4a0f      	ldr	r2, [pc, #60]	; (80043b4 <dhcp_select+0x1f4>)
 8004376:	fb82 1203 	smull	r1, r2, r2, r3
 800437a:	1152      	asrs	r2, r2, #5
 800437c:	17db      	asrs	r3, r3, #31
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	b29a      	uxth	r2, r3
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8004386:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bdb0      	pop	{r4, r5, r7, pc}
 8004392:	bf00      	nop
 8004394:	08011b3c 	.word	0x08011b3c
 8004398:	08011be8 	.word	0x08011be8
 800439c:	08011b9c 	.word	0x08011b9c
 80043a0:	08011c04 	.word	0x08011c04
 80043a4:	2000000c 	.word	0x2000000c
 80043a8:	200004e0 	.word	0x200004e0
 80043ac:	08014aac 	.word	0x08014aac
 80043b0:	08014ab0 	.word	0x08014ab0
 80043b4:	10624dd3 	.word	0x10624dd3

080043b8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80043be:	4b27      	ldr	r3, [pc, #156]	; (800445c <dhcp_coarse_tmr+0xa4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	607b      	str	r3, [r7, #4]
 80043c4:	e042      	b.n	800444c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d039      	beq.n	8004446 <dhcp_coarse_tmr+0x8e>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	795b      	ldrb	r3, [r3, #5]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d035      	beq.n	8004446 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	8a9b      	ldrh	r3, [r3, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d012      	beq.n	8004408 <dhcp_coarse_tmr+0x50>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	8a5b      	ldrh	r3, [r3, #18]
 80043e6:	3301      	adds	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	825a      	strh	r2, [r3, #18]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	8a5a      	ldrh	r2, [r3, #18]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	8a9b      	ldrh	r3, [r3, #20]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d106      	bne.n	8004408 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fdf8 	bl	8004ff0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f96b 	bl	80046dc <dhcp_start>
 8004406:	e01e      	b.n	8004446 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	8a1b      	ldrh	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00b      	beq.n	8004428 <dhcp_coarse_tmr+0x70>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	8a1b      	ldrh	r3, [r3, #16]
 8004414:	1e5a      	subs	r2, r3, #1
 8004416:	b291      	uxth	r1, r2
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	8211      	strh	r1, [r2, #16]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d103      	bne.n	8004428 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f8c7 	bl	80045b4 <dhcp_t2_timeout>
 8004426:	e00e      	b.n	8004446 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	89db      	ldrh	r3, [r3, #14]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <dhcp_coarse_tmr+0x8e>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	89db      	ldrh	r3, [r3, #14]
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	b291      	uxth	r1, r2
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	81d1      	strh	r1, [r2, #14]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d102      	bne.n	8004446 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f888 	bl	8004556 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1b9      	bne.n	80043c6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20006d10 	.word	0x20006d10

08004460 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8004466:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <dhcp_fine_tmr+0x60>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	607b      	str	r3, [r7, #4]
 800446c:	e020      	b.n	80044b0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d017      	beq.n	80044aa <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	891b      	ldrh	r3, [r3, #8]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d906      	bls.n	8004490 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	891b      	ldrh	r3, [r3, #8]
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	811a      	strh	r2, [r3, #8]
 800448e:	e00c      	b.n	80044aa <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	891b      	ldrh	r3, [r3, #8]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d108      	bne.n	80044aa <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	891b      	ldrh	r3, [r3, #8]
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f80d 	bl	80044c4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1db      	bne.n	800446e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20006d10 	.word	0x20006d10

080044c4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	795b      	ldrb	r3, [r3, #5]
 80044d6:	2b0c      	cmp	r3, #12
 80044d8:	d003      	beq.n	80044e2 <dhcp_timeout+0x1e>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	795b      	ldrb	r3, [r3, #5]
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d103      	bne.n	80044ea <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fa1a 	bl	800491c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80044e8:	e031      	b.n	800454e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	795b      	ldrb	r3, [r3, #5]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10e      	bne.n	8004510 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	799b      	ldrb	r3, [r3, #6]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d803      	bhi.n	8004502 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff fe60 	bl	80041c0 <dhcp_select>
}
 8004500:	e025      	b.n	800454e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fd74 	bl	8004ff0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f8e7 	bl	80046dc <dhcp_start>
}
 800450e:	e01e      	b.n	800454e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	795b      	ldrb	r3, [r3, #5]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d10b      	bne.n	8004530 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	799b      	ldrb	r3, [r3, #6]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d803      	bhi.n	8004528 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff fdf3 	bl	800410c <dhcp_check>
}
 8004526:	e012      	b.n	800454e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fa99 	bl	8004a60 <dhcp_bind>
}
 800452e:	e00e      	b.n	800454e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	795b      	ldrb	r3, [r3, #5]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d10a      	bne.n	800454e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	799b      	ldrb	r3, [r3, #6]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d803      	bhi.n	8004548 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fc9f 	bl	8004e84 <dhcp_reboot>
}
 8004546:	e002      	b.n	800454e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f9e7 	bl	800491c <dhcp_discover>
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	795b      	ldrb	r3, [r3, #5]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d007      	beq.n	800457c <dhcp_t1_timeout+0x26>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	795b      	ldrb	r3, [r3, #5]
 8004570:	2b0a      	cmp	r3, #10
 8004572:	d003      	beq.n	800457c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8004578:	2b05      	cmp	r3, #5
 800457a:	d117      	bne.n	80045ac <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fb49 	bl	8004c14 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	899b      	ldrh	r3, [r3, #12]
 8004586:	461a      	mov	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8a5b      	ldrh	r3, [r3, #18]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b01      	cmp	r3, #1
 8004590:	dd0c      	ble.n	80045ac <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	899b      	ldrh	r3, [r3, #12]
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8a5b      	ldrh	r3, [r3, #18]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	da00      	bge.n	80045a4 <dhcp_t1_timeout+0x4e>
 80045a2:	3301      	adds	r3, #1
 80045a4:	105b      	asrs	r3, r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	795b      	ldrb	r3, [r3, #5]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d00b      	beq.n	80045e2 <dhcp_t2_timeout+0x2e>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	795b      	ldrb	r3, [r3, #5]
 80045ce:	2b0a      	cmp	r3, #10
 80045d0:	d007      	beq.n	80045e2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d003      	beq.n	80045e2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	795b      	ldrb	r3, [r3, #5]
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d117      	bne.n	8004612 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fbb2 	bl	8004d4c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8a9b      	ldrh	r3, [r3, #20]
 80045ec:	461a      	mov	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8a5b      	ldrh	r3, [r3, #18]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	dd0c      	ble.n	8004612 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8a9b      	ldrh	r3, [r3, #20]
 80045fc:	461a      	mov	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8a5b      	ldrh	r3, [r3, #18]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	da00      	bge.n	800460a <dhcp_t2_timeout+0x56>
 8004608:	3301      	adds	r3, #1
 800460a:	105b      	asrs	r3, r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8004638:	4b26      	ldr	r3, [pc, #152]	; (80046d4 <dhcp_handle_ack+0xb8>)
 800463a:	78db      	ldrb	r3, [r3, #3]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8004640:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <dhcp_handle_ack+0xbc>)
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8004648:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <dhcp_handle_ack+0xb8>)
 800464a:	791b      	ldrb	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8004650:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <dhcp_handle_ack+0xbc>)
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	62da      	str	r2, [r3, #44]	; 0x2c
 8004658:	e004      	b.n	8004664 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	085a      	lsrs	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8004664:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <dhcp_handle_ack+0xb8>)
 8004666:	795b      	ldrb	r3, [r3, #5]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <dhcp_handle_ack+0xbc>)
 800466e:	695a      	ldr	r2, [r3, #20]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
 8004674:	e007      	b.n	8004686 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	1a9b      	subs	r3, r3, r2
 8004680:	08da      	lsrs	r2, r3, #3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <dhcp_handle_ack+0xb8>)
 8004690:	799b      	ldrb	r3, [r3, #6]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8004696:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <dhcp_handle_ack+0xbc>)
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fc3b 	bl	8003f16 <lwip_htonl>
 80046a0:	4602      	mov	r2, r0
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	71da      	strb	r2, [r3, #7]
 80046ac:	e002      	b.n	80046b4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80046b4:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <dhcp_handle_ack+0xb8>)
 80046b6:	79db      	ldrb	r3, [r3, #7]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <dhcp_handle_ack+0xbc>)
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fc28 	bl	8003f16 <lwip_htonl>
 80046c6:	4602      	mov	r2, r0
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	200037ac 	.word	0x200037ac
 80046d8:	200037b4 	.word	0x200037b4

080046dc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <dhcp_start+0x22>
 80046ea:	4b37      	ldr	r3, [pc, #220]	; (80047c8 <dhcp_start+0xec>)
 80046ec:	f240 22e7 	movw	r2, #743	; 0x2e7
 80046f0:	4936      	ldr	r1, [pc, #216]	; (80047cc <dhcp_start+0xf0>)
 80046f2:	4837      	ldr	r0, [pc, #220]	; (80047d0 <dhcp_start+0xf4>)
 80046f4:	f00c f982 	bl	80109fc <iprintf>
 80046f8:	f06f 030f 	mvn.w	r3, #15
 80046fc:	e060      	b.n	80047c0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <dhcp_start+0x44>
 800470c:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <dhcp_start+0xec>)
 800470e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8004712:	4930      	ldr	r1, [pc, #192]	; (80047d4 <dhcp_start+0xf8>)
 8004714:	482e      	ldr	r0, [pc, #184]	; (80047d0 <dhcp_start+0xf4>)
 8004716:	f00c f971 	bl	80109fc <iprintf>
 800471a:	f06f 030f 	mvn.w	r3, #15
 800471e:	e04f      	b.n	80047c0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800472e:	d202      	bcs.n	8004736 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8004730:	f04f 33ff 	mov.w	r3, #4294967295
 8004734:	e044      	b.n	80047c0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10d      	bne.n	8004758 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800473c:	2034      	movs	r0, #52	; 0x34
 800473e:	f003 ff45 	bl	80085cc <mem_malloc>
 8004742:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800474a:	f04f 33ff 	mov.w	r3, #4294967295
 800474e:	e037      	b.n	80047c0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	625a      	str	r2, [r3, #36]	; 0x24
 8004756:	e005      	b.n	8004764 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	791b      	ldrb	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8004760:	f7ff fc90 	bl	8004084 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8004764:	2234      	movs	r2, #52	; 0x34
 8004766:	2100      	movs	r1, #0
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f00c f93f 	bl	80109ec <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800476e:	f7ff fc37 	bl	8003fe0 <dhcp_inc_pcb_refcount>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <dhcp_start+0xa2>
    return ERR_MEM;
 8004778:	f04f 33ff 	mov.w	r3, #4294967295
 800477c:	e020      	b.n	80047c0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	d105      	bne.n	800479e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8004792:	2102      	movs	r1, #2
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fcc5 	bl	8005124 <dhcp_set_state>
    return ERR_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e010      	b.n	80047c0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8bc 	bl	800491c <dhcp_discover>
 80047a4:	4603      	mov	r3, r0
 80047a6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80047a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fc1d 	bl	8004ff0 <dhcp_release_and_stop>
    return ERR_MEM;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ba:	e001      	b.n	80047c0 <dhcp_start+0xe4>
  }
  return result;
 80047bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	08011b3c 	.word	0x08011b3c
 80047cc:	08011c20 	.word	0x08011c20
 80047d0:	08011b9c 	.word	0x08011b9c
 80047d4:	08011c64 	.word	0x08011c64

080047d8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d107      	bne.n	80047f8 <dhcp_arp_reply+0x20>
 80047e8:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <dhcp_arp_reply+0x4c>)
 80047ea:	f240 328b 	movw	r2, #907	; 0x38b
 80047ee:	490e      	ldr	r1, [pc, #56]	; (8004828 <dhcp_arp_reply+0x50>)
 80047f0:	480e      	ldr	r0, [pc, #56]	; (800482c <dhcp_arp_reply+0x54>)
 80047f2:	f00c f903 	bl	80109fc <iprintf>
 80047f6:	e012      	b.n	800481e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00c      	beq.n	800481e <dhcp_arp_reply+0x46>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	795b      	ldrb	r3, [r3, #5]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d108      	bne.n	800481e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	429a      	cmp	r2, r3
 8004816:	d102      	bne.n	800481e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f809 	bl	8004830 <dhcp_decline>
    }
  }
}
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	08011b3c 	.word	0x08011b3c
 8004828:	08011c20 	.word	0x08011c20
 800482c:	08011b9c 	.word	0x08011b9c

08004830 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8004830:	b5b0      	push	{r4, r5, r7, lr}
 8004832:	b08a      	sub	sp, #40	; 0x28
 8004834:	af02      	add	r7, sp, #8
 8004836:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800483e:	210c      	movs	r1, #12
 8004840:	69b8      	ldr	r0, [r7, #24]
 8004842:	f000 fc6f 	bl	8005124 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8004846:	f107 030c 	add.w	r3, r7, #12
 800484a:	2204      	movs	r2, #4
 800484c:	69b9      	ldr	r1, [r7, #24]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 f8f2 	bl	8005a38 <dhcp_create_msg>
 8004854:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d035      	beq.n	80048c8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8004862:	89b8      	ldrh	r0, [r7, #12]
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800486a:	2304      	movs	r3, #4
 800486c:	2232      	movs	r2, #50	; 0x32
 800486e:	f000 fc73 	bl	8005158 <dhcp_option>
 8004872:	4603      	mov	r3, r0
 8004874:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004876:	89bc      	ldrh	r4, [r7, #12]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fb47 	bl	8003f16 <lwip_htonl>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	4629      	mov	r1, r5
 800488e:	4620      	mov	r0, r4
 8004890:	f000 fcee 	bl	8005270 <dhcp_option_long>
 8004894:	4603      	mov	r3, r0
 8004896:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8004898:	89b8      	ldrh	r0, [r7, #12]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	33f0      	adds	r3, #240	; 0xf0
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4619      	mov	r1, r3
 80048a2:	f001 f99f 	bl	8005be4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80048a6:	4b19      	ldr	r3, [pc, #100]	; (800490c <dhcp_decline+0xdc>)
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	4b19      	ldr	r3, [pc, #100]	; (8004910 <dhcp_decline+0xe0>)
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	2343      	movs	r3, #67	; 0x43
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <dhcp_decline+0xe4>)
 80048b6:	6979      	ldr	r1, [r7, #20]
 80048b8:	f00b fcd2 	bl	8010260 <udp_sendto_if_src>
 80048bc:	4603      	mov	r3, r0
 80048be:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80048c0:	6978      	ldr	r0, [r7, #20]
 80048c2:	f004 fe55 	bl	8009570 <pbuf_free>
 80048c6:	e001      	b.n	80048cc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80048c8:	23ff      	movs	r3, #255	; 0xff
 80048ca:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	799b      	ldrb	r3, [r3, #6]
 80048d0:	2bff      	cmp	r3, #255	; 0xff
 80048d2:	d005      	beq.n	80048e0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	799b      	ldrb	r3, [r3, #6]
 80048d8:	3301      	adds	r3, #1
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80048e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80048e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80048e6:	89fb      	ldrh	r3, [r7, #14]
 80048e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80048ec:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <dhcp_decline+0xe8>)
 80048ee:	fb82 1203 	smull	r1, r2, r2, r3
 80048f2:	1152      	asrs	r2, r2, #5
 80048f4:	17db      	asrs	r3, r3, #31
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80048fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bdb0      	pop	{r4, r5, r7, pc}
 800490a:	bf00      	nop
 800490c:	200004e0 	.word	0x200004e0
 8004910:	08014aac 	.word	0x08014aac
 8004914:	08014ab0 	.word	0x08014ab0
 8004918:	10624dd3 	.word	0x10624dd3

0800491c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af02      	add	r7, sp, #8
 8004922:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2200      	movs	r2, #0
 8004932:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8004934:	2106      	movs	r1, #6
 8004936:	69b8      	ldr	r0, [r7, #24]
 8004938:	f000 fbf4 	bl	8005124 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800493c:	f107 0308 	add.w	r3, r7, #8
 8004940:	2201      	movs	r2, #1
 8004942:	69b9      	ldr	r1, [r7, #24]
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 f877 	bl	8005a38 <dhcp_create_msg>
 800494a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d04b      	beq.n	80049ea <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004958:	8938      	ldrh	r0, [r7, #8]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004960:	2302      	movs	r3, #2
 8004962:	2239      	movs	r2, #57	; 0x39
 8004964:	f000 fbf8 	bl	8005158 <dhcp_option>
 8004968:	4603      	mov	r3, r0
 800496a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800496c:	8938      	ldrh	r0, [r7, #8]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004978:	461a      	mov	r2, r3
 800497a:	f000 fc47 	bl	800520c <dhcp_option_short>
 800497e:	4603      	mov	r3, r0
 8004980:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004982:	8938      	ldrh	r0, [r7, #8]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800498a:	2303      	movs	r3, #3
 800498c:	2237      	movs	r2, #55	; 0x37
 800498e:	f000 fbe3 	bl	8005158 <dhcp_option>
 8004992:	4603      	mov	r3, r0
 8004994:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8004996:	2300      	movs	r3, #0
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e00e      	b.n	80049ba <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800499c:	8938      	ldrh	r0, [r7, #8]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80049a4:	7ffb      	ldrb	r3, [r7, #31]
 80049a6:	4a29      	ldr	r2, [pc, #164]	; (8004a4c <dhcp_discover+0x130>)
 80049a8:	5cd3      	ldrb	r3, [r2, r3]
 80049aa:	461a      	mov	r2, r3
 80049ac:	f000 fc08 	bl	80051c0 <dhcp_option_byte>
 80049b0:	4603      	mov	r3, r0
 80049b2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80049b4:	7ffb      	ldrb	r3, [r7, #31]
 80049b6:	3301      	adds	r3, #1
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	7ffb      	ldrb	r3, [r7, #31]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d9ed      	bls.n	800499c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80049c0:	8938      	ldrh	r0, [r7, #8]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	33f0      	adds	r3, #240	; 0xf0
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4619      	mov	r1, r3
 80049ca:	f001 f90b 	bl	8005be4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <dhcp_discover+0x134>)
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	4b20      	ldr	r3, [pc, #128]	; (8004a54 <dhcp_discover+0x138>)
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2343      	movs	r3, #67	; 0x43
 80049dc:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <dhcp_discover+0x13c>)
 80049de:	6939      	ldr	r1, [r7, #16]
 80049e0:	f00b fc3e 	bl	8010260 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80049e4:	6938      	ldr	r0, [r7, #16]
 80049e6:	f004 fdc3 	bl	8009570 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	799b      	ldrb	r3, [r3, #6]
 80049ee:	2bff      	cmp	r3, #255	; 0xff
 80049f0:	d005      	beq.n	80049fe <dhcp_discover+0xe2>
    dhcp->tries++;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	799b      	ldrb	r3, [r3, #6]
 80049f6:	3301      	adds	r3, #1
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	799b      	ldrb	r3, [r3, #6]
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d80d      	bhi.n	8004a22 <dhcp_discover+0x106>
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	799b      	ldrb	r3, [r3, #6]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4093      	lsls	r3, r2
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	0152      	lsls	r2, r2, #5
 8004a16:	1ad2      	subs	r2, r2, r3
 8004a18:	0092      	lsls	r2, r2, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	e001      	b.n	8004a26 <dhcp_discover+0x10a>
 8004a22:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004a26:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8004a28:	897b      	ldrh	r3, [r7, #10]
 8004a2a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004a2e:	4a0b      	ldr	r2, [pc, #44]	; (8004a5c <dhcp_discover+0x140>)
 8004a30:	fb82 1203 	smull	r1, r2, r2, r3
 8004a34:	1152      	asrs	r2, r2, #5
 8004a36:	17db      	asrs	r3, r3, #31
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8004a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	2000000c 	.word	0x2000000c
 8004a50:	200004e0 	.word	0x200004e0
 8004a54:	08014aac 	.word	0x08014aac
 8004a58:	08014ab0 	.word	0x08014ab0
 8004a5c:	10624dd3 	.word	0x10624dd3

08004a60 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d107      	bne.n	8004a7e <dhcp_bind+0x1e>
 8004a6e:	4b64      	ldr	r3, [pc, #400]	; (8004c00 <dhcp_bind+0x1a0>)
 8004a70:	f240 4215 	movw	r2, #1045	; 0x415
 8004a74:	4963      	ldr	r1, [pc, #396]	; (8004c04 <dhcp_bind+0x1a4>)
 8004a76:	4864      	ldr	r0, [pc, #400]	; (8004c08 <dhcp_bind+0x1a8>)
 8004a78:	f00b ffc0 	bl	80109fc <iprintf>
 8004a7c:	e0bc      	b.n	8004bf8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d107      	bne.n	8004a9a <dhcp_bind+0x3a>
 8004a8a:	4b5d      	ldr	r3, [pc, #372]	; (8004c00 <dhcp_bind+0x1a0>)
 8004a8c:	f240 4217 	movw	r2, #1047	; 0x417
 8004a90:	495e      	ldr	r1, [pc, #376]	; (8004c0c <dhcp_bind+0x1ac>)
 8004a92:	485d      	ldr	r0, [pc, #372]	; (8004c08 <dhcp_bind+0x1a8>)
 8004a94:	f00b ffb2 	bl	80109fc <iprintf>
 8004a98:	e0ae      	b.n	8004bf8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d019      	beq.n	8004ade <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	331e      	adds	r3, #30
 8004ab0:	4a57      	ldr	r2, [pc, #348]	; (8004c10 <dhcp_bind+0x1b0>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac0:	d302      	bcc.n	8004ac8 <dhcp_bind+0x68>
      timeout = 0xffff;
 8004ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ac6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	8a9b      	ldrh	r3, [r3, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2201      	movs	r2, #1
 8004adc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d01d      	beq.n	8004b24 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	331e      	adds	r3, #30
 8004aee:	4a48      	ldr	r2, [pc, #288]	; (8004c10 <dhcp_bind+0x1b0>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afe:	d302      	bcc.n	8004b06 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8004b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b04:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	895b      	ldrh	r3, [r3, #10]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	895a      	ldrh	r2, [r3, #10]
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d01d      	beq.n	8004b6a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	331e      	adds	r3, #30
 8004b34:	4a36      	ldr	r2, [pc, #216]	; (8004c10 <dhcp_bind+0x1b0>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d302      	bcc.n	8004b4c <dhcp_bind+0xec>
      timeout = 0xffff;
 8004b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b4a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	899b      	ldrh	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	899a      	ldrh	r2, [r3, #12]
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	895a      	ldrh	r2, [r3, #10]
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	899b      	ldrh	r3, [r3, #12]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d306      	bcc.n	8004b84 <dhcp_bind+0x124>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	899b      	ldrh	r3, [r3, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2200      	movs	r2, #0
 8004b82:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	79db      	ldrb	r3, [r3, #7]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	e014      	b.n	8004bbe <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	331c      	adds	r3, #28
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8004b9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	db02      	blt.n	8004baa <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8004ba4:	23ff      	movs	r3, #255	; 0xff
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	e009      	b.n	8004bbe <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	2bbf      	cmp	r3, #191	; 0xbf
 8004bae:	d903      	bls.n	8004bb8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8004bb0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004bb4:	613b      	str	r3, [r7, #16]
 8004bb6:	e002      	b.n	8004bbe <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8004bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bbc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d108      	bne.n	8004bdc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bda:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8004bdc:	210a      	movs	r1, #10
 8004bde:	69b8      	ldr	r0, [r7, #24]
 8004be0:	f000 faa0 	bl	8005124 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f103 011c 	add.w	r1, r3, #28
 8004bea:	f107 030c 	add.w	r3, r7, #12
 8004bee:	f107 0210 	add.w	r2, r7, #16
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f004 f846 	bl	8008c84 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	08011b3c 	.word	0x08011b3c
 8004c04:	08011c9c 	.word	0x08011c9c
 8004c08:	08011b9c 	.word	0x08011b9c
 8004c0c:	08011cb8 	.word	0x08011cb8
 8004c10:	88888889 	.word	0x88888889

08004c14 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	; 0x28
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8004c22:	2105      	movs	r1, #5
 8004c24:	69b8      	ldr	r0, [r7, #24]
 8004c26:	f000 fa7d 	bl	8005124 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8004c2a:	f107 030c 	add.w	r3, r7, #12
 8004c2e:	2203      	movs	r2, #3
 8004c30:	69b9      	ldr	r1, [r7, #24]
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 ff00 	bl	8005a38 <dhcp_create_msg>
 8004c38:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d04e      	beq.n	8004cde <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004c46:	89b8      	ldrh	r0, [r7, #12]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004c4e:	2302      	movs	r3, #2
 8004c50:	2239      	movs	r2, #57	; 0x39
 8004c52:	f000 fa81 	bl	8005158 <dhcp_option>
 8004c56:	4603      	mov	r3, r0
 8004c58:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8004c5a:	89b8      	ldrh	r0, [r7, #12]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c66:	461a      	mov	r2, r3
 8004c68:	f000 fad0 	bl	800520c <dhcp_option_short>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004c70:	89b8      	ldrh	r0, [r7, #12]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004c78:	2303      	movs	r3, #3
 8004c7a:	2237      	movs	r2, #55	; 0x37
 8004c7c:	f000 fa6c 	bl	8005158 <dhcp_option>
 8004c80:	4603      	mov	r3, r0
 8004c82:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8004c84:	2300      	movs	r3, #0
 8004c86:	77bb      	strb	r3, [r7, #30]
 8004c88:	e00e      	b.n	8004ca8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8004c8a:	89b8      	ldrh	r0, [r7, #12]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004c92:	7fbb      	ldrb	r3, [r7, #30]
 8004c94:	4a2a      	ldr	r2, [pc, #168]	; (8004d40 <dhcp_renew+0x12c>)
 8004c96:	5cd3      	ldrb	r3, [r2, r3]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f000 fa91 	bl	80051c0 <dhcp_option_byte>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8004ca2:	7fbb      	ldrb	r3, [r7, #30]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	77bb      	strb	r3, [r7, #30]
 8004ca8:	7fbb      	ldrb	r3, [r7, #30]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d9ed      	bls.n	8004c8a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8004cae:	89b8      	ldrh	r0, [r7, #12]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	33f0      	adds	r3, #240	; 0xf0
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f000 ff94 	bl	8005be4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8004cbc:	4b21      	ldr	r3, [pc, #132]	; (8004d44 <dhcp_renew+0x130>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f103 0218 	add.w	r2, r3, #24
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2343      	movs	r3, #67	; 0x43
 8004ccc:	6979      	ldr	r1, [r7, #20]
 8004cce:	f00b fa53 	bl	8010178 <udp_sendto_if>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f004 fc4a 	bl	8009570 <pbuf_free>
 8004cdc:	e001      	b.n	8004ce2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8004cde:	23ff      	movs	r3, #255	; 0xff
 8004ce0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	799b      	ldrb	r3, [r3, #6]
 8004ce6:	2bff      	cmp	r3, #255	; 0xff
 8004ce8:	d005      	beq.n	8004cf6 <dhcp_renew+0xe2>
    dhcp->tries++;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	799b      	ldrb	r3, [r3, #6]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	799b      	ldrb	r3, [r3, #6]
 8004cfa:	2b09      	cmp	r3, #9
 8004cfc:	d80a      	bhi.n	8004d14 <dhcp_renew+0x100>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	799b      	ldrb	r3, [r3, #6]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	0152      	lsls	r2, r2, #5
 8004d08:	1ad2      	subs	r2, r2, r3
 8004d0a:	0092      	lsls	r2, r2, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	e001      	b.n	8004d18 <dhcp_renew+0x104>
 8004d14:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004d18:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8004d1a:	89fb      	ldrh	r3, [r7, #14]
 8004d1c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004d20:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <dhcp_renew+0x134>)
 8004d22:	fb82 1203 	smull	r1, r2, r2, r3
 8004d26:	1152      	asrs	r2, r2, #5
 8004d28:	17db      	asrs	r3, r3, #31
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8004d32:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	2000000c 	.word	0x2000000c
 8004d44:	200004e0 	.word	0x200004e0
 8004d48:	10624dd3 	.word	0x10624dd3

08004d4c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08a      	sub	sp, #40	; 0x28
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8004d5a:	2104      	movs	r1, #4
 8004d5c:	69b8      	ldr	r0, [r7, #24]
 8004d5e:	f000 f9e1 	bl	8005124 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8004d62:	f107 030c 	add.w	r3, r7, #12
 8004d66:	2203      	movs	r2, #3
 8004d68:	69b9      	ldr	r1, [r7, #24]
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fe64 	bl	8005a38 <dhcp_create_msg>
 8004d70:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d04c      	beq.n	8004e12 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004d7e:	89b8      	ldrh	r0, [r7, #12]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004d86:	2302      	movs	r3, #2
 8004d88:	2239      	movs	r2, #57	; 0x39
 8004d8a:	f000 f9e5 	bl	8005158 <dhcp_option>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8004d92:	89b8      	ldrh	r0, [r7, #12]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f000 fa34 	bl	800520c <dhcp_option_short>
 8004da4:	4603      	mov	r3, r0
 8004da6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004da8:	89b8      	ldrh	r0, [r7, #12]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004db0:	2303      	movs	r3, #3
 8004db2:	2237      	movs	r2, #55	; 0x37
 8004db4:	f000 f9d0 	bl	8005158 <dhcp_option>
 8004db8:	4603      	mov	r3, r0
 8004dba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	77bb      	strb	r3, [r7, #30]
 8004dc0:	e00e      	b.n	8004de0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8004dc2:	89b8      	ldrh	r0, [r7, #12]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004dca:	7fbb      	ldrb	r3, [r7, #30]
 8004dcc:	4a29      	ldr	r2, [pc, #164]	; (8004e74 <dhcp_rebind+0x128>)
 8004dce:	5cd3      	ldrb	r3, [r2, r3]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f000 f9f5 	bl	80051c0 <dhcp_option_byte>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8004dda:	7fbb      	ldrb	r3, [r7, #30]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	77bb      	strb	r3, [r7, #30]
 8004de0:	7fbb      	ldrb	r3, [r7, #30]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d9ed      	bls.n	8004dc2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8004de6:	89b8      	ldrh	r0, [r7, #12]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	33f0      	adds	r3, #240	; 0xf0
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4619      	mov	r1, r3
 8004df0:	f000 fef8 	bl	8005be4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8004df4:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <dhcp_rebind+0x12c>)
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2343      	movs	r3, #67	; 0x43
 8004dfe:	4a1f      	ldr	r2, [pc, #124]	; (8004e7c <dhcp_rebind+0x130>)
 8004e00:	6979      	ldr	r1, [r7, #20]
 8004e02:	f00b f9b9 	bl	8010178 <udp_sendto_if>
 8004e06:	4603      	mov	r3, r0
 8004e08:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8004e0a:	6978      	ldr	r0, [r7, #20]
 8004e0c:	f004 fbb0 	bl	8009570 <pbuf_free>
 8004e10:	e001      	b.n	8004e16 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8004e12:	23ff      	movs	r3, #255	; 0xff
 8004e14:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	799b      	ldrb	r3, [r3, #6]
 8004e1a:	2bff      	cmp	r3, #255	; 0xff
 8004e1c:	d005      	beq.n	8004e2a <dhcp_rebind+0xde>
    dhcp->tries++;
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	799b      	ldrb	r3, [r3, #6]
 8004e22:	3301      	adds	r3, #1
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	799b      	ldrb	r3, [r3, #6]
 8004e2e:	2b09      	cmp	r3, #9
 8004e30:	d80a      	bhi.n	8004e48 <dhcp_rebind+0xfc>
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	799b      	ldrb	r3, [r3, #6]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	0152      	lsls	r2, r2, #5
 8004e3c:	1ad2      	subs	r2, r2, r3
 8004e3e:	0092      	lsls	r2, r2, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	e001      	b.n	8004e4c <dhcp_rebind+0x100>
 8004e48:	f242 7310 	movw	r3, #10000	; 0x2710
 8004e4c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8004e4e:	89fb      	ldrh	r3, [r7, #14]
 8004e50:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004e54:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <dhcp_rebind+0x134>)
 8004e56:	fb82 1203 	smull	r1, r2, r2, r3
 8004e5a:	1152      	asrs	r2, r2, #5
 8004e5c:	17db      	asrs	r3, r3, #31
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8004e66:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	2000000c 	.word	0x2000000c
 8004e78:	200004e0 	.word	0x200004e0
 8004e7c:	08014ab0 	.word	0x08014ab0
 8004e80:	10624dd3 	.word	0x10624dd3

08004e84 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8004e84:	b5b0      	push	{r4, r5, r7, lr}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8004e92:	2103      	movs	r1, #3
 8004e94:	69b8      	ldr	r0, [r7, #24]
 8004e96:	f000 f945 	bl	8005124 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8004e9a:	f107 030c 	add.w	r3, r7, #12
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	69b9      	ldr	r1, [r7, #24]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fdc8 	bl	8005a38 <dhcp_create_msg>
 8004ea8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d066      	beq.n	8004f7e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004eb6:	89b8      	ldrh	r0, [r7, #12]
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	2239      	movs	r2, #57	; 0x39
 8004ec2:	f000 f949 	bl	8005158 <dhcp_option>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8004eca:	89b8      	ldrh	r0, [r7, #12]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	33f0      	adds	r3, #240	; 0xf0
 8004ed0:	f44f 7210 	mov.w	r2, #576	; 0x240
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f000 f999 	bl	800520c <dhcp_option_short>
 8004eda:	4603      	mov	r3, r0
 8004edc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8004ede:	89b8      	ldrh	r0, [r7, #12]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004ee6:	2304      	movs	r3, #4
 8004ee8:	2232      	movs	r2, #50	; 0x32
 8004eea:	f000 f935 	bl	8005158 <dhcp_option>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004ef2:	89bc      	ldrh	r4, [r7, #12]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff f809 	bl	8003f16 <lwip_htonl>
 8004f04:	4603      	mov	r3, r0
 8004f06:	461a      	mov	r2, r3
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f000 f9b0 	bl	8005270 <dhcp_option_long>
 8004f10:	4603      	mov	r3, r0
 8004f12:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004f14:	89b8      	ldrh	r0, [r7, #12]
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	2237      	movs	r2, #55	; 0x37
 8004f20:	f000 f91a 	bl	8005158 <dhcp_option>
 8004f24:	4603      	mov	r3, r0
 8004f26:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8004f28:	2300      	movs	r3, #0
 8004f2a:	77bb      	strb	r3, [r7, #30]
 8004f2c:	e00e      	b.n	8004f4c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8004f2e:	89b8      	ldrh	r0, [r7, #12]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004f36:	7fbb      	ldrb	r3, [r7, #30]
 8004f38:	4a29      	ldr	r2, [pc, #164]	; (8004fe0 <dhcp_reboot+0x15c>)
 8004f3a:	5cd3      	ldrb	r3, [r2, r3]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f000 f93f 	bl	80051c0 <dhcp_option_byte>
 8004f42:	4603      	mov	r3, r0
 8004f44:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8004f46:	7fbb      	ldrb	r3, [r7, #30]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	77bb      	strb	r3, [r7, #30]
 8004f4c:	7fbb      	ldrb	r3, [r7, #30]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d9ed      	bls.n	8004f2e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8004f52:	89b8      	ldrh	r0, [r7, #12]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	33f0      	adds	r3, #240	; 0xf0
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	f000 fe42 	bl	8005be4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8004f60:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <dhcp_reboot+0x160>)
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	2343      	movs	r3, #67	; 0x43
 8004f6a:	4a1f      	ldr	r2, [pc, #124]	; (8004fe8 <dhcp_reboot+0x164>)
 8004f6c:	6979      	ldr	r1, [r7, #20]
 8004f6e:	f00b f903 	bl	8010178 <udp_sendto_if>
 8004f72:	4603      	mov	r3, r0
 8004f74:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8004f76:	6978      	ldr	r0, [r7, #20]
 8004f78:	f004 fafa 	bl	8009570 <pbuf_free>
 8004f7c:	e001      	b.n	8004f82 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8004f7e:	23ff      	movs	r3, #255	; 0xff
 8004f80:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	799b      	ldrb	r3, [r3, #6]
 8004f86:	2bff      	cmp	r3, #255	; 0xff
 8004f88:	d005      	beq.n	8004f96 <dhcp_reboot+0x112>
    dhcp->tries++;
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	799b      	ldrb	r3, [r3, #6]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	799b      	ldrb	r3, [r3, #6]
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	d80a      	bhi.n	8004fb4 <dhcp_reboot+0x130>
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	799b      	ldrb	r3, [r3, #6]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	0152      	lsls	r2, r2, #5
 8004fa8:	1ad2      	subs	r2, r2, r3
 8004faa:	0092      	lsls	r2, r2, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	e001      	b.n	8004fb8 <dhcp_reboot+0x134>
 8004fb4:	f242 7310 	movw	r3, #10000	; 0x2710
 8004fb8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8004fba:	89fb      	ldrh	r3, [r7, #14]
 8004fbc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004fc0:	4a0a      	ldr	r2, [pc, #40]	; (8004fec <dhcp_reboot+0x168>)
 8004fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8004fc6:	1152      	asrs	r2, r2, #5
 8004fc8:	17db      	asrs	r3, r3, #31
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8004fd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	2000000c 	.word	0x2000000c
 8004fe4:	200004e0 	.word	0x200004e0
 8004fe8:	08014ab0 	.word	0x08014ab0
 8004fec:	10624dd3 	.word	0x10624dd3

08004ff0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8004ff0:	b5b0      	push	{r4, r5, r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8084 	beq.w	800510e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	795b      	ldrb	r3, [r3, #5]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8081 	beq.w	8005112 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2200      	movs	r2, #0
 800501a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	2200      	movs	r2, #0
 8005020:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	2200      	movs	r2, #0
 8005026:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2200      	movs	r2, #0
 800502c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	; 0x30
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	2200      	movs	r2, #0
 8005048:	829a      	strh	r2, [r3, #20]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	8a9a      	ldrh	r2, [r3, #20]
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	825a      	strh	r2, [r3, #18]
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	8a5a      	ldrh	r2, [r3, #18]
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	821a      	strh	r2, [r3, #16]
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	8a1a      	ldrh	r2, [r3, #16]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fdec 	bl	8005c40 <dhcp_supplied_address>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d03b      	beq.n	80050e6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800506e:	f107 030e 	add.w	r3, r7, #14
 8005072:	2207      	movs	r2, #7
 8005074:	69f9      	ldr	r1, [r7, #28]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fcde 	bl	8005a38 <dhcp_create_msg>
 800507c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d030      	beq.n	80050e6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800508a:	89f8      	ldrh	r0, [r7, #14]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8005092:	2304      	movs	r3, #4
 8005094:	2236      	movs	r2, #54	; 0x36
 8005096:	f000 f85f 	bl	8005158 <dhcp_option>
 800509a:	4603      	mov	r3, r0
 800509c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800509e:	89fc      	ldrh	r4, [r7, #14]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fe ff34 	bl	8003f16 <lwip_htonl>
 80050ae:	4603      	mov	r3, r0
 80050b0:	461a      	mov	r2, r3
 80050b2:	4629      	mov	r1, r5
 80050b4:	4620      	mov	r0, r4
 80050b6:	f000 f8db 	bl	8005270 <dhcp_option_long>
 80050ba:	4603      	mov	r3, r0
 80050bc:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80050be:	89f8      	ldrh	r0, [r7, #14]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	33f0      	adds	r3, #240	; 0xf0
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4619      	mov	r1, r3
 80050c8:	f000 fd8c 	bl	8005be4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80050cc:	4b13      	ldr	r3, [pc, #76]	; (800511c <dhcp_release_and_stop+0x12c>)
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	f107 0210 	add.w	r2, r7, #16
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	2343      	movs	r3, #67	; 0x43
 80050da:	69b9      	ldr	r1, [r7, #24]
 80050dc:	f00b f84c 	bl	8010178 <udp_sendto_if>
      pbuf_free(p_out);
 80050e0:	69b8      	ldr	r0, [r7, #24]
 80050e2:	f004 fa45 	bl	8009570 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80050e6:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <dhcp_release_and_stop+0x130>)
 80050e8:	4a0d      	ldr	r2, [pc, #52]	; (8005120 <dhcp_release_and_stop+0x130>)
 80050ea:	490d      	ldr	r1, [pc, #52]	; (8005120 <dhcp_release_and_stop+0x130>)
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f003 fdc9 	bl	8008c84 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80050f2:	2100      	movs	r1, #0
 80050f4:	69f8      	ldr	r0, [r7, #28]
 80050f6:	f000 f815 	bl	8005124 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	791b      	ldrb	r3, [r3, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d008      	beq.n	8005114 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8005102:	f7fe ffbf 	bl	8004084 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	2200      	movs	r2, #0
 800510a:	711a      	strb	r2, [r3, #4]
 800510c:	e002      	b.n	8005114 <dhcp_release_and_stop+0x124>
    return;
 800510e:	bf00      	nop
 8005110:	e000      	b.n	8005114 <dhcp_release_and_stop+0x124>
    return;
 8005112:	bf00      	nop
  }
}
 8005114:	3720      	adds	r7, #32
 8005116:	46bd      	mov	sp, r7
 8005118:	bdb0      	pop	{r4, r5, r7, pc}
 800511a:	bf00      	nop
 800511c:	200004e0 	.word	0x200004e0
 8005120:	08014aac 	.word	0x08014aac

08005124 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	795b      	ldrb	r3, [r3, #5]
 8005134:	78fa      	ldrb	r2, [r7, #3]
 8005136:	429a      	cmp	r2, r3
 8005138:	d008      	beq.n	800514c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	78fa      	ldrb	r2, [r7, #3]
 800513e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	811a      	strh	r2, [r3, #8]
  }
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6039      	str	r1, [r7, #0]
 8005160:	4611      	mov	r1, r2
 8005162:	461a      	mov	r2, r3
 8005164:	4603      	mov	r3, r0
 8005166:	80fb      	strh	r3, [r7, #6]
 8005168:	460b      	mov	r3, r1
 800516a:	717b      	strb	r3, [r7, #5]
 800516c:	4613      	mov	r3, r2
 800516e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8005170:	88fa      	ldrh	r2, [r7, #6]
 8005172:	793b      	ldrb	r3, [r7, #4]
 8005174:	4413      	add	r3, r2
 8005176:	3302      	adds	r3, #2
 8005178:	2b44      	cmp	r3, #68	; 0x44
 800517a:	d906      	bls.n	800518a <dhcp_option+0x32>
 800517c:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <dhcp_option+0x5c>)
 800517e:	f240 529a 	movw	r2, #1434	; 0x59a
 8005182:	490d      	ldr	r1, [pc, #52]	; (80051b8 <dhcp_option+0x60>)
 8005184:	480d      	ldr	r0, [pc, #52]	; (80051bc <dhcp_option+0x64>)
 8005186:	f00b fc39 	bl	80109fc <iprintf>
  options[options_out_len++] = option_type;
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	80fa      	strh	r2, [r7, #6]
 8005190:	461a      	mov	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	4413      	add	r3, r2
 8005196:	797a      	ldrb	r2, [r7, #5]
 8005198:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800519a:	88fb      	ldrh	r3, [r7, #6]
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	80fa      	strh	r2, [r7, #6]
 80051a0:	461a      	mov	r2, r3
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	4413      	add	r3, r2
 80051a6:	793a      	ldrb	r2, [r7, #4]
 80051a8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80051aa:	88fb      	ldrh	r3, [r7, #6]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	08011b3c 	.word	0x08011b3c
 80051b8:	08011cd0 	.word	0x08011cd0
 80051bc:	08011b9c 	.word	0x08011b9c

080051c0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	6039      	str	r1, [r7, #0]
 80051ca:	80fb      	strh	r3, [r7, #6]
 80051cc:	4613      	mov	r3, r2
 80051ce:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	2b43      	cmp	r3, #67	; 0x43
 80051d4:	d906      	bls.n	80051e4 <dhcp_option_byte+0x24>
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <dhcp_option_byte+0x40>)
 80051d8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80051dc:	4909      	ldr	r1, [pc, #36]	; (8005204 <dhcp_option_byte+0x44>)
 80051de:	480a      	ldr	r0, [pc, #40]	; (8005208 <dhcp_option_byte+0x48>)
 80051e0:	f00b fc0c 	bl	80109fc <iprintf>
  options[options_out_len++] = value;
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	80fa      	strh	r2, [r7, #6]
 80051ea:	461a      	mov	r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	4413      	add	r3, r2
 80051f0:	797a      	ldrb	r2, [r7, #5]
 80051f2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80051f4:	88fb      	ldrh	r3, [r7, #6]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	08011b3c 	.word	0x08011b3c
 8005204:	08011d14 	.word	0x08011d14
 8005208:	08011b9c 	.word	0x08011b9c

0800520c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	6039      	str	r1, [r7, #0]
 8005216:	80fb      	strh	r3, [r7, #6]
 8005218:	4613      	mov	r3, r2
 800521a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	3302      	adds	r3, #2
 8005220:	2b44      	cmp	r3, #68	; 0x44
 8005222:	d906      	bls.n	8005232 <dhcp_option_short+0x26>
 8005224:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <dhcp_option_short+0x58>)
 8005226:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800522a:	490f      	ldr	r1, [pc, #60]	; (8005268 <dhcp_option_short+0x5c>)
 800522c:	480f      	ldr	r0, [pc, #60]	; (800526c <dhcp_option_short+0x60>)
 800522e:	f00b fbe5 	bl	80109fc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	80fa      	strh	r2, [r7, #6]
 8005238:	461a      	mov	r2, r3
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	4413      	add	r3, r2
 800523e:	88ba      	ldrh	r2, [r7, #4]
 8005240:	0a12      	lsrs	r2, r2, #8
 8005242:	b292      	uxth	r2, r2
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	80fa      	strh	r2, [r7, #6]
 800524e:	461a      	mov	r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	4413      	add	r3, r2
 8005254:	88ba      	ldrh	r2, [r7, #4]
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800525a:	88fb      	ldrh	r3, [r7, #6]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	08011b3c 	.word	0x08011b3c
 8005268:	08011d4c 	.word	0x08011d4c
 800526c:	08011b9c 	.word	0x08011b9c

08005270 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800527e:	89fb      	ldrh	r3, [r7, #14]
 8005280:	3304      	adds	r3, #4
 8005282:	2b44      	cmp	r3, #68	; 0x44
 8005284:	d906      	bls.n	8005294 <dhcp_option_long+0x24>
 8005286:	4b19      	ldr	r3, [pc, #100]	; (80052ec <dhcp_option_long+0x7c>)
 8005288:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800528c:	4918      	ldr	r1, [pc, #96]	; (80052f0 <dhcp_option_long+0x80>)
 800528e:	4819      	ldr	r0, [pc, #100]	; (80052f4 <dhcp_option_long+0x84>)
 8005290:	f00b fbb4 	bl	80109fc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8005294:	89fb      	ldrh	r3, [r7, #14]
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	81fa      	strh	r2, [r7, #14]
 800529a:	461a      	mov	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4413      	add	r3, r2
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	0e12      	lsrs	r2, r2, #24
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80052a8:	89fb      	ldrh	r3, [r7, #14]
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	81fa      	strh	r2, [r7, #14]
 80052ae:	461a      	mov	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4413      	add	r3, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	0c12      	lsrs	r2, r2, #16
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80052bc:	89fb      	ldrh	r3, [r7, #14]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	81fa      	strh	r2, [r7, #14]
 80052c2:	461a      	mov	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4413      	add	r3, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	0a12      	lsrs	r2, r2, #8
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80052d0:	89fb      	ldrh	r3, [r7, #14]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	81fa      	strh	r2, [r7, #14]
 80052d6:	461a      	mov	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4413      	add	r3, r2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80052e2:	89fb      	ldrh	r3, [r7, #14]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	08011b3c 	.word	0x08011b3c
 80052f0:	08011d88 	.word	0x08011d88
 80052f4:	08011b9c 	.word	0x08011b9c

080052f8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b090      	sub	sp, #64	; 0x40
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800530a:	2208      	movs	r2, #8
 800530c:	2100      	movs	r1, #0
 800530e:	48be      	ldr	r0, [pc, #760]	; (8005608 <dhcp_parse_reply+0x310>)
 8005310:	f00b fb6c 	bl	80109ec <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	895b      	ldrh	r3, [r3, #10]
 8005318:	2b2b      	cmp	r3, #43	; 0x2b
 800531a:	d802      	bhi.n	8005322 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800531c:	f06f 0301 	mvn.w	r3, #1
 8005320:	e2ab      	b.n	800587a <dhcp_parse_reply+0x582>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8005328:	23f0      	movs	r3, #240	; 0xf0
 800532a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	891b      	ldrh	r3, [r3, #8]
 8005330:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8005336:	e00c      	b.n	8005352 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	895b      	ldrh	r3, [r3, #10]
 800533c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	895b      	ldrh	r3, [r3, #10]
 8005346:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <dhcp_parse_reply+0x6a>
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	895b      	ldrh	r3, [r3, #10]
 800535c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800535e:	429a      	cmp	r2, r3
 8005360:	d2ea      	bcs.n	8005338 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8005368:	f06f 0301 	mvn.w	r3, #1
 800536c:	e285      	b.n	800587a <dhcp_parse_reply+0x582>
  }
  offset = options_idx;
 800536e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005370:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8005372:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005374:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800537c:	e23d      	b.n	80057fa <dhcp_parse_reply+0x502>
    u8_t op = options[offset];
 800537e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005382:	4413      	add	r3, r2
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800538e:	f04f 33ff 	mov.w	r3, #4294967295
 8005392:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8005394:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005396:	3302      	adds	r3, #2
 8005398:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800539a:	8bfa      	ldrh	r2, [r7, #30]
 800539c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800539e:	429a      	cmp	r2, r3
 80053a0:	d202      	bcs.n	80053a8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80053a2:	f06f 0301 	mvn.w	r3, #1
 80053a6:	e268      	b.n	800587a <dhcp_parse_reply+0x582>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80053a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80053aa:	3301      	adds	r3, #1
 80053ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ae:	8952      	ldrh	r2, [r2, #10]
 80053b0:	4293      	cmp	r3, r2
 80053b2:	da07      	bge.n	80053c4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80053b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80053b6:	3301      	adds	r3, #1
 80053b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053ba:	4413      	add	r3, r2
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80053c2:	e00b      	b.n	80053dc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <dhcp_parse_reply+0xde>
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	e000      	b.n	80053d8 <dhcp_parse_reply+0xe0>
 80053d6:	2300      	movs	r3, #0
 80053d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80053dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
 80053e6:	2b3b      	cmp	r3, #59	; 0x3b
 80053e8:	f200 812d 	bhi.w	8005646 <dhcp_parse_reply+0x34e>
 80053ec:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <dhcp_parse_reply+0xfc>)
 80053ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f2:	bf00      	nop
 80053f4:	080054e5 	.word	0x080054e5
 80053f8:	080054f5 	.word	0x080054f5
 80053fc:	08005647 	.word	0x08005647
 8005400:	08005517 	.word	0x08005517
 8005404:	08005647 	.word	0x08005647
 8005408:	08005647 	.word	0x08005647
 800540c:	08005647 	.word	0x08005647
 8005410:	08005647 	.word	0x08005647
 8005414:	08005647 	.word	0x08005647
 8005418:	08005647 	.word	0x08005647
 800541c:	08005647 	.word	0x08005647
 8005420:	08005647 	.word	0x08005647
 8005424:	08005647 	.word	0x08005647
 8005428:	08005647 	.word	0x08005647
 800542c:	08005647 	.word	0x08005647
 8005430:	08005647 	.word	0x08005647
 8005434:	08005647 	.word	0x08005647
 8005438:	08005647 	.word	0x08005647
 800543c:	08005647 	.word	0x08005647
 8005440:	08005647 	.word	0x08005647
 8005444:	08005647 	.word	0x08005647
 8005448:	08005647 	.word	0x08005647
 800544c:	08005647 	.word	0x08005647
 8005450:	08005647 	.word	0x08005647
 8005454:	08005647 	.word	0x08005647
 8005458:	08005647 	.word	0x08005647
 800545c:	08005647 	.word	0x08005647
 8005460:	08005647 	.word	0x08005647
 8005464:	08005647 	.word	0x08005647
 8005468:	08005647 	.word	0x08005647
 800546c:	08005647 	.word	0x08005647
 8005470:	08005647 	.word	0x08005647
 8005474:	08005647 	.word	0x08005647
 8005478:	08005647 	.word	0x08005647
 800547c:	08005647 	.word	0x08005647
 8005480:	08005647 	.word	0x08005647
 8005484:	08005647 	.word	0x08005647
 8005488:	08005647 	.word	0x08005647
 800548c:	08005647 	.word	0x08005647
 8005490:	08005647 	.word	0x08005647
 8005494:	08005647 	.word	0x08005647
 8005498:	08005647 	.word	0x08005647
 800549c:	08005647 	.word	0x08005647
 80054a0:	08005647 	.word	0x08005647
 80054a4:	08005647 	.word	0x08005647
 80054a8:	08005647 	.word	0x08005647
 80054ac:	08005647 	.word	0x08005647
 80054b0:	08005647 	.word	0x08005647
 80054b4:	08005647 	.word	0x08005647
 80054b8:	08005647 	.word	0x08005647
 80054bc:	08005647 	.word	0x08005647
 80054c0:	08005543 	.word	0x08005543
 80054c4:	08005565 	.word	0x08005565
 80054c8:	080055a1 	.word	0x080055a1
 80054cc:	080055c3 	.word	0x080055c3
 80054d0:	08005647 	.word	0x08005647
 80054d4:	08005647 	.word	0x08005647
 80054d8:	08005647 	.word	0x08005647
 80054dc:	080055e5 	.word	0x080055e5
 80054e0:	08005625 	.word	0x08005625
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80054ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80054f2:	e0ac      	b.n	800564e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80054f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d009      	beq.n	8005510 <dhcp_parse_reply+0x218>
 80054fc:	4b43      	ldr	r3, [pc, #268]	; (800560c <dhcp_parse_reply+0x314>)
 80054fe:	f240 622e 	movw	r2, #1582	; 0x62e
 8005502:	4943      	ldr	r1, [pc, #268]	; (8005610 <dhcp_parse_reply+0x318>)
 8005504:	4843      	ldr	r0, [pc, #268]	; (8005614 <dhcp_parse_reply+0x31c>)
 8005506:	f00b fa79 	bl	80109fc <iprintf>
 800550a:	f06f 0305 	mvn.w	r3, #5
 800550e:	e1b4      	b.n	800587a <dhcp_parse_reply+0x582>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8005510:	2306      	movs	r3, #6
 8005512:	623b      	str	r3, [r7, #32]
        break;
 8005514:	e09b      	b.n	800564e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8005516:	2304      	movs	r3, #4
 8005518:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800551c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005520:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005524:	429a      	cmp	r2, r3
 8005526:	d209      	bcs.n	800553c <dhcp_parse_reply+0x244>
 8005528:	4b38      	ldr	r3, [pc, #224]	; (800560c <dhcp_parse_reply+0x314>)
 800552a:	f240 6233 	movw	r2, #1587	; 0x633
 800552e:	493a      	ldr	r1, [pc, #232]	; (8005618 <dhcp_parse_reply+0x320>)
 8005530:	4838      	ldr	r0, [pc, #224]	; (8005614 <dhcp_parse_reply+0x31c>)
 8005532:	f00b fa63 	bl	80109fc <iprintf>
 8005536:	f06f 0305 	mvn.w	r3, #5
 800553a:	e19e      	b.n	800587a <dhcp_parse_reply+0x582>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800553c:	2307      	movs	r3, #7
 800553e:	623b      	str	r3, [r7, #32]
        break;
 8005540:	e085      	b.n	800564e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005546:	2b04      	cmp	r3, #4
 8005548:	d009      	beq.n	800555e <dhcp_parse_reply+0x266>
 800554a:	4b30      	ldr	r3, [pc, #192]	; (800560c <dhcp_parse_reply+0x314>)
 800554c:	f240 6241 	movw	r2, #1601	; 0x641
 8005550:	492f      	ldr	r1, [pc, #188]	; (8005610 <dhcp_parse_reply+0x318>)
 8005552:	4830      	ldr	r0, [pc, #192]	; (8005614 <dhcp_parse_reply+0x31c>)
 8005554:	f00b fa52 	bl	80109fc <iprintf>
 8005558:	f06f 0305 	mvn.w	r3, #5
 800555c:	e18d      	b.n	800587a <dhcp_parse_reply+0x582>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800555e:	2303      	movs	r3, #3
 8005560:	623b      	str	r3, [r7, #32]
        break;
 8005562:	e074      	b.n	800564e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8005564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005568:	2b01      	cmp	r3, #1
 800556a:	d009      	beq.n	8005580 <dhcp_parse_reply+0x288>
 800556c:	4b27      	ldr	r3, [pc, #156]	; (800560c <dhcp_parse_reply+0x314>)
 800556e:	f240 624f 	movw	r2, #1615	; 0x64f
 8005572:	492a      	ldr	r1, [pc, #168]	; (800561c <dhcp_parse_reply+0x324>)
 8005574:	4827      	ldr	r0, [pc, #156]	; (8005614 <dhcp_parse_reply+0x31c>)
 8005576:	f00b fa41 	bl	80109fc <iprintf>
 800557a:	f06f 0305 	mvn.w	r3, #5
 800557e:	e17c      	b.n	800587a <dhcp_parse_reply+0x582>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8005580:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005582:	2bf0      	cmp	r3, #240	; 0xf0
 8005584:	d009      	beq.n	800559a <dhcp_parse_reply+0x2a2>
 8005586:	4b21      	ldr	r3, [pc, #132]	; (800560c <dhcp_parse_reply+0x314>)
 8005588:	f240 6251 	movw	r2, #1617	; 0x651
 800558c:	4924      	ldr	r1, [pc, #144]	; (8005620 <dhcp_parse_reply+0x328>)
 800558e:	4821      	ldr	r0, [pc, #132]	; (8005614 <dhcp_parse_reply+0x31c>)
 8005590:	f00b fa34 	bl	80109fc <iprintf>
 8005594:	f06f 0305 	mvn.w	r3, #5
 8005598:	e16f      	b.n	800587a <dhcp_parse_reply+0x582>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800559a:	2300      	movs	r3, #0
 800559c:	623b      	str	r3, [r7, #32]
        break;
 800559e:	e056      	b.n	800564e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80055a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d009      	beq.n	80055bc <dhcp_parse_reply+0x2c4>
 80055a8:	4b18      	ldr	r3, [pc, #96]	; (800560c <dhcp_parse_reply+0x314>)
 80055aa:	f240 6255 	movw	r2, #1621	; 0x655
 80055ae:	491b      	ldr	r1, [pc, #108]	; (800561c <dhcp_parse_reply+0x324>)
 80055b0:	4818      	ldr	r0, [pc, #96]	; (8005614 <dhcp_parse_reply+0x31c>)
 80055b2:	f00b fa23 	bl	80109fc <iprintf>
 80055b6:	f06f 0305 	mvn.w	r3, #5
 80055ba:	e15e      	b.n	800587a <dhcp_parse_reply+0x582>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80055bc:	2301      	movs	r3, #1
 80055be:	623b      	str	r3, [r7, #32]
        break;
 80055c0:	e045      	b.n	800564e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80055c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d009      	beq.n	80055de <dhcp_parse_reply+0x2e6>
 80055ca:	4b10      	ldr	r3, [pc, #64]	; (800560c <dhcp_parse_reply+0x314>)
 80055cc:	f240 6259 	movw	r2, #1625	; 0x659
 80055d0:	490f      	ldr	r1, [pc, #60]	; (8005610 <dhcp_parse_reply+0x318>)
 80055d2:	4810      	ldr	r0, [pc, #64]	; (8005614 <dhcp_parse_reply+0x31c>)
 80055d4:	f00b fa12 	bl	80109fc <iprintf>
 80055d8:	f06f 0305 	mvn.w	r3, #5
 80055dc:	e14d      	b.n	800587a <dhcp_parse_reply+0x582>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80055de:	2302      	movs	r3, #2
 80055e0:	623b      	str	r3, [r7, #32]
        break;
 80055e2:	e034      	b.n	800564e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80055e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d009      	beq.n	8005600 <dhcp_parse_reply+0x308>
 80055ec:	4b07      	ldr	r3, [pc, #28]	; (800560c <dhcp_parse_reply+0x314>)
 80055ee:	f240 625d 	movw	r2, #1629	; 0x65d
 80055f2:	4907      	ldr	r1, [pc, #28]	; (8005610 <dhcp_parse_reply+0x318>)
 80055f4:	4807      	ldr	r0, [pc, #28]	; (8005614 <dhcp_parse_reply+0x31c>)
 80055f6:	f00b fa01 	bl	80109fc <iprintf>
 80055fa:	f06f 0305 	mvn.w	r3, #5
 80055fe:	e13c      	b.n	800587a <dhcp_parse_reply+0x582>
        decode_idx = DHCP_OPTION_IDX_T1;
 8005600:	2304      	movs	r3, #4
 8005602:	623b      	str	r3, [r7, #32]
        break;
 8005604:	e023      	b.n	800564e <dhcp_parse_reply+0x356>
 8005606:	bf00      	nop
 8005608:	200037ac 	.word	0x200037ac
 800560c:	08011b3c 	.word	0x08011b3c
 8005610:	08011dc4 	.word	0x08011dc4
 8005614:	08011b9c 	.word	0x08011b9c
 8005618:	08011dd0 	.word	0x08011dd0
 800561c:	08011de4 	.word	0x08011de4
 8005620:	08011df0 	.word	0x08011df0
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8005624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005628:	2b04      	cmp	r3, #4
 800562a:	d009      	beq.n	8005640 <dhcp_parse_reply+0x348>
 800562c:	4b95      	ldr	r3, [pc, #596]	; (8005884 <dhcp_parse_reply+0x58c>)
 800562e:	f240 6261 	movw	r2, #1633	; 0x661
 8005632:	4995      	ldr	r1, [pc, #596]	; (8005888 <dhcp_parse_reply+0x590>)
 8005634:	4895      	ldr	r0, [pc, #596]	; (800588c <dhcp_parse_reply+0x594>)
 8005636:	f00b f9e1 	bl	80109fc <iprintf>
 800563a:	f06f 0305 	mvn.w	r3, #5
 800563e:	e11c      	b.n	800587a <dhcp_parse_reply+0x582>
        decode_idx = DHCP_OPTION_IDX_T2;
 8005640:	2305      	movs	r3, #5
 8005642:	623b      	str	r3, [r7, #32]
        break;
 8005644:	e003      	b.n	800564e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800564c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800564e:	7dfb      	ldrb	r3, [r7, #23]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d103      	bne.n	800565c <dhcp_parse_reply+0x364>
      offset++;
 8005654:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005656:	3301      	adds	r3, #1
 8005658:	877b      	strh	r3, [r7, #58]	; 0x3a
 800565a:	e0a4      	b.n	80057a6 <dhcp_parse_reply+0x4ae>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800565c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800565e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005662:	4413      	add	r3, r2
 8005664:	3302      	adds	r3, #2
 8005666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800566a:	db02      	blt.n	8005672 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 800566c:	f06f 0301 	mvn.w	r3, #1
 8005670:	e103      	b.n	800587a <dhcp_parse_reply+0x582>
      }
      offset = (u16_t)(offset + len + 2);
 8005672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005676:	b29a      	uxth	r2, r3
 8005678:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800567a:	4413      	add	r3, r2
 800567c:	b29b      	uxth	r3, r3
 800567e:	3302      	adds	r3, #2
 8005680:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8005682:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 808d 	beq.w	80057a6 <dhcp_parse_reply+0x4ae>
        u32_t value = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	2b00      	cmp	r3, #0
 8005694:	db02      	blt.n	800569c <dhcp_parse_reply+0x3a4>
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	2b07      	cmp	r3, #7
 800569a:	dd06      	ble.n	80056aa <dhcp_parse_reply+0x3b2>
 800569c:	4b79      	ldr	r3, [pc, #484]	; (8005884 <dhcp_parse_reply+0x58c>)
 800569e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80056a2:	497b      	ldr	r1, [pc, #492]	; (8005890 <dhcp_parse_reply+0x598>)
 80056a4:	4879      	ldr	r0, [pc, #484]	; (800588c <dhcp_parse_reply+0x594>)
 80056a6:	f00b f9a9 	bl	80109fc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80056aa:	4a7a      	ldr	r2, [pc, #488]	; (8005894 <dhcp_parse_reply+0x59c>)
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	4413      	add	r3, r2
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d177      	bne.n	80057a6 <dhcp_parse_reply+0x4ae>
          copy_len = LWIP_MIN(decode_len, 4);
 80056b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d803      	bhi.n	80056c6 <dhcp_parse_reply+0x3ce>
 80056be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	e000      	b.n	80056c8 <dhcp_parse_reply+0x3d0>
 80056c6:	2304      	movs	r3, #4
 80056c8:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80056ca:	8bfb      	ldrh	r3, [r7, #30]
 80056cc:	8aba      	ldrh	r2, [r7, #20]
 80056ce:	f107 0108 	add.w	r1, r7, #8
 80056d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056d4:	f004 f946 	bl	8009964 <pbuf_copy_partial>
 80056d8:	4603      	mov	r3, r0
 80056da:	461a      	mov	r2, r3
 80056dc:	8abb      	ldrh	r3, [r7, #20]
 80056de:	4293      	cmp	r3, r2
 80056e0:	d002      	beq.n	80056e8 <dhcp_parse_reply+0x3f0>
            return ERR_BUF;
 80056e2:	f06f 0301 	mvn.w	r3, #1
 80056e6:	e0c8      	b.n	800587a <dhcp_parse_reply+0x582>
          }
          if (decode_len > 4) {
 80056e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d933      	bls.n	8005758 <dhcp_parse_reply+0x460>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80056f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <dhcp_parse_reply+0x41a>
 80056fe:	4b61      	ldr	r3, [pc, #388]	; (8005884 <dhcp_parse_reply+0x58c>)
 8005700:	f240 6281 	movw	r2, #1665	; 0x681
 8005704:	4964      	ldr	r1, [pc, #400]	; (8005898 <dhcp_parse_reply+0x5a0>)
 8005706:	4861      	ldr	r0, [pc, #388]	; (800588c <dhcp_parse_reply+0x594>)
 8005708:	f00b f978 	bl	80109fc <iprintf>
 800570c:	f06f 0305 	mvn.w	r3, #5
 8005710:	e0b3      	b.n	800587a <dhcp_parse_reply+0x582>
            dhcp_got_option(dhcp, decode_idx);
 8005712:	4a60      	ldr	r2, [pc, #384]	; (8005894 <dhcp_parse_reply+0x59c>)
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	4413      	add	r3, r2
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe fbf9 	bl	8003f16 <lwip_htonl>
 8005724:	4601      	mov	r1, r0
 8005726:	4a5d      	ldr	r2, [pc, #372]	; (800589c <dhcp_parse_reply+0x5a4>)
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800572e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005732:	3b04      	subs	r3, #4
 8005734:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8005738:	8bfb      	ldrh	r3, [r7, #30]
 800573a:	3304      	adds	r3, #4
 800573c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800573e:	8a7a      	ldrh	r2, [r7, #18]
 8005740:	8bfb      	ldrh	r3, [r7, #30]
 8005742:	429a      	cmp	r2, r3
 8005744:	d202      	bcs.n	800574c <dhcp_parse_reply+0x454>
              /* overflow */
              return ERR_BUF;
 8005746:	f06f 0301 	mvn.w	r3, #1
 800574a:	e096      	b.n	800587a <dhcp_parse_reply+0x582>
            }
            val_offset = next_val_offset;
 800574c:	8a7b      	ldrh	r3, [r7, #18]
 800574e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	3301      	adds	r3, #1
 8005754:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8005756:	e79b      	b.n	8005690 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8005758:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800575c:	2b04      	cmp	r3, #4
 800575e:	d106      	bne.n	800576e <dhcp_parse_reply+0x476>
            value = lwip_ntohl(value);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fbd7 	bl	8003f16 <lwip_htonl>
 8005768:	4603      	mov	r3, r0
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	e011      	b.n	8005792 <dhcp_parse_reply+0x49a>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800576e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005772:	2b01      	cmp	r3, #1
 8005774:	d009      	beq.n	800578a <dhcp_parse_reply+0x492>
 8005776:	4b43      	ldr	r3, [pc, #268]	; (8005884 <dhcp_parse_reply+0x58c>)
 8005778:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800577c:	4948      	ldr	r1, [pc, #288]	; (80058a0 <dhcp_parse_reply+0x5a8>)
 800577e:	4843      	ldr	r0, [pc, #268]	; (800588c <dhcp_parse_reply+0x594>)
 8005780:	f00b f93c 	bl	80109fc <iprintf>
 8005784:	f06f 0305 	mvn.w	r3, #5
 8005788:	e077      	b.n	800587a <dhcp_parse_reply+0x582>
            value = ((u8_t *)&value)[0];
 800578a:	f107 0308 	add.w	r3, r7, #8
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8005792:	4a40      	ldr	r2, [pc, #256]	; (8005894 <dhcp_parse_reply+0x59c>)
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	4413      	add	r3, r2
 8005798:	2201      	movs	r2, #1
 800579a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	493f      	ldr	r1, [pc, #252]	; (800589c <dhcp_parse_reply+0x5a4>)
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	895b      	ldrh	r3, [r3, #10]
 80057aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d324      	bcc.n	80057fa <dhcp_parse_reply+0x502>
      offset = (u16_t)(offset - q->len);
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	895b      	ldrh	r3, [r3, #10]
 80057b4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	895b      	ldrh	r3, [r3, #10]
 80057be:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80057c4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80057c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d213      	bcs.n	80057f4 <dhcp_parse_reply+0x4fc>
        q = q->next;
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <dhcp_parse_reply+0x4f4>
 80057d8:	4b2a      	ldr	r3, [pc, #168]	; (8005884 <dhcp_parse_reply+0x58c>)
 80057da:	f240 629d 	movw	r2, #1693	; 0x69d
 80057de:	4931      	ldr	r1, [pc, #196]	; (80058a4 <dhcp_parse_reply+0x5ac>)
 80057e0:	482a      	ldr	r0, [pc, #168]	; (800588c <dhcp_parse_reply+0x594>)
 80057e2:	f00b f90b 	bl	80109fc <iprintf>
 80057e6:	f06f 0305 	mvn.w	r3, #5
 80057ea:	e046      	b.n	800587a <dhcp_parse_reply+0x582>
        options = (u8_t *)q->payload;
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f2:	e002      	b.n	80057fa <dhcp_parse_reply+0x502>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80057f4:	f06f 0301 	mvn.w	r3, #1
 80057f8:	e03f      	b.n	800587a <dhcp_parse_reply+0x582>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <dhcp_parse_reply+0x51e>
 8005800:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8005802:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005804:	429a      	cmp	r2, r3
 8005806:	d206      	bcs.n	8005816 <dhcp_parse_reply+0x51e>
 8005808:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800580a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800580c:	4413      	add	r3, r2
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2bff      	cmp	r3, #255	; 0xff
 8005812:	f47f adb4 	bne.w	800537e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8005816:	4b1f      	ldr	r3, [pc, #124]	; (8005894 <dhcp_parse_reply+0x59c>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d018      	beq.n	8005850 <dhcp_parse_reply+0x558>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800581e:	4b1f      	ldr	r3, [pc, #124]	; (800589c <dhcp_parse_reply+0x5a4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8005824:	4b1b      	ldr	r3, [pc, #108]	; (8005894 <dhcp_parse_reply+0x59c>)
 8005826:	2200      	movs	r2, #0
 8005828:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d102      	bne.n	8005836 <dhcp_parse_reply+0x53e>
      parse_file_as_options = 1;
 8005830:	2301      	movs	r3, #1
 8005832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005834:	e00c      	b.n	8005850 <dhcp_parse_reply+0x558>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d102      	bne.n	8005842 <dhcp_parse_reply+0x54a>
      parse_sname_as_options = 1;
 800583c:	2301      	movs	r3, #1
 800583e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005840:	e006      	b.n	8005850 <dhcp_parse_reply+0x558>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b03      	cmp	r3, #3
 8005846:	d103      	bne.n	8005850 <dhcp_parse_reply+0x558>
      parse_sname_as_options = 1;
 8005848:	2301      	movs	r3, #1
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800584c:	2301      	movs	r3, #1
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8005850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <dhcp_parse_reply+0x56c>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800585a:	236c      	movs	r3, #108	; 0x6c
 800585c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800585e:	23ec      	movs	r3, #236	; 0xec
 8005860:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8005862:	e566      	b.n	8005332 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	2b00      	cmp	r3, #0
 8005868:	d006      	beq.n	8005878 <dhcp_parse_reply+0x580>
    parse_sname_as_options = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800586e:	232c      	movs	r3, #44	; 0x2c
 8005870:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8005872:	236c      	movs	r3, #108	; 0x6c
 8005874:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8005876:	e55c      	b.n	8005332 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3740      	adds	r7, #64	; 0x40
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	08011b3c 	.word	0x08011b3c
 8005888:	08011dc4 	.word	0x08011dc4
 800588c:	08011b9c 	.word	0x08011b9c
 8005890:	08011e08 	.word	0x08011e08
 8005894:	200037ac 	.word	0x200037ac
 8005898:	08011e1c 	.word	0x08011e1c
 800589c:	200037b4 	.word	0x200037b4
 80058a0:	08011e34 	.word	0x08011e34
 80058a4:	08011e48 	.word	0x08011e48

080058a8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80058b6:	4b5d      	ldr	r3, [pc, #372]	; (8005a2c <dhcp_recv+0x184>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80a7 	beq.w	8005a1e <dhcp_recv+0x176>
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	791b      	ldrb	r3, [r3, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 80a2 	beq.w	8005a1e <dhcp_recv+0x176>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	895b      	ldrh	r3, [r3, #10]
 80058de:	2b2b      	cmp	r3, #43	; 0x2b
 80058e0:	f240 8092 	bls.w	8005a08 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	f040 808f 	bne.w	8005a0c <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80058ee:	2300      	movs	r3, #0
 80058f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058f4:	e011      	b.n	800591a <dhcp_recv+0x72>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80058f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058fa:	6a3a      	ldr	r2, [r7, #32]
 80058fc:	4413      	add	r3, r2
 80058fe:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005906:	69b9      	ldr	r1, [r7, #24]
 8005908:	440b      	add	r3, r1
 800590a:	7f1b      	ldrb	r3, [r3, #28]
 800590c:	429a      	cmp	r2, r3
 800590e:	d17f      	bne.n	8005a10 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8005910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005914:	3301      	adds	r3, #1
 8005916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005920:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005924:	429a      	cmp	r2, r3
 8005926:	d203      	bcs.n	8005930 <dhcp_recv+0x88>
 8005928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800592c:	2b05      	cmp	r3, #5
 800592e:	d9e2      	bls.n	80058f6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe faee 	bl	8003f16 <lwip_htonl>
 800593a:	4602      	mov	r2, r0
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d167      	bne.n	8005a14 <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8005944:	69f9      	ldr	r1, [r7, #28]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff fcd6 	bl	80052f8 <dhcp_parse_reply>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d162      	bne.n	8005a18 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8005952:	4b37      	ldr	r3, [pc, #220]	; (8005a30 <dhcp_recv+0x188>)
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d060      	beq.n	8005a1c <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8005960:	4b34      	ldr	r3, [pc, #208]	; (8005a34 <dhcp_recv+0x18c>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8005966:	7cfb      	ldrb	r3, [r7, #19]
 8005968:	2b05      	cmp	r3, #5
 800596a:	d12a      	bne.n	80059c2 <dhcp_recv+0x11a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	795b      	ldrb	r3, [r3, #5]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d112      	bne.n	800599a <dhcp_recv+0xf2>
      dhcp_handle_ack(netif, msg_in);
 8005974:	6979      	ldr	r1, [r7, #20]
 8005976:	6a38      	ldr	r0, [r7, #32]
 8005978:	f7fe fe50 	bl	800461c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <dhcp_recv+0xea>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800598a:	6a38      	ldr	r0, [r7, #32]
 800598c:	f7fe fbbe 	bl	800410c <dhcp_check>
 8005990:	e045      	b.n	8005a1e <dhcp_recv+0x176>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8005992:	6a38      	ldr	r0, [r7, #32]
 8005994:	f7ff f864 	bl	8004a60 <dhcp_bind>
 8005998:	e041      	b.n	8005a1e <dhcp_recv+0x176>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	795b      	ldrb	r3, [r3, #5]
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d007      	beq.n	80059b2 <dhcp_recv+0x10a>
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	795b      	ldrb	r3, [r3, #5]
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d003      	beq.n	80059b2 <dhcp_recv+0x10a>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80059ae:	2b05      	cmp	r3, #5
 80059b0:	d135      	bne.n	8005a1e <dhcp_recv+0x176>
      dhcp_handle_ack(netif, msg_in);
 80059b2:	6979      	ldr	r1, [r7, #20]
 80059b4:	6a38      	ldr	r0, [r7, #32]
 80059b6:	f7fe fe31 	bl	800461c <dhcp_handle_ack>
      dhcp_bind(netif);
 80059ba:	6a38      	ldr	r0, [r7, #32]
 80059bc:	f7ff f850 	bl	8004a60 <dhcp_bind>
 80059c0:	e02d      	b.n	8005a1e <dhcp_recv+0x176>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80059c2:	7cfb      	ldrb	r3, [r7, #19]
 80059c4:	2b06      	cmp	r3, #6
 80059c6:	d113      	bne.n	80059f0 <dhcp_recv+0x148>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d00b      	beq.n	80059e8 <dhcp_recv+0x140>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	795b      	ldrb	r3, [r3, #5]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d007      	beq.n	80059e8 <dhcp_recv+0x140>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d003      	beq.n	80059e8 <dhcp_recv+0x140>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	795b      	ldrb	r3, [r3, #5]
 80059e4:	2b05      	cmp	r3, #5
 80059e6:	d103      	bne.n	80059f0 <dhcp_recv+0x148>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80059e8:	6a38      	ldr	r0, [r7, #32]
 80059ea:	f7fe fb75 	bl	80040d8 <dhcp_handle_nak>
 80059ee:	e016      	b.n	8005a1e <dhcp_recv+0x176>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80059f0:	7cfb      	ldrb	r3, [r7, #19]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d113      	bne.n	8005a1e <dhcp_recv+0x176>
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	795b      	ldrb	r3, [r3, #5]
 80059fa:	2b06      	cmp	r3, #6
 80059fc:	d10f      	bne.n	8005a1e <dhcp_recv+0x176>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80059fe:	6979      	ldr	r1, [r7, #20]
 8005a00:	6a38      	ldr	r0, [r7, #32]
 8005a02:	f7fe fbb7 	bl	8004174 <dhcp_handle_offer>
 8005a06:	e00a      	b.n	8005a1e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 8005a08:	bf00      	nop
 8005a0a:	e008      	b.n	8005a1e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 8005a0c:	bf00      	nop
 8005a0e:	e006      	b.n	8005a1e <dhcp_recv+0x176>
      goto free_pbuf_and_return;
 8005a10:	bf00      	nop
 8005a12:	e004      	b.n	8005a1e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 8005a14:	bf00      	nop
 8005a16:	e002      	b.n	8005a1e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 8005a18:	bf00      	nop
 8005a1a:	e000      	b.n	8005a1e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
 8005a1c:	bf00      	nop
  }

free_pbuf_and_return:
  pbuf_free(p);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f003 fda6 	bl	8009570 <pbuf_free>
}
 8005a24:	bf00      	nop
 8005a26:	3728      	adds	r7, #40	; 0x28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20003794 	.word	0x20003794
 8005a30:	200037ac 	.word	0x200037ac
 8005a34:	200037b4 	.word	0x200037b4

08005a38 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	4613      	mov	r3, r2
 8005a46:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d108      	bne.n	8005a60 <dhcp_create_msg+0x28>
 8005a4e:	4b5f      	ldr	r3, [pc, #380]	; (8005bcc <dhcp_create_msg+0x194>)
 8005a50:	f240 7269 	movw	r2, #1897	; 0x769
 8005a54:	495e      	ldr	r1, [pc, #376]	; (8005bd0 <dhcp_create_msg+0x198>)
 8005a56:	485f      	ldr	r0, [pc, #380]	; (8005bd4 <dhcp_create_msg+0x19c>)
 8005a58:	f00a ffd0 	bl	80109fc <iprintf>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e0b1      	b.n	8005bc4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d108      	bne.n	8005a78 <dhcp_create_msg+0x40>
 8005a66:	4b59      	ldr	r3, [pc, #356]	; (8005bcc <dhcp_create_msg+0x194>)
 8005a68:	f240 726a 	movw	r2, #1898	; 0x76a
 8005a6c:	495a      	ldr	r1, [pc, #360]	; (8005bd8 <dhcp_create_msg+0x1a0>)
 8005a6e:	4859      	ldr	r0, [pc, #356]	; (8005bd4 <dhcp_create_msg+0x19c>)
 8005a70:	f00a ffc4 	bl	80109fc <iprintf>
 8005a74:	2300      	movs	r3, #0
 8005a76:	e0a5      	b.n	8005bc4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8005a78:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005a7c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8005a80:	2036      	movs	r0, #54	; 0x36
 8005a82:	f003 fa93 	bl	8008fac <pbuf_alloc>
 8005a86:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e098      	b.n	8005bc4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	895b      	ldrh	r3, [r3, #10]
 8005a96:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8005a9a:	d206      	bcs.n	8005aaa <dhcp_create_msg+0x72>
 8005a9c:	4b4b      	ldr	r3, [pc, #300]	; (8005bcc <dhcp_create_msg+0x194>)
 8005a9e:	f240 7272 	movw	r2, #1906	; 0x772
 8005aa2:	494e      	ldr	r1, [pc, #312]	; (8005bdc <dhcp_create_msg+0x1a4>)
 8005aa4:	484b      	ldr	r0, [pc, #300]	; (8005bd4 <dhcp_create_msg+0x19c>)
 8005aa6:	f00a ffa9 	bl	80109fc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d103      	bne.n	8005ab8 <dhcp_create_msg+0x80>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	795b      	ldrb	r3, [r3, #5]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d10d      	bne.n	8005ad4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	799b      	ldrb	r3, [r3, #6]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d105      	bne.n	8005acc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8005ac0:	f00a ffb4 	bl	8010a2c <rand>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4b45      	ldr	r3, [pc, #276]	; (8005be0 <dhcp_create_msg+0x1a8>)
 8005aca:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8005acc:	4b44      	ldr	r3, [pc, #272]	; (8005be0 <dhcp_create_msg+0x1a8>)
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8005ada:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005ade:	2100      	movs	r1, #0
 8005ae0:	6978      	ldr	r0, [r7, #20]
 8005ae2:	f00a ff83 	bl	80109ec <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2201      	movs	r2, #1
 8005af0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe fa08 	bl	8003f16 <lwip_htonl>
 8005b06:	4602      	mov	r2, r0
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d010      	beq.n	8005b34 <dhcp_create_msg+0xfc>
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d00d      	beq.n	8005b34 <dhcp_create_msg+0xfc>
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	2b07      	cmp	r3, #7
 8005b1c:	d00a      	beq.n	8005b34 <dhcp_create_msg+0xfc>
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d10c      	bne.n	8005b3e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	d003      	beq.n	8005b34 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	795b      	ldrb	r3, [r3, #5]
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d104      	bne.n	8005b3e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3304      	adds	r3, #4
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8005b3e:	2300      	movs	r3, #0
 8005b40:	83fb      	strh	r3, [r7, #30]
 8005b42:	e00c      	b.n	8005b5e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8005b44:	8bfb      	ldrh	r3, [r7, #30]
 8005b46:	8bfa      	ldrh	r2, [r7, #30]
 8005b48:	68f9      	ldr	r1, [r7, #12]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4413      	add	r3, r2
 8005b54:	460a      	mov	r2, r1
 8005b56:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8005b58:	8bfb      	ldrh	r3, [r7, #30]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	83fb      	strh	r3, [r7, #30]
 8005b5e:	8bfb      	ldrh	r3, [r7, #30]
 8005b60:	2b05      	cmp	r3, #5
 8005b62:	d9ef      	bls.n	8005b44 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8005b6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8005b70:	2200      	movs	r2, #0
 8005b72:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8005b76:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8005b80:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8005b84:	2200      	movs	r2, #0
 8005b86:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8005b8a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8005b94:	2301      	movs	r3, #1
 8005b96:	2235      	movs	r2, #53	; 0x35
 8005b98:	2000      	movs	r0, #0
 8005b9a:	f7ff fadd 	bl	8005158 <dhcp_option>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8005ba8:	79fa      	ldrb	r2, [r7, #7]
 8005baa:	8a7b      	ldrh	r3, [r7, #18]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff fb07 	bl	80051c0 <dhcp_option_byte>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	8a7a      	ldrh	r2, [r7, #18]
 8005bc0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3720      	adds	r7, #32
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	08011b3c 	.word	0x08011b3c
 8005bd0:	08011e5c 	.word	0x08011e5c
 8005bd4:	08011b9c 	.word	0x08011b9c
 8005bd8:	08011e7c 	.word	0x08011e7c
 8005bdc:	08011e9c 	.word	0x08011e9c
 8005be0:	200004e8 	.word	0x200004e8

08005be4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4603      	mov	r3, r0
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8005bf2:	89fb      	ldrh	r3, [r7, #14]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	81fa      	strh	r2, [r7, #14]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	22ff      	movs	r2, #255	; 0xff
 8005c00:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8005c02:	e007      	b.n	8005c14 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8005c04:	89fb      	ldrh	r3, [r7, #14]
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	81fa      	strh	r2, [r7, #14]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4413      	add	r3, r2
 8005c10:	2200      	movs	r2, #0
 8005c12:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8005c14:	89fb      	ldrh	r3, [r7, #14]
 8005c16:	2b43      	cmp	r3, #67	; 0x43
 8005c18:	d904      	bls.n	8005c24 <dhcp_option_trailer+0x40>
 8005c1a:	89fb      	ldrh	r3, [r7, #14]
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <dhcp_option_trailer+0x46>
 8005c24:	89fb      	ldrh	r3, [r7, #14]
 8005c26:	2b43      	cmp	r3, #67	; 0x43
 8005c28:	d9ec      	bls.n	8005c04 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8005c2a:	89fb      	ldrh	r3, [r7, #14]
 8005c2c:	33f0      	adds	r3, #240	; 0xf0
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f003 fb14 	bl	8009260 <pbuf_realloc>
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d017      	beq.n	8005c7e <dhcp_supplied_address+0x3e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d013      	beq.n	8005c7e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	795b      	ldrb	r3, [r3, #5]
 8005c60:	2b0a      	cmp	r3, #10
 8005c62:	d007      	beq.n	8005c74 <dhcp_supplied_address+0x34>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	795b      	ldrb	r3, [r3, #5]
 8005c68:	2b05      	cmp	r3, #5
 8005c6a:	d003      	beq.n	8005c74 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d101      	bne.n	8005c78 <dhcp_supplied_address+0x38>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <dhcp_supplied_address+0x3a>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	e000      	b.n	8005c80 <dhcp_supplied_address+0x40>
  }
  return 0;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8005c94:	4915      	ldr	r1, [pc, #84]	; (8005cec <etharp_free_entry+0x60>)
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	4413      	add	r3, r2
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	440b      	add	r3, r1
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d013      	beq.n	8005cd0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8005ca8:	4910      	ldr	r1, [pc, #64]	; (8005cec <etharp_free_entry+0x60>)
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	4413      	add	r3, r2
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	440b      	add	r3, r1
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f003 fc59 	bl	8009570 <pbuf_free>
    arp_table[i].q = NULL;
 8005cbe:	490b      	ldr	r1, [pc, #44]	; (8005cec <etharp_free_entry+0x60>)
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	4413      	add	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	440b      	add	r3, r1
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8005cd0:	4906      	ldr	r1, [pc, #24]	; (8005cec <etharp_free_entry+0x60>)
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	4413      	add	r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	440b      	add	r3, r1
 8005cde:	3314      	adds	r3, #20
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8005ce4:	bf00      	nop
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	200004ec 	.word	0x200004ec

08005cf0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	e096      	b.n	8005e2a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8005cfc:	494f      	ldr	r1, [pc, #316]	; (8005e3c <etharp_tmr+0x14c>)
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4613      	mov	r3, r2
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	4413      	add	r3, r2
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	440b      	add	r3, r1
 8005d0a:	3314      	adds	r3, #20
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 8086 	beq.w	8005e24 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8005d18:	4948      	ldr	r1, [pc, #288]	; (8005e3c <etharp_tmr+0x14c>)
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	440b      	add	r3, r1
 8005d26:	3312      	adds	r3, #18
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	b298      	uxth	r0, r3
 8005d2e:	4943      	ldr	r1, [pc, #268]	; (8005e3c <etharp_tmr+0x14c>)
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	4613      	mov	r3, r2
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	4413      	add	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	440b      	add	r3, r1
 8005d3c:	3312      	adds	r3, #18
 8005d3e:	4602      	mov	r2, r0
 8005d40:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005d42:	493e      	ldr	r1, [pc, #248]	; (8005e3c <etharp_tmr+0x14c>)
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	4613      	mov	r3, r2
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	4413      	add	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	440b      	add	r3, r1
 8005d50:	3312      	adds	r3, #18
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005d58:	d215      	bcs.n	8005d86 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005d5a:	4938      	ldr	r1, [pc, #224]	; (8005e3c <etharp_tmr+0x14c>)
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	4413      	add	r3, r2
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	440b      	add	r3, r1
 8005d68:	3314      	adds	r3, #20
 8005d6a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d10e      	bne.n	8005d8e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8005d70:	4932      	ldr	r1, [pc, #200]	; (8005e3c <etharp_tmr+0x14c>)
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	4413      	add	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	440b      	add	r3, r1
 8005d7e:	3312      	adds	r3, #18
 8005d80:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d903      	bls.n	8005d8e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff ff80 	bl	8005c8c <etharp_free_entry>
 8005d8c:	e04a      	b.n	8005e24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8005d8e:	492b      	ldr	r1, [pc, #172]	; (8005e3c <etharp_tmr+0x14c>)
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	4413      	add	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	440b      	add	r3, r1
 8005d9c:	3314      	adds	r3, #20
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d10a      	bne.n	8005dba <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005da4:	4925      	ldr	r1, [pc, #148]	; (8005e3c <etharp_tmr+0x14c>)
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4613      	mov	r3, r2
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	4413      	add	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	440b      	add	r3, r1
 8005db2:	3314      	adds	r3, #20
 8005db4:	2204      	movs	r2, #4
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	e034      	b.n	8005e24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8005dba:	4920      	ldr	r1, [pc, #128]	; (8005e3c <etharp_tmr+0x14c>)
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	440b      	add	r3, r1
 8005dc8:	3314      	adds	r3, #20
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d10a      	bne.n	8005de6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005dd0:	491a      	ldr	r1, [pc, #104]	; (8005e3c <etharp_tmr+0x14c>)
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	4413      	add	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	440b      	add	r3, r1
 8005dde:	3314      	adds	r3, #20
 8005de0:	2202      	movs	r2, #2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e01e      	b.n	8005e24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005de6:	4915      	ldr	r1, [pc, #84]	; (8005e3c <etharp_tmr+0x14c>)
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	440b      	add	r3, r1
 8005df4:	3314      	adds	r3, #20
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d113      	bne.n	8005e24 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8005dfc:	490f      	ldr	r1, [pc, #60]	; (8005e3c <etharp_tmr+0x14c>)
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4613      	mov	r3, r2
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	4413      	add	r3, r2
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	440b      	add	r3, r1
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	4613      	mov	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	4413      	add	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4a08      	ldr	r2, [pc, #32]	; (8005e3c <etharp_tmr+0x14c>)
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	4619      	mov	r1, r3
 8005e20:	f000 fe72 	bl	8006b08 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3301      	adds	r3, #1
 8005e28:	607b      	str	r3, [r7, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b09      	cmp	r3, #9
 8005e2e:	f77f af65 	ble.w	8005cfc <etharp_tmr+0xc>
      }
    }
  }
}
 8005e32:	bf00      	nop
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	200004ec 	.word	0x200004ec

08005e40 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	; 0x28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005e4e:	230a      	movs	r3, #10
 8005e50:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e52:	230a      	movs	r3, #10
 8005e54:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8005e56:	230a      	movs	r3, #10
 8005e58:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8005e5e:	230a      	movs	r3, #10
 8005e60:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	83bb      	strh	r3, [r7, #28]
 8005e66:	2300      	movs	r3, #0
 8005e68:	837b      	strh	r3, [r7, #26]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005e6e:	2300      	movs	r3, #0
 8005e70:	843b      	strh	r3, [r7, #32]
 8005e72:	e0ae      	b.n	8005fd2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8005e74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005e78:	49a6      	ldr	r1, [pc, #664]	; (8006114 <etharp_find_entry+0x2d4>)
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	440b      	add	r3, r1
 8005e84:	3314      	adds	r3, #20
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005e8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005e8e:	2b0a      	cmp	r3, #10
 8005e90:	d105      	bne.n	8005e9e <etharp_find_entry+0x5e>
 8005e92:	7dfb      	ldrb	r3, [r7, #23]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8005e98:	8c3b      	ldrh	r3, [r7, #32]
 8005e9a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e9c:	e095      	b.n	8005fca <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8005e9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8092 	beq.w	8005fca <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d009      	beq.n	8005ec0 <etharp_find_entry+0x80>
 8005eac:	7dfb      	ldrb	r3, [r7, #23]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d806      	bhi.n	8005ec0 <etharp_find_entry+0x80>
 8005eb2:	4b99      	ldr	r3, [pc, #612]	; (8006118 <etharp_find_entry+0x2d8>)
 8005eb4:	f44f 7292 	mov.w	r2, #292	; 0x124
 8005eb8:	4998      	ldr	r1, [pc, #608]	; (800611c <etharp_find_entry+0x2dc>)
 8005eba:	4899      	ldr	r0, [pc, #612]	; (8006120 <etharp_find_entry+0x2e0>)
 8005ebc:	f00a fd9e 	bl	80109fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d020      	beq.n	8005f08 <etharp_find_entry+0xc8>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6819      	ldr	r1, [r3, #0]
 8005eca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005ece:	4891      	ldr	r0, [pc, #580]	; (8006114 <etharp_find_entry+0x2d4>)
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	4413      	add	r3, r2
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	4403      	add	r3, r0
 8005eda:	3304      	adds	r3, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4299      	cmp	r1, r3
 8005ee0:	d112      	bne.n	8005f08 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00c      	beq.n	8005f02 <etharp_find_entry+0xc2>
 8005ee8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005eec:	4989      	ldr	r1, [pc, #548]	; (8006114 <etharp_find_entry+0x2d4>)
 8005eee:	4613      	mov	r3, r2
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	4413      	add	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	440b      	add	r3, r1
 8005ef8:	3308      	adds	r3, #8
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d102      	bne.n	8005f08 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8005f02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005f06:	e100      	b.n	800610a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d140      	bne.n	8005f90 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8005f0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005f12:	4980      	ldr	r1, [pc, #512]	; (8006114 <etharp_find_entry+0x2d4>)
 8005f14:	4613      	mov	r3, r2
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	4413      	add	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	440b      	add	r3, r1
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01a      	beq.n	8005f5a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8005f24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005f28:	497a      	ldr	r1, [pc, #488]	; (8006114 <etharp_find_entry+0x2d4>)
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	4413      	add	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	440b      	add	r3, r1
 8005f34:	3312      	adds	r3, #18
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	8bba      	ldrh	r2, [r7, #28]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d845      	bhi.n	8005fca <etharp_find_entry+0x18a>
            old_queue = i;
 8005f3e:	8c3b      	ldrh	r3, [r7, #32]
 8005f40:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8005f42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005f46:	4973      	ldr	r1, [pc, #460]	; (8006114 <etharp_find_entry+0x2d4>)
 8005f48:	4613      	mov	r3, r2
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4413      	add	r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	440b      	add	r3, r1
 8005f52:	3312      	adds	r3, #18
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	83bb      	strh	r3, [r7, #28]
 8005f58:	e037      	b.n	8005fca <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8005f5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005f5e:	496d      	ldr	r1, [pc, #436]	; (8006114 <etharp_find_entry+0x2d4>)
 8005f60:	4613      	mov	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4413      	add	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	440b      	add	r3, r1
 8005f6a:	3312      	adds	r3, #18
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	8b7a      	ldrh	r2, [r7, #26]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d82a      	bhi.n	8005fca <etharp_find_entry+0x18a>
            old_pending = i;
 8005f74:	8c3b      	ldrh	r3, [r7, #32]
 8005f76:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8005f78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005f7c:	4965      	ldr	r1, [pc, #404]	; (8006114 <etharp_find_entry+0x2d4>)
 8005f7e:	4613      	mov	r3, r2
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	4413      	add	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	440b      	add	r3, r1
 8005f88:	3312      	adds	r3, #18
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	837b      	strh	r3, [r7, #26]
 8005f8e:	e01c      	b.n	8005fca <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d919      	bls.n	8005fca <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8005f96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005f9a:	495e      	ldr	r1, [pc, #376]	; (8006114 <etharp_find_entry+0x2d4>)
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	4413      	add	r3, r2
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	440b      	add	r3, r1
 8005fa6:	3312      	adds	r3, #18
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	8b3a      	ldrh	r2, [r7, #24]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d80c      	bhi.n	8005fca <etharp_find_entry+0x18a>
            old_stable = i;
 8005fb0:	8c3b      	ldrh	r3, [r7, #32]
 8005fb2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8005fb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005fb8:	4956      	ldr	r1, [pc, #344]	; (8006114 <etharp_find_entry+0x2d4>)
 8005fba:	4613      	mov	r3, r2
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	4413      	add	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	440b      	add	r3, r1
 8005fc4:	3312      	adds	r3, #18
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005fca:	8c3b      	ldrh	r3, [r7, #32]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	843b      	strh	r3, [r7, #32]
 8005fd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005fd6:	2b09      	cmp	r3, #9
 8005fd8:	f77f af4c 	ble.w	8005e74 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8005fdc:	7afb      	ldrb	r3, [r7, #11]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d108      	bne.n	8005ff8 <etharp_find_entry+0x1b8>
 8005fe6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005fea:	2b0a      	cmp	r3, #10
 8005fec:	d107      	bne.n	8005ffe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8005fee:	7afb      	ldrb	r3, [r7, #11]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d102      	bne.n	8005ffe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8005ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ffc:	e085      	b.n	800610a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8005ffe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006002:	2b09      	cmp	r3, #9
 8006004:	dc02      	bgt.n	800600c <etharp_find_entry+0x1cc>
    i = empty;
 8006006:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006008:	843b      	strh	r3, [r7, #32]
 800600a:	e039      	b.n	8006080 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800600c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006010:	2b09      	cmp	r3, #9
 8006012:	dc14      	bgt.n	800603e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8006014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006016:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8006018:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800601c:	493d      	ldr	r1, [pc, #244]	; (8006114 <etharp_find_entry+0x2d4>)
 800601e:	4613      	mov	r3, r2
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	4413      	add	r3, r2
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	440b      	add	r3, r1
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d018      	beq.n	8006060 <etharp_find_entry+0x220>
 800602e:	4b3a      	ldr	r3, [pc, #232]	; (8006118 <etharp_find_entry+0x2d8>)
 8006030:	f240 126d 	movw	r2, #365	; 0x16d
 8006034:	493b      	ldr	r1, [pc, #236]	; (8006124 <etharp_find_entry+0x2e4>)
 8006036:	483a      	ldr	r0, [pc, #232]	; (8006120 <etharp_find_entry+0x2e0>)
 8006038:	f00a fce0 	bl	80109fc <iprintf>
 800603c:	e010      	b.n	8006060 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800603e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006042:	2b09      	cmp	r3, #9
 8006044:	dc02      	bgt.n	800604c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8006046:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006048:	843b      	strh	r3, [r7, #32]
 800604a:	e009      	b.n	8006060 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800604c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006050:	2b09      	cmp	r3, #9
 8006052:	dc02      	bgt.n	800605a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8006054:	8bfb      	ldrh	r3, [r7, #30]
 8006056:	843b      	strh	r3, [r7, #32]
 8006058:	e002      	b.n	8006060 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295
 800605e:	e054      	b.n	800610a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8006060:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006064:	2b09      	cmp	r3, #9
 8006066:	dd06      	ble.n	8006076 <etharp_find_entry+0x236>
 8006068:	4b2b      	ldr	r3, [pc, #172]	; (8006118 <etharp_find_entry+0x2d8>)
 800606a:	f240 127f 	movw	r2, #383	; 0x17f
 800606e:	492e      	ldr	r1, [pc, #184]	; (8006128 <etharp_find_entry+0x2e8>)
 8006070:	482b      	ldr	r0, [pc, #172]	; (8006120 <etharp_find_entry+0x2e0>)
 8006072:	f00a fcc3 	bl	80109fc <iprintf>
    etharp_free_entry(i);
 8006076:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fe06 	bl	8005c8c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8006080:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006084:	2b09      	cmp	r3, #9
 8006086:	dd06      	ble.n	8006096 <etharp_find_entry+0x256>
 8006088:	4b23      	ldr	r3, [pc, #140]	; (8006118 <etharp_find_entry+0x2d8>)
 800608a:	f240 1283 	movw	r2, #387	; 0x183
 800608e:	4926      	ldr	r1, [pc, #152]	; (8006128 <etharp_find_entry+0x2e8>)
 8006090:	4823      	ldr	r0, [pc, #140]	; (8006120 <etharp_find_entry+0x2e0>)
 8006092:	f00a fcb3 	bl	80109fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8006096:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800609a:	491e      	ldr	r1, [pc, #120]	; (8006114 <etharp_find_entry+0x2d4>)
 800609c:	4613      	mov	r3, r2
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	4413      	add	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	440b      	add	r3, r1
 80060a6:	3314      	adds	r3, #20
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d006      	beq.n	80060bc <etharp_find_entry+0x27c>
 80060ae:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <etharp_find_entry+0x2d8>)
 80060b0:	f240 1285 	movw	r2, #389	; 0x185
 80060b4:	491d      	ldr	r1, [pc, #116]	; (800612c <etharp_find_entry+0x2ec>)
 80060b6:	481a      	ldr	r0, [pc, #104]	; (8006120 <etharp_find_entry+0x2e0>)
 80060b8:	f00a fca0 	bl	80109fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00b      	beq.n	80060da <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80060c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	4812      	ldr	r0, [pc, #72]	; (8006114 <etharp_find_entry+0x2d4>)
 80060cc:	4613      	mov	r3, r2
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	4413      	add	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4403      	add	r3, r0
 80060d6:	3304      	adds	r3, #4
 80060d8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80060da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80060de:	490d      	ldr	r1, [pc, #52]	; (8006114 <etharp_find_entry+0x2d4>)
 80060e0:	4613      	mov	r3, r2
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	4413      	add	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	440b      	add	r3, r1
 80060ea:	3312      	adds	r3, #18
 80060ec:	2200      	movs	r2, #0
 80060ee:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80060f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80060f4:	4907      	ldr	r1, [pc, #28]	; (8006114 <etharp_find_entry+0x2d4>)
 80060f6:	4613      	mov	r3, r2
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	4413      	add	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	440b      	add	r3, r1
 8006100:	3308      	adds	r3, #8
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8006106:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3728      	adds	r7, #40	; 0x28
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	200004ec 	.word	0x200004ec
 8006118:	08011edc 	.word	0x08011edc
 800611c:	08011f14 	.word	0x08011f14
 8006120:	08011f54 	.word	0x08011f54
 8006124:	08011f7c 	.word	0x08011f7c
 8006128:	08011f94 	.word	0x08011f94
 800612c:	08011fa8 	.word	0x08011fa8

08006130 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006144:	2b06      	cmp	r3, #6
 8006146:	d006      	beq.n	8006156 <etharp_update_arp_entry+0x26>
 8006148:	4b48      	ldr	r3, [pc, #288]	; (800626c <etharp_update_arp_entry+0x13c>)
 800614a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800614e:	4948      	ldr	r1, [pc, #288]	; (8006270 <etharp_update_arp_entry+0x140>)
 8006150:	4848      	ldr	r0, [pc, #288]	; (8006274 <etharp_update_arp_entry+0x144>)
 8006152:	f00a fc53 	bl	80109fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d012      	beq.n	8006182 <etharp_update_arp_entry+0x52>
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00e      	beq.n	8006182 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68f9      	ldr	r1, [r7, #12]
 800616a:	4618      	mov	r0, r3
 800616c:	f001 f918 	bl	80073a0 <ip4_addr_isbroadcast_u32>
 8006170:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8006172:	2b00      	cmp	r3, #0
 8006174:	d105      	bne.n	8006182 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800617e:	2be0      	cmp	r3, #224	; 0xe0
 8006180:	d102      	bne.n	8006188 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8006182:	f06f 030f 	mvn.w	r3, #15
 8006186:	e06c      	b.n	8006262 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4619      	mov	r1, r3
 800618e:	68b8      	ldr	r0, [r7, #8]
 8006190:	f7ff fe56 	bl	8005e40 <etharp_find_entry>
 8006194:	4603      	mov	r3, r0
 8006196:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8006198:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800619c:	2b00      	cmp	r3, #0
 800619e:	da02      	bge.n	80061a6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80061a0:	8afb      	ldrh	r3, [r7, #22]
 80061a2:	b25b      	sxtb	r3, r3
 80061a4:	e05d      	b.n	8006262 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80061a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80061aa:	4933      	ldr	r1, [pc, #204]	; (8006278 <etharp_update_arp_entry+0x148>)
 80061ac:	4613      	mov	r3, r2
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	4413      	add	r3, r2
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	440b      	add	r3, r1
 80061b6:	3314      	adds	r3, #20
 80061b8:	2202      	movs	r2, #2
 80061ba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80061bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80061c0:	492d      	ldr	r1, [pc, #180]	; (8006278 <etharp_update_arp_entry+0x148>)
 80061c2:	4613      	mov	r3, r2
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	4413      	add	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	440b      	add	r3, r1
 80061cc:	3308      	adds	r3, #8
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80061d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80061d6:	4613      	mov	r3, r2
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	4413      	add	r3, r2
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	3308      	adds	r3, #8
 80061e0:	4a25      	ldr	r2, [pc, #148]	; (8006278 <etharp_update_arp_entry+0x148>)
 80061e2:	4413      	add	r3, r2
 80061e4:	3304      	adds	r3, #4
 80061e6:	2206      	movs	r2, #6
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f00a fbf3 	bl	80109d6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80061f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80061f4:	4920      	ldr	r1, [pc, #128]	; (8006278 <etharp_update_arp_entry+0x148>)
 80061f6:	4613      	mov	r3, r2
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	440b      	add	r3, r1
 8006200:	3312      	adds	r3, #18
 8006202:	2200      	movs	r2, #0
 8006204:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8006206:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800620a:	491b      	ldr	r1, [pc, #108]	; (8006278 <etharp_update_arp_entry+0x148>)
 800620c:	4613      	mov	r3, r2
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	4413      	add	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	440b      	add	r3, r1
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d021      	beq.n	8006260 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800621c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006220:	4915      	ldr	r1, [pc, #84]	; (8006278 <etharp_update_arp_entry+0x148>)
 8006222:	4613      	mov	r3, r2
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	4413      	add	r3, r2
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	440b      	add	r3, r1
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8006230:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006234:	4910      	ldr	r1, [pc, #64]	; (8006278 <etharp_update_arp_entry+0x148>)
 8006236:	4613      	mov	r3, r2
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	4413      	add	r3, r2
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	440b      	add	r3, r1
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800624a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6939      	ldr	r1, [r7, #16]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f00a fb19 	bl	801088c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800625a:	6938      	ldr	r0, [r7, #16]
 800625c:	f003 f988 	bl	8009570 <pbuf_free>
  }
  return ERR_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	08011edc 	.word	0x08011edc
 8006270:	08011fd4 	.word	0x08011fd4
 8006274:	08011f54 	.word	0x08011f54
 8006278:	200004ec 	.word	0x200004ec

0800627c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006284:	2300      	movs	r3, #0
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	e01e      	b.n	80062c8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800628a:	4913      	ldr	r1, [pc, #76]	; (80062d8 <etharp_cleanup_netif+0x5c>)
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4613      	mov	r3, r2
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	4413      	add	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	440b      	add	r3, r1
 8006298:	3314      	adds	r3, #20
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00e      	beq.n	80062c2 <etharp_cleanup_netif+0x46>
 80062a4:	490c      	ldr	r1, [pc, #48]	; (80062d8 <etharp_cleanup_netif+0x5c>)
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4613      	mov	r3, r2
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	4413      	add	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	440b      	add	r3, r1
 80062b2:	3308      	adds	r3, #8
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d102      	bne.n	80062c2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff fce5 	bl	8005c8c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b09      	cmp	r3, #9
 80062cc:	dddd      	ble.n	800628a <etharp_cleanup_netif+0xe>
    }
  }
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	200004ec 	.word	0x200004ec

080062dc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80062dc:	b5b0      	push	{r4, r5, r7, lr}
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	af04      	add	r7, sp, #16
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d107      	bne.n	80062fc <etharp_input+0x20>
 80062ec:	4b3f      	ldr	r3, [pc, #252]	; (80063ec <etharp_input+0x110>)
 80062ee:	f240 228a 	movw	r2, #650	; 0x28a
 80062f2:	493f      	ldr	r1, [pc, #252]	; (80063f0 <etharp_input+0x114>)
 80062f4:	483f      	ldr	r0, [pc, #252]	; (80063f4 <etharp_input+0x118>)
 80062f6:	f00a fb81 	bl	80109fc <iprintf>
 80062fa:	e074      	b.n	80063e6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630c:	d10c      	bne.n	8006328 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8006312:	2b06      	cmp	r3, #6
 8006314:	d108      	bne.n	8006328 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800631a:	2b04      	cmp	r3, #4
 800631c:	d104      	bne.n	8006328 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	885b      	ldrh	r3, [r3, #2]
 8006322:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8006324:	2b08      	cmp	r3, #8
 8006326:	d003      	beq.n	8006330 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f003 f921 	bl	8009570 <pbuf_free>
    return;
 800632e:	e05a      	b.n	80063e6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	330e      	adds	r3, #14
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	3318      	adds	r3, #24
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	3304      	adds	r3, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d102      	bne.n	8006350 <etharp_input+0x74>
    for_us = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]
 800634e:	e009      	b.n	8006364 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	3304      	adds	r3, #4
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	bf0c      	ite	eq
 800635c:	2301      	moveq	r3, #1
 800635e:	2300      	movne	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f103 0208 	add.w	r2, r3, #8
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <etharp_input+0x98>
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <etharp_input+0x9a>
 8006374:	2302      	movs	r3, #2
 8006376:	f107 010c 	add.w	r1, r7, #12
 800637a:	6838      	ldr	r0, [r7, #0]
 800637c:	f7ff fed8 	bl	8006130 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	88db      	ldrh	r3, [r3, #6]
 8006384:	b29b      	uxth	r3, r3
 8006386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800638a:	d003      	beq.n	8006394 <etharp_input+0xb8>
 800638c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006390:	d01e      	beq.n	80063d0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8006392:	e025      	b.n	80063e0 <etharp_input+0x104>
      if (for_us) {
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d021      	beq.n	80063de <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80063b4:	2102      	movs	r1, #2
 80063b6:	9103      	str	r1, [sp, #12]
 80063b8:	f107 010c 	add.w	r1, r7, #12
 80063bc:	9102      	str	r1, [sp, #8]
 80063be:	9201      	str	r2, [sp, #4]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	462b      	mov	r3, r5
 80063c4:	4622      	mov	r2, r4
 80063c6:	4601      	mov	r1, r0
 80063c8:	6838      	ldr	r0, [r7, #0]
 80063ca:	f000 faef 	bl	80069ac <etharp_raw>
      break;
 80063ce:	e006      	b.n	80063de <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80063d0:	f107 030c 	add.w	r3, r7, #12
 80063d4:	4619      	mov	r1, r3
 80063d6:	6838      	ldr	r0, [r7, #0]
 80063d8:	f7fe f9fe 	bl	80047d8 <dhcp_arp_reply>
      break;
 80063dc:	e000      	b.n	80063e0 <etharp_input+0x104>
      break;
 80063de:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f003 f8c5 	bl	8009570 <pbuf_free>
}
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bdb0      	pop	{r4, r5, r7, pc}
 80063ec:	08011edc 	.word	0x08011edc
 80063f0:	0801202c 	.word	0x0801202c
 80063f4:	08011f54 	.word	0x08011f54

080063f8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	4613      	mov	r3, r2
 8006404:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006406:	79fa      	ldrb	r2, [r7, #7]
 8006408:	4944      	ldr	r1, [pc, #272]	; (800651c <etharp_output_to_arp_index+0x124>)
 800640a:	4613      	mov	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4413      	add	r3, r2
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	440b      	add	r3, r1
 8006414:	3314      	adds	r3, #20
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d806      	bhi.n	800642a <etharp_output_to_arp_index+0x32>
 800641c:	4b40      	ldr	r3, [pc, #256]	; (8006520 <etharp_output_to_arp_index+0x128>)
 800641e:	f240 22ef 	movw	r2, #751	; 0x2ef
 8006422:	4940      	ldr	r1, [pc, #256]	; (8006524 <etharp_output_to_arp_index+0x12c>)
 8006424:	4840      	ldr	r0, [pc, #256]	; (8006528 <etharp_output_to_arp_index+0x130>)
 8006426:	f00a fae9 	bl	80109fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800642a:	79fa      	ldrb	r2, [r7, #7]
 800642c:	493b      	ldr	r1, [pc, #236]	; (800651c <etharp_output_to_arp_index+0x124>)
 800642e:	4613      	mov	r3, r2
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	4413      	add	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	440b      	add	r3, r1
 8006438:	3314      	adds	r3, #20
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d153      	bne.n	80064e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8006440:	79fa      	ldrb	r2, [r7, #7]
 8006442:	4936      	ldr	r1, [pc, #216]	; (800651c <etharp_output_to_arp_index+0x124>)
 8006444:	4613      	mov	r3, r2
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	4413      	add	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	440b      	add	r3, r1
 800644e:	3312      	adds	r3, #18
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006456:	d919      	bls.n	800648c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8006458:	79fa      	ldrb	r2, [r7, #7]
 800645a:	4613      	mov	r3, r2
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	4413      	add	r3, r2
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4a2e      	ldr	r2, [pc, #184]	; (800651c <etharp_output_to_arp_index+0x124>)
 8006464:	4413      	add	r3, r2
 8006466:	3304      	adds	r3, #4
 8006468:	4619      	mov	r1, r3
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fb4c 	bl	8006b08 <etharp_request>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d138      	bne.n	80064e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8006476:	79fa      	ldrb	r2, [r7, #7]
 8006478:	4928      	ldr	r1, [pc, #160]	; (800651c <etharp_output_to_arp_index+0x124>)
 800647a:	4613      	mov	r3, r2
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	4413      	add	r3, r2
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	440b      	add	r3, r1
 8006484:	3314      	adds	r3, #20
 8006486:	2203      	movs	r2, #3
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e02d      	b.n	80064e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800648c:	79fa      	ldrb	r2, [r7, #7]
 800648e:	4923      	ldr	r1, [pc, #140]	; (800651c <etharp_output_to_arp_index+0x124>)
 8006490:	4613      	mov	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	4413      	add	r3, r2
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	440b      	add	r3, r1
 800649a:	3312      	adds	r3, #18
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80064a2:	d321      	bcc.n	80064e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80064a4:	79fa      	ldrb	r2, [r7, #7]
 80064a6:	4613      	mov	r3, r2
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	4413      	add	r3, r2
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	4a1b      	ldr	r2, [pc, #108]	; (800651c <etharp_output_to_arp_index+0x124>)
 80064b0:	4413      	add	r3, r2
 80064b2:	1d19      	adds	r1, r3, #4
 80064b4:	79fa      	ldrb	r2, [r7, #7]
 80064b6:	4613      	mov	r3, r2
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	4413      	add	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	3308      	adds	r3, #8
 80064c0:	4a16      	ldr	r2, [pc, #88]	; (800651c <etharp_output_to_arp_index+0x124>)
 80064c2:	4413      	add	r3, r2
 80064c4:	3304      	adds	r3, #4
 80064c6:	461a      	mov	r2, r3
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 fafb 	bl	8006ac4 <etharp_request_dst>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d109      	bne.n	80064e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80064d4:	79fa      	ldrb	r2, [r7, #7]
 80064d6:	4911      	ldr	r1, [pc, #68]	; (800651c <etharp_output_to_arp_index+0x124>)
 80064d8:	4613      	mov	r3, r2
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	4413      	add	r3, r2
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	440b      	add	r3, r1
 80064e2:	3314      	adds	r3, #20
 80064e4:	2203      	movs	r2, #3
 80064e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80064ee:	79fa      	ldrb	r2, [r7, #7]
 80064f0:	4613      	mov	r3, r2
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	4413      	add	r3, r2
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	3308      	adds	r3, #8
 80064fa:	4a08      	ldr	r2, [pc, #32]	; (800651c <etharp_output_to_arp_index+0x124>)
 80064fc:	4413      	add	r3, r2
 80064fe:	1d1a      	adds	r2, r3, #4
 8006500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	4613      	mov	r3, r2
 8006508:	460a      	mov	r2, r1
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f00a f9bd 	bl	801088c <ethernet_output>
 8006512:	4603      	mov	r3, r0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	200004ec 	.word	0x200004ec
 8006520:	08011edc 	.word	0x08011edc
 8006524:	0801204c 	.word	0x0801204c
 8006528:	08011f54 	.word	0x08011f54

0800652c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	; 0x28
 8006530:	af02      	add	r7, sp, #8
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <etharp_output+0x24>
 8006542:	4b73      	ldr	r3, [pc, #460]	; (8006710 <etharp_output+0x1e4>)
 8006544:	f240 321e 	movw	r2, #798	; 0x31e
 8006548:	4972      	ldr	r1, [pc, #456]	; (8006714 <etharp_output+0x1e8>)
 800654a:	4873      	ldr	r0, [pc, #460]	; (8006718 <etharp_output+0x1ec>)
 800654c:	f00a fa56 	bl	80109fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <etharp_output+0x38>
 8006556:	4b6e      	ldr	r3, [pc, #440]	; (8006710 <etharp_output+0x1e4>)
 8006558:	f240 321f 	movw	r2, #799	; 0x31f
 800655c:	496f      	ldr	r1, [pc, #444]	; (800671c <etharp_output+0x1f0>)
 800655e:	486e      	ldr	r0, [pc, #440]	; (8006718 <etharp_output+0x1ec>)
 8006560:	f00a fa4c 	bl	80109fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <etharp_output+0x4c>
 800656a:	4b69      	ldr	r3, [pc, #420]	; (8006710 <etharp_output+0x1e4>)
 800656c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006570:	496b      	ldr	r1, [pc, #428]	; (8006720 <etharp_output+0x1f4>)
 8006572:	4869      	ldr	r0, [pc, #420]	; (8006718 <etharp_output+0x1ec>)
 8006574:	f00a fa42 	bl	80109fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68f9      	ldr	r1, [r7, #12]
 800657e:	4618      	mov	r0, r3
 8006580:	f000 ff0e 	bl	80073a0 <ip4_addr_isbroadcast_u32>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800658a:	4b66      	ldr	r3, [pc, #408]	; (8006724 <etharp_output+0x1f8>)
 800658c:	61fb      	str	r3, [r7, #28]
 800658e:	e0af      	b.n	80066f0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006598:	2be0      	cmp	r3, #224	; 0xe0
 800659a:	d118      	bne.n	80065ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800659c:	2301      	movs	r3, #1
 800659e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80065a0:	2300      	movs	r3, #0
 80065a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80065a4:	235e      	movs	r3, #94	; 0x5e
 80065a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3301      	adds	r3, #1
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3302      	adds	r3, #2
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3303      	adds	r3, #3
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80065c6:	f107 0310 	add.w	r3, r7, #16
 80065ca:	61fb      	str	r3, [r7, #28]
 80065cc:	e090      	b.n	80066f0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3304      	adds	r3, #4
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	405a      	eors	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3308      	adds	r3, #8
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4013      	ands	r3, r2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d012      	beq.n	800660c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80065ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00b      	beq.n	800660c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	330c      	adds	r3, #12
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	330c      	adds	r3, #12
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	e002      	b.n	800660c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8006606:	f06f 0303 	mvn.w	r3, #3
 800660a:	e07d      	b.n	8006708 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800660c:	4b46      	ldr	r3, [pc, #280]	; (8006728 <etharp_output+0x1fc>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	4619      	mov	r1, r3
 8006612:	4a46      	ldr	r2, [pc, #280]	; (800672c <etharp_output+0x200>)
 8006614:	460b      	mov	r3, r1
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	440b      	add	r3, r1
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4413      	add	r3, r2
 800661e:	3314      	adds	r3, #20
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d925      	bls.n	8006672 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8006626:	4b40      	ldr	r3, [pc, #256]	; (8006728 <etharp_output+0x1fc>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	4619      	mov	r1, r3
 800662c:	4a3f      	ldr	r2, [pc, #252]	; (800672c <etharp_output+0x200>)
 800662e:	460b      	mov	r3, r1
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	440b      	add	r3, r1
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	4413      	add	r3, r2
 8006638:	3308      	adds	r3, #8
 800663a:	681a      	ldr	r2, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	429a      	cmp	r2, r3
 8006640:	d117      	bne.n	8006672 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4b38      	ldr	r3, [pc, #224]	; (8006728 <etharp_output+0x1fc>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	4937      	ldr	r1, [pc, #220]	; (800672c <etharp_output+0x200>)
 800664e:	4603      	mov	r3, r0
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	4403      	add	r3, r0
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	440b      	add	r3, r1
 8006658:	3304      	adds	r3, #4
 800665a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800665c:	429a      	cmp	r2, r3
 800665e:	d108      	bne.n	8006672 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8006660:	4b31      	ldr	r3, [pc, #196]	; (8006728 <etharp_output+0x1fc>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f7ff fec5 	bl	80063f8 <etharp_output_to_arp_index>
 800666e:	4603      	mov	r3, r0
 8006670:	e04a      	b.n	8006708 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8006672:	2300      	movs	r3, #0
 8006674:	75fb      	strb	r3, [r7, #23]
 8006676:	e031      	b.n	80066dc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006678:	7dfa      	ldrb	r2, [r7, #23]
 800667a:	492c      	ldr	r1, [pc, #176]	; (800672c <etharp_output+0x200>)
 800667c:	4613      	mov	r3, r2
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	4413      	add	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	440b      	add	r3, r1
 8006686:	3314      	adds	r3, #20
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d923      	bls.n	80066d6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800668e:	7dfa      	ldrb	r2, [r7, #23]
 8006690:	4926      	ldr	r1, [pc, #152]	; (800672c <etharp_output+0x200>)
 8006692:	4613      	mov	r3, r2
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	4413      	add	r3, r2
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	440b      	add	r3, r1
 800669c:	3308      	adds	r3, #8
 800669e:	681a      	ldr	r2, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d117      	bne.n	80066d6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	6819      	ldr	r1, [r3, #0]
 80066aa:	7dfa      	ldrb	r2, [r7, #23]
 80066ac:	481f      	ldr	r0, [pc, #124]	; (800672c <etharp_output+0x200>)
 80066ae:	4613      	mov	r3, r2
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	4413      	add	r3, r2
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4403      	add	r3, r0
 80066b8:	3304      	adds	r3, #4
 80066ba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80066bc:	4299      	cmp	r1, r3
 80066be:	d10a      	bne.n	80066d6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80066c0:	4a19      	ldr	r2, [pc, #100]	; (8006728 <etharp_output+0x1fc>)
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	461a      	mov	r2, r3
 80066ca:	68b9      	ldr	r1, [r7, #8]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f7ff fe93 	bl	80063f8 <etharp_output_to_arp_index>
 80066d2:	4603      	mov	r3, r0
 80066d4:	e018      	b.n	8006708 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	3301      	adds	r3, #1
 80066da:	75fb      	strb	r3, [r7, #23]
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	2b09      	cmp	r3, #9
 80066e0:	d9ca      	bls.n	8006678 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	69b9      	ldr	r1, [r7, #24]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f822 	bl	8006730 <etharp_query>
 80066ec:	4603      	mov	r3, r0
 80066ee:	e00b      	b.n	8006708 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80066f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	68b9      	ldr	r1, [r7, #8]
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f00a f8c3 	bl	801088c <ethernet_output>
 8006706:	4603      	mov	r3, r0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3720      	adds	r7, #32
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	08011edc 	.word	0x08011edc
 8006714:	0801202c 	.word	0x0801202c
 8006718:	08011f54 	.word	0x08011f54
 800671c:	0801207c 	.word	0x0801207c
 8006720:	0801201c 	.word	0x0801201c
 8006724:	08014b94 	.word	0x08014b94
 8006728:	200005dc 	.word	0x200005dc
 800672c:	200004ec 	.word	0x200004ec

08006730 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08c      	sub	sp, #48	; 0x30
 8006734:	af02      	add	r7, sp, #8
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	332a      	adds	r3, #42	; 0x2a
 8006740:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8006742:	23ff      	movs	r3, #255	; 0xff
 8006744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68f9      	ldr	r1, [r7, #12]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fe24 	bl	80073a0 <ip4_addr_isbroadcast_u32>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10c      	bne.n	8006778 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006766:	2be0      	cmp	r3, #224	; 0xe0
 8006768:	d006      	beq.n	8006778 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d102      	bne.n	800677e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8006778:	f06f 030f 	mvn.w	r3, #15
 800677c:	e102      	b.n	8006984 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	2101      	movs	r1, #1
 8006782:	68b8      	ldr	r0, [r7, #8]
 8006784:	f7ff fb5c 	bl	8005e40 <etharp_find_entry>
 8006788:	4603      	mov	r3, r0
 800678a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800678c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006790:	2b00      	cmp	r3, #0
 8006792:	da02      	bge.n	800679a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8006794:	8a7b      	ldrh	r3, [r7, #18]
 8006796:	b25b      	sxtb	r3, r3
 8006798:	e0f4      	b.n	8006984 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800679a:	8a7b      	ldrh	r3, [r7, #18]
 800679c:	2b7e      	cmp	r3, #126	; 0x7e
 800679e:	d906      	bls.n	80067ae <etharp_query+0x7e>
 80067a0:	4b7a      	ldr	r3, [pc, #488]	; (800698c <etharp_query+0x25c>)
 80067a2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80067a6:	497a      	ldr	r1, [pc, #488]	; (8006990 <etharp_query+0x260>)
 80067a8:	487a      	ldr	r0, [pc, #488]	; (8006994 <etharp_query+0x264>)
 80067aa:	f00a f927 	bl	80109fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80067ae:	8a7b      	ldrh	r3, [r7, #18]
 80067b0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80067b2:	7c7a      	ldrb	r2, [r7, #17]
 80067b4:	4978      	ldr	r1, [pc, #480]	; (8006998 <etharp_query+0x268>)
 80067b6:	4613      	mov	r3, r2
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	4413      	add	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	440b      	add	r3, r1
 80067c0:	3314      	adds	r3, #20
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d115      	bne.n	80067f4 <etharp_query+0xc4>
    is_new_entry = 1;
 80067c8:	2301      	movs	r3, #1
 80067ca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80067cc:	7c7a      	ldrb	r2, [r7, #17]
 80067ce:	4972      	ldr	r1, [pc, #456]	; (8006998 <etharp_query+0x268>)
 80067d0:	4613      	mov	r3, r2
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	4413      	add	r3, r2
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	440b      	add	r3, r1
 80067da:	3314      	adds	r3, #20
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80067e0:	7c7a      	ldrb	r2, [r7, #17]
 80067e2:	496d      	ldr	r1, [pc, #436]	; (8006998 <etharp_query+0x268>)
 80067e4:	4613      	mov	r3, r2
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	4413      	add	r3, r2
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	440b      	add	r3, r1
 80067ee:	3308      	adds	r3, #8
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80067f4:	7c7a      	ldrb	r2, [r7, #17]
 80067f6:	4968      	ldr	r1, [pc, #416]	; (8006998 <etharp_query+0x268>)
 80067f8:	4613      	mov	r3, r2
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	4413      	add	r3, r2
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	440b      	add	r3, r1
 8006802:	3314      	adds	r3, #20
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d011      	beq.n	800682e <etharp_query+0xfe>
 800680a:	7c7a      	ldrb	r2, [r7, #17]
 800680c:	4962      	ldr	r1, [pc, #392]	; (8006998 <etharp_query+0x268>)
 800680e:	4613      	mov	r3, r2
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	4413      	add	r3, r2
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	440b      	add	r3, r1
 8006818:	3314      	adds	r3, #20
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d806      	bhi.n	800682e <etharp_query+0xfe>
 8006820:	4b5a      	ldr	r3, [pc, #360]	; (800698c <etharp_query+0x25c>)
 8006822:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006826:	495d      	ldr	r1, [pc, #372]	; (800699c <etharp_query+0x26c>)
 8006828:	485a      	ldr	r0, [pc, #360]	; (8006994 <etharp_query+0x264>)
 800682a:	f00a f8e7 	bl	80109fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <etharp_query+0x10a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10c      	bne.n	8006854 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f963 	bl	8006b08 <etharp_request>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d102      	bne.n	8006854 <etharp_query+0x124>
      return result;
 800684e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006852:	e097      	b.n	8006984 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <etharp_query+0x138>
 800685a:	4b4c      	ldr	r3, [pc, #304]	; (800698c <etharp_query+0x25c>)
 800685c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8006860:	494f      	ldr	r1, [pc, #316]	; (80069a0 <etharp_query+0x270>)
 8006862:	484c      	ldr	r0, [pc, #304]	; (8006994 <etharp_query+0x264>)
 8006864:	f00a f8ca 	bl	80109fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8006868:	7c7a      	ldrb	r2, [r7, #17]
 800686a:	494b      	ldr	r1, [pc, #300]	; (8006998 <etharp_query+0x268>)
 800686c:	4613      	mov	r3, r2
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	4413      	add	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	440b      	add	r3, r1
 8006876:	3314      	adds	r3, #20
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d918      	bls.n	80068b0 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800687e:	4a49      	ldr	r2, [pc, #292]	; (80069a4 <etharp_query+0x274>)
 8006880:	7c7b      	ldrb	r3, [r7, #17]
 8006882:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8006884:	7c7a      	ldrb	r2, [r7, #17]
 8006886:	4613      	mov	r3, r2
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	4413      	add	r3, r2
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	3308      	adds	r3, #8
 8006890:	4a41      	ldr	r2, [pc, #260]	; (8006998 <etharp_query+0x268>)
 8006892:	4413      	add	r3, r2
 8006894:	1d1a      	adds	r2, r3, #4
 8006896:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	4613      	mov	r3, r2
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f009 fff2 	bl	801088c <ethernet_output>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068ae:	e067      	b.n	8006980 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80068b0:	7c7a      	ldrb	r2, [r7, #17]
 80068b2:	4939      	ldr	r1, [pc, #228]	; (8006998 <etharp_query+0x268>)
 80068b4:	4613      	mov	r3, r2
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	4413      	add	r3, r2
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	440b      	add	r3, r1
 80068be:	3314      	adds	r3, #20
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d15c      	bne.n	8006980 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	61fb      	str	r3, [r7, #28]
    while (p) {
 80068ce:	e01c      	b.n	800690a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	895a      	ldrh	r2, [r3, #10]
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	891b      	ldrh	r3, [r3, #8]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d10a      	bne.n	80068f2 <etharp_query+0x1c2>
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d006      	beq.n	80068f2 <etharp_query+0x1c2>
 80068e4:	4b29      	ldr	r3, [pc, #164]	; (800698c <etharp_query+0x25c>)
 80068e6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80068ea:	492f      	ldr	r1, [pc, #188]	; (80069a8 <etharp_query+0x278>)
 80068ec:	4829      	ldr	r0, [pc, #164]	; (8006994 <etharp_query+0x264>)
 80068ee:	f00a f885 	bl	80109fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	7b1b      	ldrb	r3, [r3, #12]
 80068f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <etharp_query+0x1d4>
        copy_needed = 1;
 80068fe:	2301      	movs	r3, #1
 8006900:	61bb      	str	r3, [r7, #24]
        break;
 8006902:	e005      	b.n	8006910 <etharp_query+0x1e0>
      }
      p = p->next;
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	61fb      	str	r3, [r7, #28]
    while (p) {
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1df      	bne.n	80068d0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d007      	beq.n	8006926 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	f44f 7120 	mov.w	r1, #640	; 0x280
 800691c:	200e      	movs	r0, #14
 800691e:	f003 f893 	bl	8009a48 <pbuf_clone>
 8006922:	61f8      	str	r0, [r7, #28]
 8006924:	e004      	b.n	8006930 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800692a:	69f8      	ldr	r0, [r7, #28]
 800692c:	f002 fec0 	bl	80096b0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d021      	beq.n	800697a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8006936:	7c7a      	ldrb	r2, [r7, #17]
 8006938:	4917      	ldr	r1, [pc, #92]	; (8006998 <etharp_query+0x268>)
 800693a:	4613      	mov	r3, r2
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4413      	add	r3, r2
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	440b      	add	r3, r1
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800694a:	7c7a      	ldrb	r2, [r7, #17]
 800694c:	4912      	ldr	r1, [pc, #72]	; (8006998 <etharp_query+0x268>)
 800694e:	4613      	mov	r3, r2
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	4413      	add	r3, r2
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	440b      	add	r3, r1
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f002 fe08 	bl	8009570 <pbuf_free>
      }
      arp_table[i].q = p;
 8006960:	7c7a      	ldrb	r2, [r7, #17]
 8006962:	490d      	ldr	r1, [pc, #52]	; (8006998 <etharp_query+0x268>)
 8006964:	4613      	mov	r3, r2
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	4413      	add	r3, r2
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	440b      	add	r3, r1
 800696e:	69fa      	ldr	r2, [r7, #28]
 8006970:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006978:	e002      	b.n	8006980 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800697a:	23ff      	movs	r3, #255	; 0xff
 800697c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8006980:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006984:	4618      	mov	r0, r3
 8006986:	3728      	adds	r7, #40	; 0x28
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	08011edc 	.word	0x08011edc
 8006990:	08012088 	.word	0x08012088
 8006994:	08011f54 	.word	0x08011f54
 8006998:	200004ec 	.word	0x200004ec
 800699c:	08012098 	.word	0x08012098
 80069a0:	0801207c 	.word	0x0801207c
 80069a4:	200005dc 	.word	0x200005dc
 80069a8:	080120c0 	.word	0x080120c0

080069ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	; 0x28
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d106      	bne.n	80069d2 <etharp_raw+0x26>
 80069c4:	4b3a      	ldr	r3, [pc, #232]	; (8006ab0 <etharp_raw+0x104>)
 80069c6:	f240 4257 	movw	r2, #1111	; 0x457
 80069ca:	493a      	ldr	r1, [pc, #232]	; (8006ab4 <etharp_raw+0x108>)
 80069cc:	483a      	ldr	r0, [pc, #232]	; (8006ab8 <etharp_raw+0x10c>)
 80069ce:	f00a f815 	bl	80109fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80069d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80069d6:	211c      	movs	r1, #28
 80069d8:	200e      	movs	r0, #14
 80069da:	f002 fae7 	bl	8008fac <pbuf_alloc>
 80069de:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d102      	bne.n	80069ec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80069e6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ea:	e05d      	b.n	8006aa8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	895b      	ldrh	r3, [r3, #10]
 80069f0:	2b1b      	cmp	r3, #27
 80069f2:	d806      	bhi.n	8006a02 <etharp_raw+0x56>
 80069f4:	4b2e      	ldr	r3, [pc, #184]	; (8006ab0 <etharp_raw+0x104>)
 80069f6:	f240 4263 	movw	r2, #1123	; 0x463
 80069fa:	4930      	ldr	r1, [pc, #192]	; (8006abc <etharp_raw+0x110>)
 80069fc:	482e      	ldr	r0, [pc, #184]	; (8006ab8 <etharp_raw+0x10c>)
 80069fe:	f009 fffd 	bl	80109fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8006a08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fd fa6e 	bl	8003eec <lwip_htons>
 8006a10:	4603      	mov	r3, r0
 8006a12:	461a      	mov	r2, r3
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a1e:	2b06      	cmp	r3, #6
 8006a20:	d006      	beq.n	8006a30 <etharp_raw+0x84>
 8006a22:	4b23      	ldr	r3, [pc, #140]	; (8006ab0 <etharp_raw+0x104>)
 8006a24:	f240 426a 	movw	r2, #1130	; 0x46a
 8006a28:	4925      	ldr	r1, [pc, #148]	; (8006ac0 <etharp_raw+0x114>)
 8006a2a:	4823      	ldr	r0, [pc, #140]	; (8006ab8 <etharp_raw+0x10c>)
 8006a2c:	f009 ffe6 	bl	80109fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	3308      	adds	r3, #8
 8006a34:	2206      	movs	r2, #6
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f009 ffcc 	bl	80109d6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	3312      	adds	r3, #18
 8006a42:	2206      	movs	r2, #6
 8006a44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a46:	4618      	mov	r0, r3
 8006a48:	f009 ffc5 	bl	80109d6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	330e      	adds	r3, #14
 8006a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	3318      	adds	r3, #24
 8006a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f042 0201 	orr.w	r2, r2, #1
 8006a6c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f042 0208 	orr.w	r2, r2, #8
 8006a76:	709a      	strb	r2, [r3, #2]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2206      	movs	r2, #6
 8006a80:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2204      	movs	r2, #4
 8006a86:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006a88:	f640 0306 	movw	r3, #2054	; 0x806
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	69b9      	ldr	r1, [r7, #24]
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f009 fef9 	bl	801088c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8006a9a:	69b8      	ldr	r0, [r7, #24]
 8006a9c:	f002 fd68 	bl	8009570 <pbuf_free>
  p = NULL;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8006aa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	08011edc 	.word	0x08011edc
 8006ab4:	0801202c 	.word	0x0801202c
 8006ab8:	08011f54 	.word	0x08011f54
 8006abc:	080120dc 	.word	0x080120dc
 8006ac0:	08012110 	.word	0x08012110

08006ac4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af04      	add	r7, sp, #16
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	9203      	str	r2, [sp, #12]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	9202      	str	r2, [sp, #8]
 8006ae8:	4a06      	ldr	r2, [pc, #24]	; (8006b04 <etharp_request_dst+0x40>)
 8006aea:	9201      	str	r2, [sp, #4]
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	4603      	mov	r3, r0
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7ff ff5a 	bl	80069ac <etharp_raw>
 8006af8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	08014b9c 	.word	0x08014b9c

08006b08 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8006b12:	4a05      	ldr	r2, [pc, #20]	; (8006b28 <etharp_request+0x20>)
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff ffd4 	bl	8006ac4 <etharp_request_dst>
 8006b1c:	4603      	mov	r3, r0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	08014b94 	.word	0x08014b94

08006b2c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08e      	sub	sp, #56	; 0x38
 8006b30:	af04      	add	r7, sp, #16
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8006b36:	4b79      	ldr	r3, [pc, #484]	; (8006d1c <icmp_input+0x1f0>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8006b4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b4e:	2b13      	cmp	r3, #19
 8006b50:	f240 80cd 	bls.w	8006cee <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	895b      	ldrh	r3, [r3, #10]
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	f240 80ca 	bls.w	8006cf2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8006b68:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 80b7 	beq.w	8006ce0 <icmp_input+0x1b4>
 8006b72:	2b08      	cmp	r3, #8
 8006b74:	f040 80b7 	bne.w	8006ce6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8006b78:	4b69      	ldr	r3, [pc, #420]	; (8006d20 <icmp_input+0x1f4>)
 8006b7a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006b7c:	4b67      	ldr	r3, [pc, #412]	; (8006d1c <icmp_input+0x1f0>)
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b84:	2be0      	cmp	r3, #224	; 0xe0
 8006b86:	f000 80bb 	beq.w	8006d00 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8006b8a:	4b64      	ldr	r3, [pc, #400]	; (8006d1c <icmp_input+0x1f0>)
 8006b8c:	695a      	ldr	r2, [r3, #20]
 8006b8e:	4b63      	ldr	r3, [pc, #396]	; (8006d1c <icmp_input+0x1f0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4619      	mov	r1, r3
 8006b94:	4610      	mov	r0, r2
 8006b96:	f000 fc03 	bl	80073a0 <ip4_addr_isbroadcast_u32>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f040 80b1 	bne.w	8006d04 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	891b      	ldrh	r3, [r3, #8]
 8006ba6:	2b07      	cmp	r3, #7
 8006ba8:	f240 80a5 	bls.w	8006cf6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006bac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bae:	330e      	adds	r3, #14
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f002 fc46 	bl	8009444 <pbuf_add_header>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d04b      	beq.n	8006c56 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	891a      	ldrh	r2, [r3, #8]
 8006bc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bc4:	4413      	add	r3, r2
 8006bc6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	891b      	ldrh	r3, [r3, #8]
 8006bcc:	8b7a      	ldrh	r2, [r7, #26]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	f0c0 809a 	bcc.w	8006d08 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8006bd4:	8b7b      	ldrh	r3, [r7, #26]
 8006bd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006bda:	4619      	mov	r1, r3
 8006bdc:	200e      	movs	r0, #14
 8006bde:	f002 f9e5 	bl	8008fac <pbuf_alloc>
 8006be2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8090 	beq.w	8006d0c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	895b      	ldrh	r3, [r3, #10]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d203      	bcs.n	8006c02 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8006bfa:	6978      	ldr	r0, [r7, #20]
 8006bfc:	f002 fcb8 	bl	8009570 <pbuf_free>
          goto icmperr;
 8006c00:	e085      	b.n	8006d0e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f009 fee3 	bl	80109d6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8006c10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c12:	4619      	mov	r1, r3
 8006c14:	6978      	ldr	r0, [r7, #20]
 8006c16:	f002 fc25 	bl	8009464 <pbuf_remove_header>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d009      	beq.n	8006c34 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8006c20:	4b40      	ldr	r3, [pc, #256]	; (8006d24 <icmp_input+0x1f8>)
 8006c22:	22b6      	movs	r2, #182	; 0xb6
 8006c24:	4940      	ldr	r1, [pc, #256]	; (8006d28 <icmp_input+0x1fc>)
 8006c26:	4841      	ldr	r0, [pc, #260]	; (8006d2c <icmp_input+0x200>)
 8006c28:	f009 fee8 	bl	80109fc <iprintf>
          pbuf_free(r);
 8006c2c:	6978      	ldr	r0, [r7, #20]
 8006c2e:	f002 fc9f 	bl	8009570 <pbuf_free>
          goto icmperr;
 8006c32:	e06c      	b.n	8006d0e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	6978      	ldr	r0, [r7, #20]
 8006c38:	f002 fdc2 	bl	80097c0 <pbuf_copy>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8006c42:	6978      	ldr	r0, [r7, #20]
 8006c44:	f002 fc94 	bl	8009570 <pbuf_free>
          goto icmperr;
 8006c48:	e061      	b.n	8006d0e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f002 fc90 	bl	8009570 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	607b      	str	r3, [r7, #4]
 8006c54:	e00f      	b.n	8006c76 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006c56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c58:	330e      	adds	r3, #14
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f002 fc01 	bl	8009464 <pbuf_remove_header>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d006      	beq.n	8006c76 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8006c68:	4b2e      	ldr	r3, [pc, #184]	; (8006d24 <icmp_input+0x1f8>)
 8006c6a:	22c7      	movs	r2, #199	; 0xc7
 8006c6c:	4930      	ldr	r1, [pc, #192]	; (8006d30 <icmp_input+0x204>)
 8006c6e:	482f      	ldr	r0, [pc, #188]	; (8006d2c <icmp_input+0x200>)
 8006c70:	f009 fec4 	bl	80109fc <iprintf>
          goto icmperr;
 8006c74:	e04b      	b.n	8006d0e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8006c7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f002 fbdf 	bl	8009444 <pbuf_add_header>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d12b      	bne.n	8006ce4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8006c9a:	4b20      	ldr	r3, [pc, #128]	; (8006d1c <icmp_input+0x1f0>)
 8006c9c:	691a      	ldr	r2, [r3, #16]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2200      	movs	r2, #0
 8006cac:	709a      	strb	r2, [r3, #2]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	22ff      	movs	r2, #255	; 0xff
 8006cb6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	729a      	strb	r2, [r3, #10]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	9302      	str	r3, [sp, #8]
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	23ff      	movs	r3, #255	; 0xff
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	69f9      	ldr	r1, [r7, #28]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fa8b 	bl	80071f0 <ip4_output_if>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8006cde:	e001      	b.n	8006ce4 <icmp_input+0x1b8>
      break;
 8006ce0:	bf00      	nop
 8006ce2:	e000      	b.n	8006ce6 <icmp_input+0x1ba>
      break;
 8006ce4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f002 fc42 	bl	8009570 <pbuf_free>
  return;
 8006cec:	e013      	b.n	8006d16 <icmp_input+0x1ea>
    goto lenerr;
 8006cee:	bf00      	nop
 8006cf0:	e002      	b.n	8006cf8 <icmp_input+0x1cc>
    goto lenerr;
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <icmp_input+0x1cc>
        goto lenerr;
 8006cf6:	bf00      	nop
lenerr:
  pbuf_free(p);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f002 fc39 	bl	8009570 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8006cfe:	e00a      	b.n	8006d16 <icmp_input+0x1ea>
        goto icmperr;
 8006d00:	bf00      	nop
 8006d02:	e004      	b.n	8006d0e <icmp_input+0x1e2>
        goto icmperr;
 8006d04:	bf00      	nop
 8006d06:	e002      	b.n	8006d0e <icmp_input+0x1e2>
          goto icmperr;
 8006d08:	bf00      	nop
 8006d0a:	e000      	b.n	8006d0e <icmp_input+0x1e2>
          goto icmperr;
 8006d0c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f002 fc2e 	bl	8009570 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8006d14:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8006d16:	3728      	adds	r7, #40	; 0x28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20003794 	.word	0x20003794
 8006d20:	200037a8 	.word	0x200037a8
 8006d24:	08012154 	.word	0x08012154
 8006d28:	0801218c 	.word	0x0801218c
 8006d2c:	080121c4 	.word	0x080121c4
 8006d30:	080121ec 	.word	0x080121ec

08006d34 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	461a      	mov	r2, r3
 8006d44:	2103      	movs	r1, #3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f814 	bl	8006d74 <icmp_send_response>
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	461a      	mov	r2, r3
 8006d64:	210b      	movs	r1, #11
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f804 	bl	8006d74 <icmp_send_response>
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08c      	sub	sp, #48	; 0x30
 8006d78:	af04      	add	r7, sp, #16
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
 8006d80:	4613      	mov	r3, r2
 8006d82:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006d84:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006d88:	2124      	movs	r1, #36	; 0x24
 8006d8a:	2022      	movs	r0, #34	; 0x22
 8006d8c:	f002 f90e 	bl	8008fac <pbuf_alloc>
 8006d90:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d04c      	beq.n	8006e32 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	895b      	ldrh	r3, [r3, #10]
 8006d9c:	2b23      	cmp	r3, #35	; 0x23
 8006d9e:	d806      	bhi.n	8006dae <icmp_send_response+0x3a>
 8006da0:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <icmp_send_response+0xc8>)
 8006da2:	f240 1269 	movw	r2, #361	; 0x169
 8006da6:	4926      	ldr	r1, [pc, #152]	; (8006e40 <icmp_send_response+0xcc>)
 8006da8:	4826      	ldr	r0, [pc, #152]	; (8006e44 <icmp_send_response+0xd0>)
 8006daa:	f009 fe27 	bl	80109fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	78fa      	ldrb	r2, [r7, #3]
 8006dbe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	78ba      	ldrb	r2, [r7, #2]
 8006dc4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	711a      	strb	r2, [r3, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	719a      	strb	r2, [r3, #6]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f103 0008 	add.w	r0, r3, #8
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	221c      	movs	r2, #28
 8006de8:	4619      	mov	r1, r3
 8006dea:	f009 fdf4 	bl	80109d6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8006df4:	f107 030c 	add.w	r3, r7, #12
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 f825 	bl	8006e48 <ip4_route>
 8006dfe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d011      	beq.n	8006e2a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	709a      	strb	r2, [r3, #2]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006e10:	f107 020c 	add.w	r2, r7, #12
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	9302      	str	r3, [sp, #8]
 8006e18:	2301      	movs	r3, #1
 8006e1a:	9301      	str	r3, [sp, #4]
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	23ff      	movs	r3, #255	; 0xff
 8006e22:	2100      	movs	r1, #0
 8006e24:	69f8      	ldr	r0, [r7, #28]
 8006e26:	f000 f9e3 	bl	80071f0 <ip4_output_if>
  }
  pbuf_free(q);
 8006e2a:	69f8      	ldr	r0, [r7, #28]
 8006e2c:	f002 fba0 	bl	8009570 <pbuf_free>
 8006e30:	e000      	b.n	8006e34 <icmp_send_response+0xc0>
    return;
 8006e32:	bf00      	nop
}
 8006e34:	3720      	adds	r7, #32
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	08012154 	.word	0x08012154
 8006e40:	08012220 	.word	0x08012220
 8006e44:	080121c4 	.word	0x080121c4

08006e48 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8006e50:	4b31      	ldr	r3, [pc, #196]	; (8006f18 <ip4_route+0xd0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	e033      	b.n	8006ec0 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d029      	beq.n	8006eba <ip4_route+0x72>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d022      	beq.n	8006eba <ip4_route+0x72>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3304      	adds	r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d01d      	beq.n	8006eba <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3304      	adds	r3, #4
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	405a      	eors	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4013      	ands	r3, r2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	e038      	b.n	8006f0c <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d108      	bne.n	8006eba <ip4_route+0x72>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	330c      	adds	r3, #12
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d101      	bne.n	8006eba <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	e028      	b.n	8006f0c <ip4_route+0xc4>
  NETIF_FOREACH(netif) {
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1c8      	bne.n	8006e58 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006ec6:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <ip4_route+0xd4>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d01a      	beq.n	8006f04 <ip4_route+0xbc>
 8006ece:	4b13      	ldr	r3, [pc, #76]	; (8006f1c <ip4_route+0xd4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d012      	beq.n	8006f04 <ip4_route+0xbc>
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <ip4_route+0xd4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8006eee:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <ip4_route+0xd4>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d004      	beq.n	8006f04 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b7f      	cmp	r3, #127	; 0x7f
 8006f02:	d101      	bne.n	8006f08 <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8006f04:	2300      	movs	r3, #0
 8006f06:	e001      	b.n	8006f0c <ip4_route+0xc4>
  }

  return netif_default;
 8006f08:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <ip4_route+0xd4>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	20006d10 	.word	0x20006d10
 8006f1c:	20006d14 	.word	0x20006d14

08006f20 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d016      	beq.n	8006f64 <ip4_input_accept+0x44>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d011      	beq.n	8006f64 <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006f40:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <ip4_input_accept+0x50>)
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3304      	adds	r3, #4
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d008      	beq.n	8006f60 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8006f4e:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <ip4_input_accept+0x50>)
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fa23 	bl	80073a0 <ip4_addr_isbroadcast_u32>
 8006f5a:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20003794 	.word	0x20003794

08006f74 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	091b      	lsrs	r3, r3, #4
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d004      	beq.n	8006f9e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f002 faeb 	bl	8009570 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e120      	b.n	80071e0 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	885b      	ldrh	r3, [r3, #2]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fc ff99 	bl	8003eec <lwip_htons>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	891b      	ldrh	r3, [r3, #8]
 8006fc2:	8a3a      	ldrh	r2, [r7, #16]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d204      	bcs.n	8006fd2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8006fc8:	8a3b      	ldrh	r3, [r7, #16]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f002 f947 	bl	8009260 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	895b      	ldrh	r3, [r3, #10]
 8006fd6:	8a7a      	ldrh	r2, [r7, #18]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d807      	bhi.n	8006fec <ip4_input+0x78>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	891b      	ldrh	r3, [r3, #8]
 8006fe0:	8a3a      	ldrh	r2, [r7, #16]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d802      	bhi.n	8006fec <ip4_input+0x78>
 8006fe6:	8a7b      	ldrh	r3, [r7, #18]
 8006fe8:	2b13      	cmp	r3, #19
 8006fea:	d804      	bhi.n	8006ff6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f002 fabf 	bl	8009570 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e0f4      	b.n	80071e0 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	4a7b      	ldr	r2, [pc, #492]	; (80071e8 <ip4_input+0x274>)
 8006ffc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	4a79      	ldr	r2, [pc, #484]	; (80071e8 <ip4_input+0x274>)
 8007004:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007006:	4b78      	ldr	r3, [pc, #480]	; (80071e8 <ip4_input+0x274>)
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800700e:	2be0      	cmp	r3, #224	; 0xe0
 8007010:	d111      	bne.n	8007036 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <ip4_input+0xbc>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	3304      	adds	r3, #4
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <ip4_input+0xbc>
      netif = inp;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	e02a      	b.n	8007086 <ip4_input+0x112>
    } else {
      netif = NULL;
 8007030:	2300      	movs	r3, #0
 8007032:	61bb      	str	r3, [r7, #24]
 8007034:	e027      	b.n	8007086 <ip4_input+0x112>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8007036:	6838      	ldr	r0, [r7, #0]
 8007038:	f7ff ff72 	bl	8006f20 <ip4_input_accept>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <ip4_input+0xd4>
      netif = inp;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	e01e      	b.n	8007086 <ip4_input+0x112>
    } else {
      netif = NULL;
 8007048:	2300      	movs	r3, #0
 800704a:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800704c:	4b66      	ldr	r3, [pc, #408]	; (80071e8 <ip4_input+0x274>)
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b7f      	cmp	r3, #127	; 0x7f
 8007054:	d017      	beq.n	8007086 <ip4_input+0x112>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8007056:	4b65      	ldr	r3, [pc, #404]	; (80071ec <ip4_input+0x278>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	61bb      	str	r3, [r7, #24]
 800705c:	e00e      	b.n	800707c <ip4_input+0x108>
          if (netif == inp) {
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d006      	beq.n	8007074 <ip4_input+0x100>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8007066:	69b8      	ldr	r0, [r7, #24]
 8007068:	f7ff ff5a 	bl	8006f20 <ip4_input_accept>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d108      	bne.n	8007084 <ip4_input+0x110>
 8007072:	e000      	b.n	8007076 <ip4_input+0x102>
            continue;
 8007074:	bf00      	nop
        NETIF_FOREACH(netif) {
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	61bb      	str	r3, [r7, #24]
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1ed      	bne.n	800705e <ip4_input+0xea>
 8007082:	e000      	b.n	8007086 <ip4_input+0x112>
            break;
 8007084:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d111      	bne.n	80070b0 <ip4_input+0x13c>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	7a5b      	ldrb	r3, [r3, #9]
 8007090:	2b11      	cmp	r3, #17
 8007092:	d10d      	bne.n	80070b0 <ip4_input+0x13c>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8007094:	8a7b      	ldrh	r3, [r7, #18]
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	4413      	add	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	885b      	ldrh	r3, [r3, #2]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80070a6:	d103      	bne.n	80070b0 <ip4_input+0x13c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d017      	beq.n	80070e6 <ip4_input+0x172>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80070b6:	4b4c      	ldr	r3, [pc, #304]	; (80071e8 <ip4_input+0x274>)
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d013      	beq.n	80070e6 <ip4_input+0x172>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80070be:	4b4a      	ldr	r3, [pc, #296]	; (80071e8 <ip4_input+0x274>)
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 f96b 	bl	80073a0 <ip4_addr_isbroadcast_u32>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d105      	bne.n	80070dc <ip4_input+0x168>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80070d0:	4b45      	ldr	r3, [pc, #276]	; (80071e8 <ip4_input+0x274>)
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80070d8:	2be0      	cmp	r3, #224	; 0xe0
 80070da:	d104      	bne.n	80070e6 <ip4_input+0x172>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f002 fa47 	bl	8009570 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	e07c      	b.n	80071e0 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d104      	bne.n	80070f6 <ip4_input+0x182>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f002 fa3f 	bl	8009570 <pbuf_free>
    return ERR_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e074      	b.n	80071e0 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	88db      	ldrh	r3, [r3, #6]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8007102:	4013      	ands	r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00b      	beq.n	8007120 <ip4_input+0x1ac>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fc8f 	bl	8007a2c <ip4_reass>
 800710e:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <ip4_input+0x1a6>
      return ERR_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	e062      	b.n	80071e0 <ip4_input+0x26c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8007120:	4a31      	ldr	r2, [pc, #196]	; (80071e8 <ip4_input+0x274>)
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8007126:	4a30      	ldr	r2, [pc, #192]	; (80071e8 <ip4_input+0x274>)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800712c:	4a2e      	ldr	r2, [pc, #184]	; (80071e8 <ip4_input+0x274>)
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f003 030f 	and.w	r3, r3, #15
 800713a:	b2db      	uxtb	r3, r3
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	b2db      	uxtb	r3, r3
 8007140:	b29a      	uxth	r2, r3
 8007142:	4b29      	ldr	r3, [pc, #164]	; (80071e8 <ip4_input+0x274>)
 8007144:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8007146:	8a7b      	ldrh	r3, [r7, #18]
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f002 f98a 	bl	8009464 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	7a5b      	ldrb	r3, [r3, #9]
 8007154:	2b06      	cmp	r3, #6
 8007156:	d009      	beq.n	800716c <ip4_input+0x1f8>
 8007158:	2b11      	cmp	r3, #17
 800715a:	d002      	beq.n	8007162 <ip4_input+0x1ee>
 800715c:	2b01      	cmp	r3, #1
 800715e:	d00a      	beq.n	8007176 <ip4_input+0x202>
 8007160:	e00e      	b.n	8007180 <ip4_input+0x20c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f008 fef3 	bl	800ff50 <udp_input>
        break;
 800716a:	e026      	b.n	80071ba <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f004 fad2 	bl	800b718 <tcp_input>
        break;
 8007174:	e021      	b.n	80071ba <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff fcd7 	bl	8006b2c <icmp_input>
        break;
 800717e:	e01c      	b.n	80071ba <ip4_input+0x246>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8007180:	4b19      	ldr	r3, [pc, #100]	; (80071e8 <ip4_input+0x274>)
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	69b9      	ldr	r1, [r7, #24]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 f90a 	bl	80073a0 <ip4_addr_isbroadcast_u32>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10f      	bne.n	80071b2 <ip4_input+0x23e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <ip4_input+0x274>)
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800719a:	2be0      	cmp	r3, #224	; 0xe0
 800719c:	d009      	beq.n	80071b2 <ip4_input+0x23e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800719e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f002 f9d0 	bl	800954a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80071aa:	2102      	movs	r1, #2
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff fdc1 	bl	8006d34 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f002 f9dc 	bl	8009570 <pbuf_free>
        break;
 80071b8:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <ip4_input+0x274>)
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80071c0:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <ip4_input+0x274>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <ip4_input+0x274>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80071cc:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <ip4_input+0x274>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80071d2:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <ip4_input+0x274>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80071d8:	4b03      	ldr	r3, [pc, #12]	; (80071e8 <ip4_input+0x274>)
 80071da:	2200      	movs	r2, #0
 80071dc:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3720      	adds	r7, #32
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20003794 	.word	0x20003794
 80071ec:	20006d10 	.word	0x20006d10

080071f0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	; 0x28
 80071f4:	af04      	add	r7, sp, #16
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d009      	beq.n	800721c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <ip4_output_if+0x26>
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d102      	bne.n	800721c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8007216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007218:	3304      	adds	r3, #4
 800721a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800721c:	78fa      	ldrb	r2, [r7, #3]
 800721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007220:	9302      	str	r3, [sp, #8]
 8007222:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007226:	9301      	str	r3, [sp, #4]
 8007228:	f897 3020 	ldrb.w	r3, [r7, #32]
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	4613      	mov	r3, r2
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6979      	ldr	r1, [r7, #20]
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f805 	bl	8007244 <ip4_output_if_src>
 800723a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800723c:	4618      	mov	r0, r3
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	7b9b      	ldrb	r3, [r3, #14]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d006      	beq.n	8007268 <ip4_output_if_src+0x24>
 800725a:	4b4b      	ldr	r3, [pc, #300]	; (8007388 <ip4_output_if_src+0x144>)
 800725c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8007260:	494a      	ldr	r1, [pc, #296]	; (800738c <ip4_output_if_src+0x148>)
 8007262:	484b      	ldr	r0, [pc, #300]	; (8007390 <ip4_output_if_src+0x14c>)
 8007264:	f009 fbca 	bl	80109fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d060      	beq.n	8007330 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800726e:	2314      	movs	r3, #20
 8007270:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8007272:	2114      	movs	r1, #20
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f002 f8e5 	bl	8009444 <pbuf_add_header>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8007280:	f06f 0301 	mvn.w	r3, #1
 8007284:	e07c      	b.n	8007380 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	895b      	ldrh	r3, [r3, #10]
 8007290:	2b13      	cmp	r3, #19
 8007292:	d806      	bhi.n	80072a2 <ip4_output_if_src+0x5e>
 8007294:	4b3c      	ldr	r3, [pc, #240]	; (8007388 <ip4_output_if_src+0x144>)
 8007296:	f240 3289 	movw	r2, #905	; 0x389
 800729a:	493e      	ldr	r1, [pc, #248]	; (8007394 <ip4_output_if_src+0x150>)
 800729c:	483c      	ldr	r0, [pc, #240]	; (8007390 <ip4_output_if_src+0x14c>)
 800729e:	f009 fbad 	bl	80109fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80072ae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80072b8:	8bfb      	ldrh	r3, [r7, #30]
 80072ba:	089b      	lsrs	r3, r3, #2
 80072bc:	b29b      	uxth	r3, r3
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80072d0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	891b      	ldrh	r3, [r3, #8]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fc fe08 	bl	8003eec <lwip_htons>
 80072dc:	4603      	mov	r3, r0
 80072de:	461a      	mov	r2, r3
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2200      	movs	r2, #0
 80072e8:	719a      	strb	r2, [r3, #6]
 80072ea:	2200      	movs	r2, #0
 80072ec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80072ee:	4b2a      	ldr	r3, [pc, #168]	; (8007398 <ip4_output_if_src+0x154>)
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fc fdfa 	bl	8003eec <lwip_htons>
 80072f8:	4603      	mov	r3, r0
 80072fa:	461a      	mov	r2, r3
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8007300:	4b25      	ldr	r3, [pc, #148]	; (8007398 <ip4_output_if_src+0x154>)
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	3301      	adds	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	4b23      	ldr	r3, [pc, #140]	; (8007398 <ip4_output_if_src+0x154>)
 800730a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d104      	bne.n	800731c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8007312:	4b22      	ldr	r3, [pc, #136]	; (800739c <ip4_output_if_src+0x158>)
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	60da      	str	r2, [r3, #12]
 800731a:	e003      	b.n	8007324 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	2200      	movs	r2, #0
 8007328:	729a      	strb	r2, [r3, #10]
 800732a:	2200      	movs	r2, #0
 800732c:	72da      	strb	r2, [r3, #11]
 800732e:	e00f      	b.n	8007350 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	895b      	ldrh	r3, [r3, #10]
 8007334:	2b13      	cmp	r3, #19
 8007336:	d802      	bhi.n	800733e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8007338:	f06f 0301 	mvn.w	r3, #1
 800733c:	e020      	b.n	8007380 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800734a:	f107 0314 	add.w	r3, r7, #20
 800734e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00c      	beq.n	8007372 <ip4_output_if_src+0x12e>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	891a      	ldrh	r2, [r3, #8]
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007360:	429a      	cmp	r2, r3
 8007362:	d906      	bls.n	8007372 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 fd47 	bl	8007dfc <ip4_frag>
 800736e:	4603      	mov	r3, r0
 8007370:	e006      	b.n	8007380 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	68f9      	ldr	r1, [r7, #12]
 800737a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800737c:	4798      	blx	r3
 800737e:	4603      	mov	r3, r0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3720      	adds	r7, #32
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	0801224c 	.word	0x0801224c
 800738c:	08012280 	.word	0x08012280
 8007390:	0801228c 	.word	0x0801228c
 8007394:	080122b4 	.word	0x080122b4
 8007398:	200005de 	.word	0x200005de
 800739c:	08014aac 	.word	0x08014aac

080073a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b4:	d002      	beq.n	80073bc <ip4_addr_isbroadcast_u32+0x1c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80073bc:	2301      	movs	r3, #1
 80073be:	e02a      	b.n	8007416 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e021      	b.n	8007416 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	3304      	adds	r3, #4
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d101      	bne.n	80073e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	e019      	b.n	8007416 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	3304      	adds	r3, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	405a      	eors	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	3308      	adds	r3, #8
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4013      	ands	r3, r2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10d      	bne.n	8007414 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	3308      	adds	r3, #8
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	43da      	mvns	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	3308      	adds	r3, #8
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800740c:	429a      	cmp	r2, r3
 800740e:	d101      	bne.n	8007414 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8007414:	2300      	movs	r3, #0
  }
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800742e:	4b12      	ldr	r3, [pc, #72]	; (8007478 <ip_reass_tmr+0x54>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8007434:	e018      	b.n	8007468 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	7fdb      	ldrb	r3, [r3, #31]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <ip_reass_tmr+0x32>
      r->timer--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	7fdb      	ldrb	r3, [r3, #31]
 8007442:	3b01      	subs	r3, #1
 8007444:	b2da      	uxtb	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	e008      	b.n	8007468 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f80a 	bl	800747c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e3      	bne.n	8007436 <ip_reass_tmr+0x12>
    }
  }
}
 800746e:	bf00      	nop
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	200005e0 	.word	0x200005e0

0800747c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	429a      	cmp	r2, r3
 8007490:	d105      	bne.n	800749e <ip_reass_free_complete_datagram+0x22>
 8007492:	4b45      	ldr	r3, [pc, #276]	; (80075a8 <ip_reass_free_complete_datagram+0x12c>)
 8007494:	22ab      	movs	r2, #171	; 0xab
 8007496:	4945      	ldr	r1, [pc, #276]	; (80075ac <ip_reass_free_complete_datagram+0x130>)
 8007498:	4845      	ldr	r0, [pc, #276]	; (80075b0 <ip_reass_free_complete_datagram+0x134>)
 800749a:	f009 faaf 	bl	80109fc <iprintf>
  if (prev != NULL) {
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d005      	beq.n	80074ba <ip_reass_free_complete_datagram+0x3e>
 80074ae:	4b3e      	ldr	r3, [pc, #248]	; (80075a8 <ip_reass_free_complete_datagram+0x12c>)
 80074b0:	22ad      	movs	r2, #173	; 0xad
 80074b2:	4940      	ldr	r1, [pc, #256]	; (80075b4 <ip_reass_free_complete_datagram+0x138>)
 80074b4:	483e      	ldr	r0, [pc, #248]	; (80075b0 <ip_reass_free_complete_datagram+0x134>)
 80074b6:	f009 faa1 	bl	80109fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	889b      	ldrh	r3, [r3, #4]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d12a      	bne.n	8007522 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	6858      	ldr	r0, [r3, #4]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3308      	adds	r3, #8
 80074e2:	2214      	movs	r2, #20
 80074e4:	4619      	mov	r1, r3
 80074e6:	f009 fa76 	bl	80109d6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80074ea:	2101      	movs	r1, #1
 80074ec:	69b8      	ldr	r0, [r7, #24]
 80074ee:	f7ff fc31 	bl	8006d54 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80074f2:	69b8      	ldr	r0, [r7, #24]
 80074f4:	f002 f8c4 	bl	8009680 <pbuf_clen>
 80074f8:	4603      	mov	r3, r0
 80074fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80074fc:	8bfa      	ldrh	r2, [r7, #30]
 80074fe:	8a7b      	ldrh	r3, [r7, #18]
 8007500:	4413      	add	r3, r2
 8007502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007506:	db05      	blt.n	8007514 <ip_reass_free_complete_datagram+0x98>
 8007508:	4b27      	ldr	r3, [pc, #156]	; (80075a8 <ip_reass_free_complete_datagram+0x12c>)
 800750a:	22bc      	movs	r2, #188	; 0xbc
 800750c:	492a      	ldr	r1, [pc, #168]	; (80075b8 <ip_reass_free_complete_datagram+0x13c>)
 800750e:	4828      	ldr	r0, [pc, #160]	; (80075b0 <ip_reass_free_complete_datagram+0x134>)
 8007510:	f009 fa74 	bl	80109fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8007514:	8bfa      	ldrh	r2, [r7, #30]
 8007516:	8a7b      	ldrh	r3, [r7, #18]
 8007518:	4413      	add	r3, r2
 800751a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800751c:	69b8      	ldr	r0, [r7, #24]
 800751e:	f002 f827 	bl	8009570 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8007528:	e01f      	b.n	800756a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f002 f8a0 	bl	8009680 <pbuf_clen>
 8007540:	4603      	mov	r3, r0
 8007542:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007544:	8bfa      	ldrh	r2, [r7, #30]
 8007546:	8a7b      	ldrh	r3, [r7, #18]
 8007548:	4413      	add	r3, r2
 800754a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800754e:	db05      	blt.n	800755c <ip_reass_free_complete_datagram+0xe0>
 8007550:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <ip_reass_free_complete_datagram+0x12c>)
 8007552:	22cc      	movs	r2, #204	; 0xcc
 8007554:	4918      	ldr	r1, [pc, #96]	; (80075b8 <ip_reass_free_complete_datagram+0x13c>)
 8007556:	4816      	ldr	r0, [pc, #88]	; (80075b0 <ip_reass_free_complete_datagram+0x134>)
 8007558:	f009 fa50 	bl	80109fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800755c:	8bfa      	ldrh	r2, [r7, #30]
 800755e:	8a7b      	ldrh	r3, [r7, #18]
 8007560:	4413      	add	r3, r2
 8007562:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f002 f803 	bl	8009570 <pbuf_free>
  while (p != NULL) {
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1dc      	bne.n	800752a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f8c2 	bl	80076fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8007578:	4b10      	ldr	r3, [pc, #64]	; (80075bc <ip_reass_free_complete_datagram+0x140>)
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	8bfa      	ldrh	r2, [r7, #30]
 800757e:	429a      	cmp	r2, r3
 8007580:	d905      	bls.n	800758e <ip_reass_free_complete_datagram+0x112>
 8007582:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <ip_reass_free_complete_datagram+0x12c>)
 8007584:	22d2      	movs	r2, #210	; 0xd2
 8007586:	490e      	ldr	r1, [pc, #56]	; (80075c0 <ip_reass_free_complete_datagram+0x144>)
 8007588:	4809      	ldr	r0, [pc, #36]	; (80075b0 <ip_reass_free_complete_datagram+0x134>)
 800758a:	f009 fa37 	bl	80109fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800758e:	4b0b      	ldr	r3, [pc, #44]	; (80075bc <ip_reass_free_complete_datagram+0x140>)
 8007590:	881a      	ldrh	r2, [r3, #0]
 8007592:	8bfb      	ldrh	r3, [r7, #30]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	b29a      	uxth	r2, r3
 8007598:	4b08      	ldr	r3, [pc, #32]	; (80075bc <ip_reass_free_complete_datagram+0x140>)
 800759a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800759c:	8bfb      	ldrh	r3, [r7, #30]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3720      	adds	r7, #32
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	080122e4 	.word	0x080122e4
 80075ac:	08012320 	.word	0x08012320
 80075b0:	0801232c 	.word	0x0801232c
 80075b4:	08012354 	.word	0x08012354
 80075b8:	08012368 	.word	0x08012368
 80075bc:	200005e4 	.word	0x200005e4
 80075c0:	08012388 	.word	0x08012388

080075c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08a      	sub	sp, #40	; 0x28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80075ce:	2300      	movs	r3, #0
 80075d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80075e2:	4b28      	ldr	r3, [pc, #160]	; (8007684 <ip_reass_remove_oldest_datagram+0xc0>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80075e8:	e030      	b.n	800764c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	695a      	ldr	r2, [r3, #20]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d10c      	bne.n	8007610 <ip_reass_remove_oldest_datagram+0x4c>
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d106      	bne.n	8007610 <ip_reass_remove_oldest_datagram+0x4c>
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	899a      	ldrh	r2, [r3, #12]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	889b      	ldrh	r3, [r3, #4]
 800760a:	b29b      	uxth	r3, r3
 800760c:	429a      	cmp	r2, r3
 800760e:	d014      	beq.n	800763a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	3301      	adds	r3, #1
 8007614:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	61bb      	str	r3, [r7, #24]
 8007624:	e009      	b.n	800763a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	7fda      	ldrb	r2, [r3, #31]
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	7fdb      	ldrb	r3, [r3, #31]
 800762e:	429a      	cmp	r2, r3
 8007630:	d803      	bhi.n	800763a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1cb      	bne.n	80075ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d008      	beq.n	800766a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8007658:	69b9      	ldr	r1, [r7, #24]
 800765a:	6a38      	ldr	r0, [r7, #32]
 800765c:	f7ff ff0e 	bl	800747c <ip_reass_free_complete_datagram>
 8007660:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	da02      	bge.n	8007678 <ip_reass_remove_oldest_datagram+0xb4>
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b01      	cmp	r3, #1
 8007676:	dcac      	bgt.n	80075d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8007678:	697b      	ldr	r3, [r7, #20]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3728      	adds	r7, #40	; 0x28
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	200005e0 	.word	0x200005e0

08007688 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007692:	2004      	movs	r0, #4
 8007694:	f001 f908 	bl	80088a8 <memp_malloc>
 8007698:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d110      	bne.n	80076c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff ff8e 	bl	80075c4 <ip_reass_remove_oldest_datagram>
 80076a8:	4602      	mov	r2, r0
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	db03      	blt.n	80076b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80076b0:	2004      	movs	r0, #4
 80076b2:	f001 f8f9 	bl	80088a8 <memp_malloc>
 80076b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	e016      	b.n	80076f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80076c2:	2220      	movs	r2, #32
 80076c4:	2100      	movs	r1, #0
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f009 f990 	bl	80109ec <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	220f      	movs	r2, #15
 80076d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80076d2:	4b09      	ldr	r3, [pc, #36]	; (80076f8 <ip_reass_enqueue_new_datagram+0x70>)
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80076da:	4a07      	ldr	r2, [pc, #28]	; (80076f8 <ip_reass_enqueue_new_datagram+0x70>)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3308      	adds	r3, #8
 80076e4:	2214      	movs	r2, #20
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f009 f974 	bl	80109d6 <memcpy>
  return ipr;
 80076ee:	68fb      	ldr	r3, [r7, #12]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	200005e0 	.word	0x200005e0

080076fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <ip_reass_dequeue_datagram+0x4c>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	429a      	cmp	r2, r3
 800770e:	d104      	bne.n	800771a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a0c      	ldr	r2, [pc, #48]	; (8007748 <ip_reass_dequeue_datagram+0x4c>)
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	e00d      	b.n	8007736 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <ip_reass_dequeue_datagram+0x32>
 8007720:	4b0a      	ldr	r3, [pc, #40]	; (800774c <ip_reass_dequeue_datagram+0x50>)
 8007722:	f240 1245 	movw	r2, #325	; 0x145
 8007726:	490a      	ldr	r1, [pc, #40]	; (8007750 <ip_reass_dequeue_datagram+0x54>)
 8007728:	480a      	ldr	r0, [pc, #40]	; (8007754 <ip_reass_dequeue_datagram+0x58>)
 800772a:	f009 f967 	bl	80109fc <iprintf>
    prev->next = ipr->next;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	2004      	movs	r0, #4
 800773a:	f001 f901 	bl	8008940 <memp_free>
}
 800773e:	bf00      	nop
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	200005e0 	.word	0x200005e0
 800774c:	080122e4 	.word	0x080122e4
 8007750:	080123ac 	.word	0x080123ac
 8007754:	0801232c 	.word	0x0801232c

08007758 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08c      	sub	sp, #48	; 0x30
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8007768:	2301      	movs	r3, #1
 800776a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	885b      	ldrh	r3, [r3, #2]
 8007776:	b29b      	uxth	r3, r3
 8007778:	4618      	mov	r0, r3
 800777a:	f7fc fbb7 	bl	8003eec <lwip_htons>
 800777e:	4603      	mov	r3, r0
 8007780:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	f003 030f 	and.w	r3, r3, #15
 800778a:	b2db      	uxtb	r3, r3
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8007790:	7e7b      	ldrb	r3, [r7, #25]
 8007792:	b29b      	uxth	r3, r3
 8007794:	8b7a      	ldrh	r2, [r7, #26]
 8007796:	429a      	cmp	r2, r3
 8007798:	d202      	bcs.n	80077a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800779a:	f04f 33ff 	mov.w	r3, #4294967295
 800779e:	e135      	b.n	8007a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80077a0:	7e7b      	ldrb	r3, [r7, #25]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	8b7a      	ldrh	r2, [r7, #26]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	88db      	ldrh	r3, [r3, #6]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fc fb9b 	bl	8003eec <lwip_htons>
 80077b6:	4603      	mov	r3, r0
 80077b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077bc:	b29b      	uxth	r3, r3
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	2200      	movs	r2, #0
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	2200      	movs	r2, #0
 80077d0:	705a      	strb	r2, [r3, #1]
 80077d2:	2200      	movs	r2, #0
 80077d4:	709a      	strb	r2, [r3, #2]
 80077d6:	2200      	movs	r2, #0
 80077d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	8afa      	ldrh	r2, [r7, #22]
 80077de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80077e0:	8afa      	ldrh	r2, [r7, #22]
 80077e2:	8b7b      	ldrh	r3, [r7, #26]
 80077e4:	4413      	add	r3, r2
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	88db      	ldrh	r3, [r3, #6]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	8afa      	ldrh	r2, [r7, #22]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d902      	bls.n	80077fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80077f8:	f04f 33ff 	mov.w	r3, #4294967295
 80077fc:	e106      	b.n	8007a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
 8007804:	e068      	b.n	80078d8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	889b      	ldrh	r3, [r3, #4]
 8007810:	b29a      	uxth	r2, r3
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	889b      	ldrh	r3, [r3, #4]
 8007816:	b29b      	uxth	r3, r3
 8007818:	429a      	cmp	r2, r3
 800781a:	d235      	bcs.n	8007888 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007820:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	2b00      	cmp	r3, #0
 8007826:	d020      	beq.n	800786a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	889b      	ldrh	r3, [r3, #4]
 800782c:	b29a      	uxth	r2, r3
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	88db      	ldrh	r3, [r3, #6]
 8007832:	b29b      	uxth	r3, r3
 8007834:	429a      	cmp	r2, r3
 8007836:	d307      	bcc.n	8007848 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	88db      	ldrh	r3, [r3, #6]
 800783c:	b29a      	uxth	r2, r3
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	889b      	ldrh	r3, [r3, #4]
 8007842:	b29b      	uxth	r3, r3
 8007844:	429a      	cmp	r2, r3
 8007846:	d902      	bls.n	800784e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8007848:	f04f 33ff 	mov.w	r3, #4294967295
 800784c:	e0de      	b.n	8007a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	88db      	ldrh	r3, [r3, #6]
 8007858:	b29a      	uxth	r2, r3
 800785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785c:	889b      	ldrh	r3, [r3, #4]
 800785e:	b29b      	uxth	r3, r3
 8007860:	429a      	cmp	r2, r3
 8007862:	d03d      	beq.n	80078e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8007868:	e03a      	b.n	80078e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800786a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786c:	88db      	ldrh	r3, [r3, #6]
 800786e:	b29a      	uxth	r2, r3
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	889b      	ldrh	r3, [r3, #4]
 8007874:	b29b      	uxth	r3, r3
 8007876:	429a      	cmp	r2, r3
 8007878:	d902      	bls.n	8007880 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800787a:	f04f 33ff 	mov.w	r3, #4294967295
 800787e:	e0c5      	b.n	8007a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	605a      	str	r2, [r3, #4]
      break;
 8007886:	e02b      	b.n	80078e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	889b      	ldrh	r3, [r3, #4]
 800788c:	b29a      	uxth	r2, r3
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	889b      	ldrh	r3, [r3, #4]
 8007892:	b29b      	uxth	r3, r3
 8007894:	429a      	cmp	r2, r3
 8007896:	d102      	bne.n	800789e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8007898:	f04f 33ff 	mov.w	r3, #4294967295
 800789c:	e0b6      	b.n	8007a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	889b      	ldrh	r3, [r3, #4]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	88db      	ldrh	r3, [r3, #6]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d202      	bcs.n	80078b4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80078ae:	f04f 33ff 	mov.w	r3, #4294967295
 80078b2:	e0ab      	b.n	8007a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d009      	beq.n	80078ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	88db      	ldrh	r3, [r3, #6]
 80078be:	b29a      	uxth	r2, r3
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	889b      	ldrh	r3, [r3, #4]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d001      	beq.n	80078ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d193      	bne.n	8007806 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80078de:	e000      	b.n	80078e2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80078e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d12d      	bne.n	8007944 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01c      	beq.n	8007928 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	88db      	ldrh	r3, [r3, #6]
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f6:	889b      	ldrh	r3, [r3, #4]
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d906      	bls.n	800790c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80078fe:	4b45      	ldr	r3, [pc, #276]	; (8007a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8007900:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8007904:	4944      	ldr	r1, [pc, #272]	; (8007a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8007906:	4845      	ldr	r0, [pc, #276]	; (8007a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8007908:	f009 f878 	bl	80109fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	88db      	ldrh	r3, [r3, #6]
 8007916:	b29a      	uxth	r2, r3
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	889b      	ldrh	r3, [r3, #4]
 800791c:	b29b      	uxth	r3, r3
 800791e:	429a      	cmp	r2, r3
 8007920:	d010      	beq.n	8007944 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	623b      	str	r3, [r7, #32]
 8007926:	e00d      	b.n	8007944 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d006      	beq.n	800793e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8007930:	4b38      	ldr	r3, [pc, #224]	; (8007a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8007932:	f240 12bf 	movw	r2, #447	; 0x1bf
 8007936:	493a      	ldr	r1, [pc, #232]	; (8007a20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8007938:	4838      	ldr	r0, [pc, #224]	; (8007a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800793a:	f009 f85f 	bl	80109fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d105      	bne.n	8007956 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	7f9b      	ldrb	r3, [r3, #30]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d059      	beq.n	8007a0a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d04f      	beq.n	80079fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d006      	beq.n	8007972 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	889b      	ldrh	r3, [r3, #4]
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8007972:	2300      	movs	r3, #0
 8007974:	623b      	str	r3, [r7, #32]
 8007976:	e041      	b.n	80079fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8007982:	e012      	b.n	80079aa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	88db      	ldrh	r3, [r3, #6]
 800798e:	b29a      	uxth	r2, r3
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	889b      	ldrh	r3, [r3, #4]
 8007994:	b29b      	uxth	r3, r3
 8007996:	429a      	cmp	r2, r3
 8007998:	d002      	beq.n	80079a0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800799a:	2300      	movs	r3, #0
 800799c:	623b      	str	r3, [r7, #32]
            break;
 800799e:	e007      	b.n	80079b0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80079a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e9      	bne.n	8007984 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d022      	beq.n	80079fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d106      	bne.n	80079cc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80079be:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80079c0:	f240 12df 	movw	r2, #479	; 0x1df
 80079c4:	4917      	ldr	r1, [pc, #92]	; (8007a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80079c6:	4815      	ldr	r0, [pc, #84]	; (8007a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80079c8:	f009 f818 	bl	80109fc <iprintf>
          LWIP_ASSERT("sanity check",
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d106      	bne.n	80079e6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80079d8:	4b0e      	ldr	r3, [pc, #56]	; (8007a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80079da:	f240 12e1 	movw	r2, #481	; 0x1e1
 80079de:	4911      	ldr	r1, [pc, #68]	; (8007a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80079e0:	480e      	ldr	r0, [pc, #56]	; (8007a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80079e2:	f009 f80b 	bl	80109fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d006      	beq.n	80079fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80079f0:	f240 12e3 	movw	r2, #483	; 0x1e3
 80079f4:	490c      	ldr	r1, [pc, #48]	; (8007a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80079f6:	4809      	ldr	r0, [pc, #36]	; (8007a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80079f8:	f009 f800 	bl	80109fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	bf14      	ite	ne
 8007a02:	2301      	movne	r3, #1
 8007a04:	2300      	moveq	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	e000      	b.n	8007a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3730      	adds	r7, #48	; 0x30
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	080122e4 	.word	0x080122e4
 8007a18:	080123c8 	.word	0x080123c8
 8007a1c:	0801232c 	.word	0x0801232c
 8007a20:	080123e8 	.word	0x080123e8
 8007a24:	08012420 	.word	0x08012420
 8007a28:	08012430 	.word	0x08012430

08007a2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08e      	sub	sp, #56	; 0x38
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b14      	cmp	r3, #20
 8007a4a:	f040 8165 	bne.w	8007d18 <ip4_reass+0x2ec>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	88db      	ldrh	r3, [r3, #6]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fc fa49 	bl	8003eec <lwip_htons>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	885b      	ldrh	r3, [r3, #2]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fc fa3d 	bl	8003eec <lwip_htons>
 8007a72:	4603      	mov	r3, r0
 8007a74:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f003 030f 	and.w	r3, r3, #15
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8007a86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	f0c0 8144 	bcc.w	8007d1c <ip4_reass+0x2f0>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8007a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 fded 	bl	8009680 <pbuf_clen>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007aaa:	4ba1      	ldr	r3, [pc, #644]	; (8007d30 <ip4_reass+0x304>)
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	8c3b      	ldrh	r3, [r7, #32]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	2b0a      	cmp	r3, #10
 8007ab6:	dd10      	ble.n	8007ada <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007ab8:	8c3b      	ldrh	r3, [r7, #32]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007abe:	f7ff fd81 	bl	80075c4 <ip_reass_remove_oldest_datagram>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 812a 	beq.w	8007d1e <ip4_reass+0x2f2>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8007aca:	4b99      	ldr	r3, [pc, #612]	; (8007d30 <ip4_reass+0x304>)
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	8c3b      	ldrh	r3, [r7, #32]
 8007ad2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007ad4:	2b0a      	cmp	r3, #10
 8007ad6:	f300 8122 	bgt.w	8007d1e <ip4_reass+0x2f2>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007ada:	4b96      	ldr	r3, [pc, #600]	; (8007d34 <ip4_reass+0x308>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	633b      	str	r3, [r7, #48]	; 0x30
 8007ae0:	e015      	b.n	8007b0e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	695a      	ldr	r2, [r3, #20]
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d10c      	bne.n	8007b08 <ip4_reass+0xdc>
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	699a      	ldr	r2, [r3, #24]
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d106      	bne.n	8007b08 <ip4_reass+0xdc>
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	899a      	ldrh	r2, [r3, #12]
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	889b      	ldrh	r3, [r3, #4]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d006      	beq.n	8007b16 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e6      	bne.n	8007ae2 <ip4_reass+0xb6>
 8007b14:	e000      	b.n	8007b18 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8007b16:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8007b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8007b1e:	8c3b      	ldrh	r3, [r7, #32]
 8007b20:	4619      	mov	r1, r3
 8007b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b24:	f7ff fdb0 	bl	8007688 <ip_reass_enqueue_new_datagram>
 8007b28:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d11c      	bne.n	8007b6a <ip4_reass+0x13e>
      goto nullreturn;
 8007b30:	e0f5      	b.n	8007d1e <ip4_reass+0x2f2>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	88db      	ldrh	r3, [r3, #6]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fc f9d7 	bl	8003eec <lwip_htons>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d110      	bne.n	8007b6a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	89db      	ldrh	r3, [r3, #14]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fc f9cd 	bl	8003eec <lwip_htons>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d006      	beq.n	8007b6a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	3308      	adds	r3, #8
 8007b60:	2214      	movs	r2, #20
 8007b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b64:	4618      	mov	r0, r3
 8007b66:	f008 ff36 	bl	80109d6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	88db      	ldrh	r3, [r3, #6]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	bf0c      	ite	eq
 8007b78:	2301      	moveq	r3, #1
 8007b7a:	2300      	movne	r3, #0
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00e      	beq.n	8007ba4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8007b86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b8a:	4413      	add	r3, r2
 8007b8c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8007b8e:	8b7a      	ldrh	r2, [r7, #26]
 8007b90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b92:	429a      	cmp	r2, r3
 8007b94:	f0c0 80a1 	bcc.w	8007cda <ip4_reass+0x2ae>
 8007b98:	8b7b      	ldrh	r3, [r7, #26]
 8007b9a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	f200 809b 	bhi.w	8007cda <ip4_reass+0x2ae>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8007ba4:	69fa      	ldr	r2, [r7, #28]
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007baa:	f7ff fdd5 	bl	8007758 <ip_reass_chain_frag_into_datagram_and_validate>
 8007bae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	f000 808f 	beq.w	8007cd8 <ip4_reass+0x2ac>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8007bba:	4b5d      	ldr	r3, [pc, #372]	; (8007d30 <ip4_reass+0x304>)
 8007bbc:	881a      	ldrh	r2, [r3, #0]
 8007bbe:	8c3b      	ldrh	r3, [r7, #32]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	4b5a      	ldr	r3, [pc, #360]	; (8007d30 <ip4_reass+0x304>)
 8007bc6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00d      	beq.n	8007bea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8007bce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007bd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bd2:	4413      	add	r3, r2
 8007bd4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	8a7a      	ldrh	r2, [r7, #18]
 8007bda:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	7f9b      	ldrb	r3, [r3, #30]
 8007be0:	f043 0301 	orr.w	r3, r3, #1
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d171      	bne.n	8007cd4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	8b9b      	ldrh	r3, [r3, #28]
 8007bf4:	3314      	adds	r3, #20
 8007bf6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	2214      	movs	r2, #20
 8007c10:	4619      	mov	r1, r3
 8007c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c14:	f008 fedf 	bl	80109d6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8007c18:	8a3b      	ldrh	r3, [r7, #16]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fc f966 	bl	8003eec <lwip_htons>
 8007c20:	4603      	mov	r3, r0
 8007c22:	461a      	mov	r2, r3
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	719a      	strb	r2, [r3, #6]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	2200      	movs	r2, #0
 8007c36:	729a      	strb	r2, [r3, #10]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8007c42:	e00d      	b.n	8007c60 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8007c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8007c4a:	2114      	movs	r1, #20
 8007c4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007c4e:	f001 fc09 	bl	8009464 <pbuf_remove_header>
      pbuf_cat(p, r);
 8007c52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 fd4d 	bl	80096f4 <pbuf_cat>
      r = iprh->next_pbuf;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8007c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1ee      	bne.n	8007c44 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8007c66:	4b33      	ldr	r3, [pc, #204]	; (8007d34 <ip4_reass+0x308>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d102      	bne.n	8007c76 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c74:	e010      	b.n	8007c98 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007c76:	4b2f      	ldr	r3, [pc, #188]	; (8007d34 <ip4_reass+0x308>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c7c:	e007      	b.n	8007c8e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8007c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d006      	beq.n	8007c96 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1f4      	bne.n	8007c7e <ip4_reass+0x252>
 8007c94:	e000      	b.n	8007c98 <ip4_reass+0x26c>
          break;
 8007c96:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8007c98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c9c:	f7ff fd2e 	bl	80076fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 fced 	bl	8009680 <pbuf_clen>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8007caa:	4b21      	ldr	r3, [pc, #132]	; (8007d30 <ip4_reass+0x304>)
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	8c3a      	ldrh	r2, [r7, #32]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d906      	bls.n	8007cc2 <ip4_reass+0x296>
 8007cb4:	4b20      	ldr	r3, [pc, #128]	; (8007d38 <ip4_reass+0x30c>)
 8007cb6:	f240 229b 	movw	r2, #667	; 0x29b
 8007cba:	4920      	ldr	r1, [pc, #128]	; (8007d3c <ip4_reass+0x310>)
 8007cbc:	4820      	ldr	r0, [pc, #128]	; (8007d40 <ip4_reass+0x314>)
 8007cbe:	f008 fe9d 	bl	80109fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8007cc2:	4b1b      	ldr	r3, [pc, #108]	; (8007d30 <ip4_reass+0x304>)
 8007cc4:	881a      	ldrh	r2, [r3, #0]
 8007cc6:	8c3b      	ldrh	r3, [r7, #32]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	4b18      	ldr	r3, [pc, #96]	; (8007d30 <ip4_reass+0x304>)
 8007cce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	e028      	b.n	8007d26 <ip4_reass+0x2fa>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e026      	b.n	8007d26 <ip4_reass+0x2fa>
    goto nullreturn_ipr;
 8007cd8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <ip4_reass+0x2c2>
 8007ce0:	4b15      	ldr	r3, [pc, #84]	; (8007d38 <ip4_reass+0x30c>)
 8007ce2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007ce6:	4917      	ldr	r1, [pc, #92]	; (8007d44 <ip4_reass+0x318>)
 8007ce8:	4815      	ldr	r0, [pc, #84]	; (8007d40 <ip4_reass+0x314>)
 8007cea:	f008 fe87 	bl	80109fc <iprintf>
  if (ipr->p == NULL) {
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d113      	bne.n	8007d1e <ip4_reass+0x2f2>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8007cf6:	4b0f      	ldr	r3, [pc, #60]	; (8007d34 <ip4_reass+0x308>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d006      	beq.n	8007d0e <ip4_reass+0x2e2>
 8007d00:	4b0d      	ldr	r3, [pc, #52]	; (8007d38 <ip4_reass+0x30c>)
 8007d02:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007d06:	4910      	ldr	r1, [pc, #64]	; (8007d48 <ip4_reass+0x31c>)
 8007d08:	480d      	ldr	r0, [pc, #52]	; (8007d40 <ip4_reass+0x314>)
 8007d0a:	f008 fe77 	bl	80109fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8007d0e:	2100      	movs	r1, #0
 8007d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d12:	f7ff fcf3 	bl	80076fc <ip_reass_dequeue_datagram>
 8007d16:	e002      	b.n	8007d1e <ip4_reass+0x2f2>
    goto nullreturn;
 8007d18:	bf00      	nop
 8007d1a:	e000      	b.n	8007d1e <ip4_reass+0x2f2>
    goto nullreturn;
 8007d1c:	bf00      	nop
  }

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 fc26 	bl	8009570 <pbuf_free>
  return NULL;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3738      	adds	r7, #56	; 0x38
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	200005e4 	.word	0x200005e4
 8007d34:	200005e0 	.word	0x200005e0
 8007d38:	080122e4 	.word	0x080122e4
 8007d3c:	08012454 	.word	0x08012454
 8007d40:	0801232c 	.word	0x0801232c
 8007d44:	08012470 	.word	0x08012470
 8007d48:	0801247c 	.word	0x0801247c

08007d4c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8007d50:	2005      	movs	r0, #5
 8007d52:	f000 fda9 	bl	80088a8 <memp_malloc>
 8007d56:	4603      	mov	r3, r0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d106      	bne.n	8007d78 <ip_frag_free_pbuf_custom_ref+0x1c>
 8007d6a:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8007d6c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8007d70:	4906      	ldr	r1, [pc, #24]	; (8007d8c <ip_frag_free_pbuf_custom_ref+0x30>)
 8007d72:	4807      	ldr	r0, [pc, #28]	; (8007d90 <ip_frag_free_pbuf_custom_ref+0x34>)
 8007d74:	f008 fe42 	bl	80109fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8007d78:	6879      	ldr	r1, [r7, #4]
 8007d7a:	2005      	movs	r0, #5
 8007d7c:	f000 fde0 	bl	8008940 <memp_free>
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	080122e4 	.word	0x080122e4
 8007d8c:	0801249c 	.word	0x0801249c
 8007d90:	0801232c 	.word	0x0801232c

08007d94 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d106      	bne.n	8007db4 <ipfrag_free_pbuf_custom+0x20>
 8007da6:	4b11      	ldr	r3, [pc, #68]	; (8007dec <ipfrag_free_pbuf_custom+0x58>)
 8007da8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8007dac:	4910      	ldr	r1, [pc, #64]	; (8007df0 <ipfrag_free_pbuf_custom+0x5c>)
 8007dae:	4811      	ldr	r0, [pc, #68]	; (8007df4 <ipfrag_free_pbuf_custom+0x60>)
 8007db0:	f008 fe24 	bl	80109fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d006      	beq.n	8007dca <ipfrag_free_pbuf_custom+0x36>
 8007dbc:	4b0b      	ldr	r3, [pc, #44]	; (8007dec <ipfrag_free_pbuf_custom+0x58>)
 8007dbe:	f240 22cf 	movw	r2, #719	; 0x2cf
 8007dc2:	490d      	ldr	r1, [pc, #52]	; (8007df8 <ipfrag_free_pbuf_custom+0x64>)
 8007dc4:	480b      	ldr	r0, [pc, #44]	; (8007df4 <ipfrag_free_pbuf_custom+0x60>)
 8007dc6:	f008 fe19 	bl	80109fc <iprintf>
  if (pcr->original != NULL) {
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d004      	beq.n	8007ddc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f001 fbca 	bl	8009570 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f7ff ffbd 	bl	8007d5c <ip_frag_free_pbuf_custom_ref>
}
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	080122e4 	.word	0x080122e4
 8007df0:	080124a8 	.word	0x080124a8
 8007df4:	0801232c 	.word	0x0801232c
 8007df8:	080124b4 	.word	0x080124b4

08007dfc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b094      	sub	sp, #80	; 0x50
 8007e00:	af02      	add	r7, sp, #8
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e12:	3b14      	subs	r3, #20
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	da00      	bge.n	8007e1a <ip4_frag+0x1e>
 8007e18:	3307      	adds	r3, #7
 8007e1a:	10db      	asrs	r3, r3, #3
 8007e1c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8007e1e:	2314      	movs	r3, #20
 8007e20:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8007e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b14      	cmp	r3, #20
 8007e3c:	d002      	beq.n	8007e44 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8007e3e:	f06f 0305 	mvn.w	r3, #5
 8007e42:	e10f      	b.n	8008064 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	895b      	ldrh	r3, [r3, #10]
 8007e48:	2b13      	cmp	r3, #19
 8007e4a:	d809      	bhi.n	8007e60 <ip4_frag+0x64>
 8007e4c:	4b87      	ldr	r3, [pc, #540]	; (800806c <ip4_frag+0x270>)
 8007e4e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8007e52:	4987      	ldr	r1, [pc, #540]	; (8008070 <ip4_frag+0x274>)
 8007e54:	4887      	ldr	r0, [pc, #540]	; (8008074 <ip4_frag+0x278>)
 8007e56:	f008 fdd1 	bl	80109fc <iprintf>
 8007e5a:	f06f 0305 	mvn.w	r3, #5
 8007e5e:	e101      	b.n	8008064 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	88db      	ldrh	r3, [r3, #6]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fc f840 	bl	8003eec <lwip_htons>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8007e70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007e72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8007e7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e80:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	891b      	ldrh	r3, [r3, #8]
 8007e86:	3b14      	subs	r3, #20
 8007e88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8007e8c:	e0e0      	b.n	8008050 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8007e8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	bf28      	it	cs
 8007e9c:	4613      	movcs	r3, r2
 8007e9e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007ea0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007ea4:	2114      	movs	r1, #20
 8007ea6:	200e      	movs	r0, #14
 8007ea8:	f001 f880 	bl	8008fac <pbuf_alloc>
 8007eac:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 80d4 	beq.w	800805e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	895b      	ldrh	r3, [r3, #10]
 8007eba:	2b13      	cmp	r3, #19
 8007ebc:	d806      	bhi.n	8007ecc <ip4_frag+0xd0>
 8007ebe:	4b6b      	ldr	r3, [pc, #428]	; (800806c <ip4_frag+0x270>)
 8007ec0:	f240 3225 	movw	r2, #805	; 0x325
 8007ec4:	496c      	ldr	r1, [pc, #432]	; (8008078 <ip4_frag+0x27c>)
 8007ec6:	486b      	ldr	r0, [pc, #428]	; (8008074 <ip4_frag+0x278>)
 8007ec8:	f008 fd98 	bl	80109fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2214      	movs	r2, #20
 8007ed2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f008 fd7e 	bl	80109d6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8007ee0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007ee2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8007ee6:	e064      	b.n	8007fb2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	895a      	ldrh	r2, [r3, #10]
 8007eec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	895b      	ldrh	r3, [r3, #10]
 8007ef6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d906      	bls.n	8007f0a <ip4_frag+0x10e>
 8007efc:	4b5b      	ldr	r3, [pc, #364]	; (800806c <ip4_frag+0x270>)
 8007efe:	f240 322d 	movw	r2, #813	; 0x32d
 8007f02:	495e      	ldr	r1, [pc, #376]	; (800807c <ip4_frag+0x280>)
 8007f04:	485b      	ldr	r0, [pc, #364]	; (8008074 <ip4_frag+0x278>)
 8007f06:	f008 fd79 	bl	80109fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8007f0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007f0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007f10:	4293      	cmp	r3, r2
 8007f12:	bf28      	it	cs
 8007f14:	4613      	movcs	r3, r2
 8007f16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8007f1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d105      	bne.n	8007f2e <ip4_frag+0x132>
        poff = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
        continue;
 8007f2c:	e041      	b.n	8007fb2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8007f2e:	f7ff ff0d 	bl	8007d4c <ip_frag_alloc_pbuf_custom_ref>
 8007f32:	61f8      	str	r0, [r7, #28]
      if (pcr == NULL) {
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d103      	bne.n	8007f42 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8007f3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f3c:	f001 fb18 	bl	8009570 <pbuf_free>
        goto memerr;
 8007f40:	e08e      	b.n	8008060 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8007f42:	69f8      	ldr	r0, [r7, #28]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8007f48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8007f50:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007f54:	9201      	str	r2, [sp, #4]
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2241      	movs	r2, #65	; 0x41
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	f001 f94b 	bl	80091f8 <pbuf_alloced_custom>
 8007f62:	61b8      	str	r0, [r7, #24]
      if (newpbuf == NULL) {
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d106      	bne.n	8007f78 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8007f6a:	69f8      	ldr	r0, [r7, #28]
 8007f6c:	f7ff fef6 	bl	8007d5c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8007f70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f72:	f001 fafd 	bl	8009570 <pbuf_free>
        goto memerr;
 8007f76:	e073      	b.n	8008060 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f001 fb99 	bl	80096b0 <pbuf_ref>
      pcr->original = p;
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	4a3e      	ldr	r2, [pc, #248]	; (8008080 <ip4_frag+0x284>)
 8007f88:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8007f8a:	69b9      	ldr	r1, [r7, #24]
 8007f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f8e:	f001 fbb1 	bl	80096f4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8007f92:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8007f96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8007fa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d004      	beq.n	8007fb2 <ip4_frag+0x1b6>
        poff = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8007fb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d196      	bne.n	8007ee8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8007fba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007fbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007fc0:	4413      	add	r3, r2
 8007fc2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8007fc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fcc:	3b14      	subs	r3, #20
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	bfd4      	ite	le
 8007fd2:	2301      	movle	r3, #1
 8007fd4:	2300      	movgt	r3, #0
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	617b      	str	r3, [r7, #20]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8007fda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007fde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fe2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <ip4_frag+0x1f4>
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8007ff0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007ff2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ff6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8007ff8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fb ff76 	bl	8003eec <lwip_htons>
 8008000:	4603      	mov	r3, r0
 8008002:	461a      	mov	r2, r3
 8008004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008006:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008008:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800800a:	3314      	adds	r3, #20
 800800c:	b29b      	uxth	r3, r3
 800800e:	4618      	mov	r0, r3
 8008010:	f7fb ff6c 	bl	8003eec <lwip_htons>
 8008014:	4603      	mov	r3, r0
 8008016:	461a      	mov	r2, r3
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	2200      	movs	r2, #0
 8008020:	729a      	strb	r2, [r3, #10]
 8008022:	2200      	movs	r2, #0
 8008024:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800802e:	68b8      	ldr	r0, [r7, #8]
 8008030:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8008032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008034:	f001 fa9c 	bl	8009570 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8008038:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800803c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8008044:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008048:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800804a:	4413      	add	r3, r2
 800804c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8008050:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008054:	2b00      	cmp	r3, #0
 8008056:	f47f af1a 	bne.w	8007e8e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	e002      	b.n	8008064 <ip4_frag+0x268>
      goto memerr;
 800805e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8008060:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008064:	4618      	mov	r0, r3
 8008066:	3748      	adds	r7, #72	; 0x48
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	080122e4 	.word	0x080122e4
 8008070:	080124c0 	.word	0x080124c0
 8008074:	0801232c 	.word	0x0801232c
 8008078:	080124dc 	.word	0x080124dc
 800807c:	080124fc 	.word	0x080124fc
 8008080:	08007d95 	.word	0x08007d95

08008084 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800808e:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <ptr_to_mem+0x20>)
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	88fb      	ldrh	r3, [r7, #6]
 8008094:	4413      	add	r3, r2
}
 8008096:	4618      	mov	r0, r3
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	200005e8 	.word	0x200005e8

080080a8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a05      	ldr	r2, [pc, #20]	; (80080c8 <mem_to_ptr+0x20>)
 80080b4:	6812      	ldr	r2, [r2, #0]
 80080b6:	1a9b      	subs	r3, r3, r2
 80080b8:	b29b      	uxth	r3, r3
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	200005e8 	.word	0x200005e8

080080cc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80080d4:	4b45      	ldr	r3, [pc, #276]	; (80081ec <plug_holes+0x120>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d206      	bcs.n	80080ec <plug_holes+0x20>
 80080de:	4b44      	ldr	r3, [pc, #272]	; (80081f0 <plug_holes+0x124>)
 80080e0:	f240 12df 	movw	r2, #479	; 0x1df
 80080e4:	4943      	ldr	r1, [pc, #268]	; (80081f4 <plug_holes+0x128>)
 80080e6:	4844      	ldr	r0, [pc, #272]	; (80081f8 <plug_holes+0x12c>)
 80080e8:	f008 fc88 	bl	80109fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80080ec:	4b43      	ldr	r3, [pc, #268]	; (80081fc <plug_holes+0x130>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d306      	bcc.n	8008104 <plug_holes+0x38>
 80080f6:	4b3e      	ldr	r3, [pc, #248]	; (80081f0 <plug_holes+0x124>)
 80080f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80080fc:	4940      	ldr	r1, [pc, #256]	; (8008200 <plug_holes+0x134>)
 80080fe:	483e      	ldr	r0, [pc, #248]	; (80081f8 <plug_holes+0x12c>)
 8008100:	f008 fc7c 	bl	80109fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	791b      	ldrb	r3, [r3, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d006      	beq.n	800811a <plug_holes+0x4e>
 800810c:	4b38      	ldr	r3, [pc, #224]	; (80081f0 <plug_holes+0x124>)
 800810e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008112:	493c      	ldr	r1, [pc, #240]	; (8008204 <plug_holes+0x138>)
 8008114:	4838      	ldr	r0, [pc, #224]	; (80081f8 <plug_holes+0x12c>)
 8008116:	f008 fc71 	bl	80109fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008122:	d906      	bls.n	8008132 <plug_holes+0x66>
 8008124:	4b32      	ldr	r3, [pc, #200]	; (80081f0 <plug_holes+0x124>)
 8008126:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800812a:	4937      	ldr	r1, [pc, #220]	; (8008208 <plug_holes+0x13c>)
 800812c:	4832      	ldr	r0, [pc, #200]	; (80081f8 <plug_holes+0x12c>)
 800812e:	f008 fc65 	bl	80109fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	4618      	mov	r0, r3
 8008138:	f7ff ffa4 	bl	8008084 <ptr_to_mem>
 800813c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	429a      	cmp	r2, r3
 8008144:	d024      	beq.n	8008190 <plug_holes+0xc4>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	791b      	ldrb	r3, [r3, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d120      	bne.n	8008190 <plug_holes+0xc4>
 800814e:	4b2b      	ldr	r3, [pc, #172]	; (80081fc <plug_holes+0x130>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	429a      	cmp	r2, r3
 8008156:	d01b      	beq.n	8008190 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008158:	4b2c      	ldr	r3, [pc, #176]	; (800820c <plug_holes+0x140>)
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	429a      	cmp	r2, r3
 8008160:	d102      	bne.n	8008168 <plug_holes+0x9c>
      lfree = mem;
 8008162:	4a2a      	ldr	r2, [pc, #168]	; (800820c <plug_holes+0x140>)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	881a      	ldrh	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008178:	d00a      	beq.n	8008190 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff ff80 	bl	8008084 <ptr_to_mem>
 8008184:	4604      	mov	r4, r0
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff ff8e 	bl	80080a8 <mem_to_ptr>
 800818c:	4603      	mov	r3, r0
 800818e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	885b      	ldrh	r3, [r3, #2]
 8008194:	4618      	mov	r0, r3
 8008196:	f7ff ff75 	bl	8008084 <ptr_to_mem>
 800819a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d01f      	beq.n	80081e4 <plug_holes+0x118>
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	791b      	ldrb	r3, [r3, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d11b      	bne.n	80081e4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80081ac:	4b17      	ldr	r3, [pc, #92]	; (800820c <plug_holes+0x140>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d102      	bne.n	80081bc <plug_holes+0xf0>
      lfree = pmem;
 80081b6:	4a15      	ldr	r2, [pc, #84]	; (800820c <plug_holes+0x140>)
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	881a      	ldrh	r2, [r3, #0]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081cc:	d00a      	beq.n	80081e4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7ff ff56 	bl	8008084 <ptr_to_mem>
 80081d8:	4604      	mov	r4, r0
 80081da:	68b8      	ldr	r0, [r7, #8]
 80081dc:	f7ff ff64 	bl	80080a8 <mem_to_ptr>
 80081e0:	4603      	mov	r3, r0
 80081e2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80081e4:	bf00      	nop
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd90      	pop	{r4, r7, pc}
 80081ec:	200005e8 	.word	0x200005e8
 80081f0:	0801250c 	.word	0x0801250c
 80081f4:	0801253c 	.word	0x0801253c
 80081f8:	08012554 	.word	0x08012554
 80081fc:	200005ec 	.word	0x200005ec
 8008200:	0801257c 	.word	0x0801257c
 8008204:	08012598 	.word	0x08012598
 8008208:	080125b4 	.word	0x080125b4
 800820c:	200005f0 	.word	0x200005f0

08008210 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008216:	4b18      	ldr	r3, [pc, #96]	; (8008278 <mem_init+0x68>)
 8008218:	3303      	adds	r3, #3
 800821a:	f023 0303 	bic.w	r3, r3, #3
 800821e:	461a      	mov	r2, r3
 8008220:	4b16      	ldr	r3, [pc, #88]	; (800827c <mem_init+0x6c>)
 8008222:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008224:	4b15      	ldr	r3, [pc, #84]	; (800827c <mem_init+0x6c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008230:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800823e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008242:	f7ff ff1f 	bl	8008084 <ptr_to_mem>
 8008246:	4602      	mov	r2, r0
 8008248:	4b0d      	ldr	r3, [pc, #52]	; (8008280 <mem_init+0x70>)
 800824a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800824c:	4b0c      	ldr	r3, [pc, #48]	; (8008280 <mem_init+0x70>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2201      	movs	r2, #1
 8008252:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008254:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <mem_init+0x70>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800825c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800825e:	4b08      	ldr	r3, [pc, #32]	; (8008280 <mem_init+0x70>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008266:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008268:	4b04      	ldr	r3, [pc, #16]	; (800827c <mem_init+0x6c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a05      	ldr	r2, [pc, #20]	; (8008284 <mem_init+0x74>)
 800826e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008270:	bf00      	nop
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	200037d4 	.word	0x200037d4
 800827c:	200005e8 	.word	0x200005e8
 8008280:	200005ec 	.word	0x200005ec
 8008284:	200005f0 	.word	0x200005f0

08008288 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff ff09 	bl	80080a8 <mem_to_ptr>
 8008296:	4603      	mov	r3, r0
 8008298:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fef0 	bl	8008084 <ptr_to_mem>
 80082a4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	885b      	ldrh	r3, [r3, #2]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff feea 	bl	8008084 <ptr_to_mem>
 80082b0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80082ba:	d818      	bhi.n	80082ee <mem_link_valid+0x66>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	885b      	ldrh	r3, [r3, #2]
 80082c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80082c4:	d813      	bhi.n	80082ee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80082ca:	8afa      	ldrh	r2, [r7, #22]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d004      	beq.n	80082da <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	8afa      	ldrh	r2, [r7, #22]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d109      	bne.n	80082ee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80082da:	4b08      	ldr	r3, [pc, #32]	; (80082fc <mem_link_valid+0x74>)
 80082dc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d006      	beq.n	80082f2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	885b      	ldrh	r3, [r3, #2]
 80082e8:	8afa      	ldrh	r2, [r7, #22]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d001      	beq.n	80082f2 <mem_link_valid+0x6a>
    return 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	e000      	b.n	80082f4 <mem_link_valid+0x6c>
  }
  return 1;
 80082f2:	2301      	movs	r3, #1
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	200005ec 	.word	0x200005ec

08008300 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d04c      	beq.n	80083a8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f003 0303 	and.w	r3, r3, #3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d007      	beq.n	8008328 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008318:	4b25      	ldr	r3, [pc, #148]	; (80083b0 <mem_free+0xb0>)
 800831a:	f240 2273 	movw	r2, #627	; 0x273
 800831e:	4925      	ldr	r1, [pc, #148]	; (80083b4 <mem_free+0xb4>)
 8008320:	4825      	ldr	r0, [pc, #148]	; (80083b8 <mem_free+0xb8>)
 8008322:	f008 fb6b 	bl	80109fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008326:	e040      	b.n	80083aa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3b08      	subs	r3, #8
 800832c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800832e:	4b23      	ldr	r3, [pc, #140]	; (80083bc <mem_free+0xbc>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	429a      	cmp	r2, r3
 8008336:	d306      	bcc.n	8008346 <mem_free+0x46>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f103 020c 	add.w	r2, r3, #12
 800833e:	4b20      	ldr	r3, [pc, #128]	; (80083c0 <mem_free+0xc0>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	429a      	cmp	r2, r3
 8008344:	d907      	bls.n	8008356 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008346:	4b1a      	ldr	r3, [pc, #104]	; (80083b0 <mem_free+0xb0>)
 8008348:	f240 227f 	movw	r2, #639	; 0x27f
 800834c:	491d      	ldr	r1, [pc, #116]	; (80083c4 <mem_free+0xc4>)
 800834e:	481a      	ldr	r0, [pc, #104]	; (80083b8 <mem_free+0xb8>)
 8008350:	f008 fb54 	bl	80109fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008354:	e029      	b.n	80083aa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	791b      	ldrb	r3, [r3, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d107      	bne.n	800836e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800835e:	4b14      	ldr	r3, [pc, #80]	; (80083b0 <mem_free+0xb0>)
 8008360:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008364:	4918      	ldr	r1, [pc, #96]	; (80083c8 <mem_free+0xc8>)
 8008366:	4814      	ldr	r0, [pc, #80]	; (80083b8 <mem_free+0xb8>)
 8008368:	f008 fb48 	bl	80109fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800836c:	e01d      	b.n	80083aa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f7ff ff8a 	bl	8008288 <mem_link_valid>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d107      	bne.n	800838a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800837a:	4b0d      	ldr	r3, [pc, #52]	; (80083b0 <mem_free+0xb0>)
 800837c:	f240 2295 	movw	r2, #661	; 0x295
 8008380:	4912      	ldr	r1, [pc, #72]	; (80083cc <mem_free+0xcc>)
 8008382:	480d      	ldr	r0, [pc, #52]	; (80083b8 <mem_free+0xb8>)
 8008384:	f008 fb3a 	bl	80109fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008388:	e00f      	b.n	80083aa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008390:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <mem_free+0xd0>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	429a      	cmp	r2, r3
 8008398:	d202      	bcs.n	80083a0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800839a:	4a0d      	ldr	r2, [pc, #52]	; (80083d0 <mem_free+0xd0>)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f7ff fe93 	bl	80080cc <plug_holes>
 80083a6:	e000      	b.n	80083aa <mem_free+0xaa>
    return;
 80083a8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	0801250c 	.word	0x0801250c
 80083b4:	080125e0 	.word	0x080125e0
 80083b8:	08012554 	.word	0x08012554
 80083bc:	200005e8 	.word	0x200005e8
 80083c0:	200005ec 	.word	0x200005ec
 80083c4:	08012604 	.word	0x08012604
 80083c8:	08012620 	.word	0x08012620
 80083cc:	08012648 	.word	0x08012648
 80083d0:	200005f0 	.word	0x200005f0

080083d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80083e0:	887b      	ldrh	r3, [r7, #2]
 80083e2:	3303      	adds	r3, #3
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	f023 0303 	bic.w	r3, r3, #3
 80083ea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80083ec:	8bfb      	ldrh	r3, [r7, #30]
 80083ee:	2b0b      	cmp	r3, #11
 80083f0:	d801      	bhi.n	80083f6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80083f2:	230c      	movs	r3, #12
 80083f4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80083f6:	8bfb      	ldrh	r3, [r7, #30]
 80083f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80083fc:	d803      	bhi.n	8008406 <mem_trim+0x32>
 80083fe:	8bfa      	ldrh	r2, [r7, #30]
 8008400:	887b      	ldrh	r3, [r7, #2]
 8008402:	429a      	cmp	r2, r3
 8008404:	d201      	bcs.n	800840a <mem_trim+0x36>
    return NULL;
 8008406:	2300      	movs	r3, #0
 8008408:	e0cc      	b.n	80085a4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800840a:	4b68      	ldr	r3, [pc, #416]	; (80085ac <mem_trim+0x1d8>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	429a      	cmp	r2, r3
 8008412:	d304      	bcc.n	800841e <mem_trim+0x4a>
 8008414:	4b66      	ldr	r3, [pc, #408]	; (80085b0 <mem_trim+0x1dc>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	429a      	cmp	r2, r3
 800841c:	d306      	bcc.n	800842c <mem_trim+0x58>
 800841e:	4b65      	ldr	r3, [pc, #404]	; (80085b4 <mem_trim+0x1e0>)
 8008420:	f240 22d2 	movw	r2, #722	; 0x2d2
 8008424:	4964      	ldr	r1, [pc, #400]	; (80085b8 <mem_trim+0x1e4>)
 8008426:	4865      	ldr	r0, [pc, #404]	; (80085bc <mem_trim+0x1e8>)
 8008428:	f008 fae8 	bl	80109fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800842c:	4b5f      	ldr	r3, [pc, #380]	; (80085ac <mem_trim+0x1d8>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	429a      	cmp	r2, r3
 8008434:	d304      	bcc.n	8008440 <mem_trim+0x6c>
 8008436:	4b5e      	ldr	r3, [pc, #376]	; (80085b0 <mem_trim+0x1dc>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	429a      	cmp	r2, r3
 800843e:	d301      	bcc.n	8008444 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	e0af      	b.n	80085a4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3b08      	subs	r3, #8
 8008448:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800844a:	69b8      	ldr	r0, [r7, #24]
 800844c:	f7ff fe2c 	bl	80080a8 <mem_to_ptr>
 8008450:	4603      	mov	r3, r0
 8008452:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	881a      	ldrh	r2, [r3, #0]
 8008458:	8afb      	ldrh	r3, [r7, #22]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	b29b      	uxth	r3, r3
 800845e:	3b08      	subs	r3, #8
 8008460:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008462:	8bfa      	ldrh	r2, [r7, #30]
 8008464:	8abb      	ldrh	r3, [r7, #20]
 8008466:	429a      	cmp	r2, r3
 8008468:	d906      	bls.n	8008478 <mem_trim+0xa4>
 800846a:	4b52      	ldr	r3, [pc, #328]	; (80085b4 <mem_trim+0x1e0>)
 800846c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008470:	4953      	ldr	r1, [pc, #332]	; (80085c0 <mem_trim+0x1ec>)
 8008472:	4852      	ldr	r0, [pc, #328]	; (80085bc <mem_trim+0x1e8>)
 8008474:	f008 fac2 	bl	80109fc <iprintf>
  if (newsize > size) {
 8008478:	8bfa      	ldrh	r2, [r7, #30]
 800847a:	8abb      	ldrh	r3, [r7, #20]
 800847c:	429a      	cmp	r2, r3
 800847e:	d901      	bls.n	8008484 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008480:	2300      	movs	r3, #0
 8008482:	e08f      	b.n	80085a4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008484:	8bfa      	ldrh	r2, [r7, #30]
 8008486:	8abb      	ldrh	r3, [r7, #20]
 8008488:	429a      	cmp	r2, r3
 800848a:	d101      	bne.n	8008490 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	e089      	b.n	80085a4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	4618      	mov	r0, r3
 8008496:	f7ff fdf5 	bl	8008084 <ptr_to_mem>
 800849a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	791b      	ldrb	r3, [r3, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d13f      	bne.n	8008524 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80084ac:	d106      	bne.n	80084bc <mem_trim+0xe8>
 80084ae:	4b41      	ldr	r3, [pc, #260]	; (80085b4 <mem_trim+0x1e0>)
 80084b0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80084b4:	4943      	ldr	r1, [pc, #268]	; (80085c4 <mem_trim+0x1f0>)
 80084b6:	4841      	ldr	r0, [pc, #260]	; (80085bc <mem_trim+0x1e8>)
 80084b8:	f008 faa0 	bl	80109fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80084c2:	8afa      	ldrh	r2, [r7, #22]
 80084c4:	8bfb      	ldrh	r3, [r7, #30]
 80084c6:	4413      	add	r3, r2
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	3308      	adds	r3, #8
 80084cc:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 80084ce:	4b3e      	ldr	r3, [pc, #248]	; (80085c8 <mem_trim+0x1f4>)
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d106      	bne.n	80084e6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80084d8:	89bb      	ldrh	r3, [r7, #12]
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff fdd2 	bl	8008084 <ptr_to_mem>
 80084e0:	4602      	mov	r2, r0
 80084e2:	4b39      	ldr	r3, [pc, #228]	; (80085c8 <mem_trim+0x1f4>)
 80084e4:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80084e6:	89bb      	ldrh	r3, [r7, #12]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff fdcb 	bl	8008084 <ptr_to_mem>
 80084ee:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2200      	movs	r2, #0
 80084f4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	89fa      	ldrh	r2, [r7, #14]
 80084fa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	8afa      	ldrh	r2, [r7, #22]
 8008500:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	89ba      	ldrh	r2, [r7, #12]
 8008506:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008510:	d047      	beq.n	80085a2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff fdb4 	bl	8008084 <ptr_to_mem>
 800851c:	4602      	mov	r2, r0
 800851e:	89bb      	ldrh	r3, [r7, #12]
 8008520:	8053      	strh	r3, [r2, #2]
 8008522:	e03e      	b.n	80085a2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008524:	8bfb      	ldrh	r3, [r7, #30]
 8008526:	f103 0214 	add.w	r2, r3, #20
 800852a:	8abb      	ldrh	r3, [r7, #20]
 800852c:	429a      	cmp	r2, r3
 800852e:	d838      	bhi.n	80085a2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008530:	8afa      	ldrh	r2, [r7, #22]
 8008532:	8bfb      	ldrh	r3, [r7, #30]
 8008534:	4413      	add	r3, r2
 8008536:	b29b      	uxth	r3, r3
 8008538:	3308      	adds	r3, #8
 800853a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008544:	d106      	bne.n	8008554 <mem_trim+0x180>
 8008546:	4b1b      	ldr	r3, [pc, #108]	; (80085b4 <mem_trim+0x1e0>)
 8008548:	f240 3216 	movw	r2, #790	; 0x316
 800854c:	491d      	ldr	r1, [pc, #116]	; (80085c4 <mem_trim+0x1f0>)
 800854e:	481b      	ldr	r0, [pc, #108]	; (80085bc <mem_trim+0x1e8>)
 8008550:	f008 fa54 	bl	80109fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008554:	89bb      	ldrh	r3, [r7, #12]
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fd94 	bl	8008084 <ptr_to_mem>
 800855c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800855e:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <mem_trim+0x1f4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	429a      	cmp	r2, r3
 8008566:	d202      	bcs.n	800856e <mem_trim+0x19a>
      lfree = mem2;
 8008568:	4a17      	ldr	r2, [pc, #92]	; (80085c8 <mem_trim+0x1f4>)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	2200      	movs	r2, #0
 8008572:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	881a      	ldrh	r2, [r3, #0]
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	8afa      	ldrh	r2, [r7, #22]
 8008580:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	89ba      	ldrh	r2, [r7, #12]
 8008586:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008590:	d007      	beq.n	80085a2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fd74 	bl	8008084 <ptr_to_mem>
 800859c:	4602      	mov	r2, r0
 800859e:	89bb      	ldrh	r3, [r7, #12]
 80085a0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80085a2:	687b      	ldr	r3, [r7, #4]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	200005e8 	.word	0x200005e8
 80085b0:	200005ec 	.word	0x200005ec
 80085b4:	0801250c 	.word	0x0801250c
 80085b8:	0801267c 	.word	0x0801267c
 80085bc:	08012554 	.word	0x08012554
 80085c0:	08012694 	.word	0x08012694
 80085c4:	080126b4 	.word	0x080126b4
 80085c8:	200005f0 	.word	0x200005f0

080085cc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80085d6:	88fb      	ldrh	r3, [r7, #6]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <mem_malloc+0x14>
    return NULL;
 80085dc:	2300      	movs	r3, #0
 80085de:	e0d9      	b.n	8008794 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80085e0:	88fb      	ldrh	r3, [r7, #6]
 80085e2:	3303      	adds	r3, #3
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	f023 0303 	bic.w	r3, r3, #3
 80085ea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80085ec:	8bbb      	ldrh	r3, [r7, #28]
 80085ee:	2b0b      	cmp	r3, #11
 80085f0:	d801      	bhi.n	80085f6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80085f2:	230c      	movs	r3, #12
 80085f4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80085f6:	8bbb      	ldrh	r3, [r7, #28]
 80085f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80085fc:	d803      	bhi.n	8008606 <mem_malloc+0x3a>
 80085fe:	8bba      	ldrh	r2, [r7, #28]
 8008600:	88fb      	ldrh	r3, [r7, #6]
 8008602:	429a      	cmp	r2, r3
 8008604:	d201      	bcs.n	800860a <mem_malloc+0x3e>
    return NULL;
 8008606:	2300      	movs	r3, #0
 8008608:	e0c4      	b.n	8008794 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800860a:	4b64      	ldr	r3, [pc, #400]	; (800879c <mem_malloc+0x1d0>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff fd4a 	bl	80080a8 <mem_to_ptr>
 8008614:	4603      	mov	r3, r0
 8008616:	83fb      	strh	r3, [r7, #30]
 8008618:	e0b4      	b.n	8008784 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800861a:	8bfb      	ldrh	r3, [r7, #30]
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff fd31 	bl	8008084 <ptr_to_mem>
 8008622:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	791b      	ldrb	r3, [r3, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	f040 80a4 	bne.w	8008776 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	8bfb      	ldrh	r3, [r7, #30]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	f1a3 0208 	sub.w	r2, r3, #8
 800863c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800863e:	429a      	cmp	r2, r3
 8008640:	f0c0 8099 	bcc.w	8008776 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	8bfb      	ldrh	r3, [r7, #30]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	f1a3 0208 	sub.w	r2, r3, #8
 8008652:	8bbb      	ldrh	r3, [r7, #28]
 8008654:	3314      	adds	r3, #20
 8008656:	429a      	cmp	r2, r3
 8008658:	d333      	bcc.n	80086c2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800865a:	8bfa      	ldrh	r2, [r7, #30]
 800865c:	8bbb      	ldrh	r3, [r7, #28]
 800865e:	4413      	add	r3, r2
 8008660:	b29b      	uxth	r3, r3
 8008662:	3308      	adds	r3, #8
 8008664:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008666:	8a7b      	ldrh	r3, [r7, #18]
 8008668:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800866c:	d106      	bne.n	800867c <mem_malloc+0xb0>
 800866e:	4b4c      	ldr	r3, [pc, #304]	; (80087a0 <mem_malloc+0x1d4>)
 8008670:	f240 3287 	movw	r2, #903	; 0x387
 8008674:	494b      	ldr	r1, [pc, #300]	; (80087a4 <mem_malloc+0x1d8>)
 8008676:	484c      	ldr	r0, [pc, #304]	; (80087a8 <mem_malloc+0x1dc>)
 8008678:	f008 f9c0 	bl	80109fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800867c:	8a7b      	ldrh	r3, [r7, #18]
 800867e:	4618      	mov	r0, r3
 8008680:	f7ff fd00 	bl	8008084 <ptr_to_mem>
 8008684:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	881a      	ldrh	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8bfa      	ldrh	r2, [r7, #30]
 8008698:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	8a7a      	ldrh	r2, [r7, #18]
 800869e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2201      	movs	r2, #1
 80086a4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80086ae:	d00b      	beq.n	80086c8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff fce5 	bl	8008084 <ptr_to_mem>
 80086ba:	4602      	mov	r2, r0
 80086bc:	8a7b      	ldrh	r3, [r7, #18]
 80086be:	8053      	strh	r3, [r2, #2]
 80086c0:	e002      	b.n	80086c8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2201      	movs	r2, #1
 80086c6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80086c8:	4b34      	ldr	r3, [pc, #208]	; (800879c <mem_malloc+0x1d0>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d127      	bne.n	8008722 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80086d2:	4b32      	ldr	r3, [pc, #200]	; (800879c <mem_malloc+0x1d0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80086d8:	e005      	b.n	80086e6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	4618      	mov	r0, r3
 80086e0:	f7ff fcd0 	bl	8008084 <ptr_to_mem>
 80086e4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	791b      	ldrb	r3, [r3, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d004      	beq.n	80086f8 <mem_malloc+0x12c>
 80086ee:	4b2f      	ldr	r3, [pc, #188]	; (80087ac <mem_malloc+0x1e0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d1f0      	bne.n	80086da <mem_malloc+0x10e>
          }
          lfree = cur;
 80086f8:	4a28      	ldr	r2, [pc, #160]	; (800879c <mem_malloc+0x1d0>)
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80086fe:	4b27      	ldr	r3, [pc, #156]	; (800879c <mem_malloc+0x1d0>)
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4b2a      	ldr	r3, [pc, #168]	; (80087ac <mem_malloc+0x1e0>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	429a      	cmp	r2, r3
 8008708:	d00b      	beq.n	8008722 <mem_malloc+0x156>
 800870a:	4b24      	ldr	r3, [pc, #144]	; (800879c <mem_malloc+0x1d0>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	791b      	ldrb	r3, [r3, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d006      	beq.n	8008722 <mem_malloc+0x156>
 8008714:	4b22      	ldr	r3, [pc, #136]	; (80087a0 <mem_malloc+0x1d4>)
 8008716:	f240 32b5 	movw	r2, #949	; 0x3b5
 800871a:	4925      	ldr	r1, [pc, #148]	; (80087b0 <mem_malloc+0x1e4>)
 800871c:	4822      	ldr	r0, [pc, #136]	; (80087a8 <mem_malloc+0x1dc>)
 800871e:	f008 f96d 	bl	80109fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008722:	8bba      	ldrh	r2, [r7, #28]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	4413      	add	r3, r2
 8008728:	3308      	adds	r3, #8
 800872a:	4a20      	ldr	r2, [pc, #128]	; (80087ac <mem_malloc+0x1e0>)
 800872c:	6812      	ldr	r2, [r2, #0]
 800872e:	4293      	cmp	r3, r2
 8008730:	d906      	bls.n	8008740 <mem_malloc+0x174>
 8008732:	4b1b      	ldr	r3, [pc, #108]	; (80087a0 <mem_malloc+0x1d4>)
 8008734:	f240 32ba 	movw	r2, #954	; 0x3ba
 8008738:	491e      	ldr	r1, [pc, #120]	; (80087b4 <mem_malloc+0x1e8>)
 800873a:	481b      	ldr	r0, [pc, #108]	; (80087a8 <mem_malloc+0x1dc>)
 800873c:	f008 f95e 	bl	80109fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f003 0303 	and.w	r3, r3, #3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d006      	beq.n	8008758 <mem_malloc+0x18c>
 800874a:	4b15      	ldr	r3, [pc, #84]	; (80087a0 <mem_malloc+0x1d4>)
 800874c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8008750:	4919      	ldr	r1, [pc, #100]	; (80087b8 <mem_malloc+0x1ec>)
 8008752:	4815      	ldr	r0, [pc, #84]	; (80087a8 <mem_malloc+0x1dc>)
 8008754:	f008 f952 	bl	80109fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d006      	beq.n	8008770 <mem_malloc+0x1a4>
 8008762:	4b0f      	ldr	r3, [pc, #60]	; (80087a0 <mem_malloc+0x1d4>)
 8008764:	f240 32be 	movw	r2, #958	; 0x3be
 8008768:	4914      	ldr	r1, [pc, #80]	; (80087bc <mem_malloc+0x1f0>)
 800876a:	480f      	ldr	r0, [pc, #60]	; (80087a8 <mem_malloc+0x1dc>)
 800876c:	f008 f946 	bl	80109fc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	3308      	adds	r3, #8
 8008774:	e00e      	b.n	8008794 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008776:	8bfb      	ldrh	r3, [r7, #30]
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff fc83 	bl	8008084 <ptr_to_mem>
 800877e:	4603      	mov	r3, r0
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008784:	8bfa      	ldrh	r2, [r7, #30]
 8008786:	8bbb      	ldrh	r3, [r7, #28]
 8008788:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800878c:	429a      	cmp	r2, r3
 800878e:	f4ff af44 	bcc.w	800861a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3720      	adds	r7, #32
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	200005f0 	.word	0x200005f0
 80087a0:	0801250c 	.word	0x0801250c
 80087a4:	080126b4 	.word	0x080126b4
 80087a8:	08012554 	.word	0x08012554
 80087ac:	200005ec 	.word	0x200005ec
 80087b0:	080126c8 	.word	0x080126c8
 80087b4:	080126e4 	.word	0x080126e4
 80087b8:	08012714 	.word	0x08012714
 80087bc:	08012744 	.word	0x08012744

080087c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	3303      	adds	r3, #3
 80087d6:	f023 0303 	bic.w	r3, r3, #3
 80087da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80087dc:	2300      	movs	r3, #0
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	e011      	b.n	8008806 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	461a      	mov	r2, r3
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	4413      	add	r3, r2
 80087fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3301      	adds	r3, #1
 8008804:	60fb      	str	r3, [r7, #12]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	885b      	ldrh	r3, [r3, #2]
 800880a:	461a      	mov	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	429a      	cmp	r2, r3
 8008810:	dce7      	bgt.n	80087e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008812:	bf00      	nop
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
	...

08008820 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008826:	2300      	movs	r3, #0
 8008828:	80fb      	strh	r3, [r7, #6]
 800882a:	e009      	b.n	8008840 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800882c:	88fb      	ldrh	r3, [r7, #6]
 800882e:	4a08      	ldr	r2, [pc, #32]	; (8008850 <memp_init+0x30>)
 8008830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff ffc3 	bl	80087c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800883a:	88fb      	ldrh	r3, [r7, #6]
 800883c:	3301      	adds	r3, #1
 800883e:	80fb      	strh	r3, [r7, #6]
 8008840:	88fb      	ldrh	r3, [r7, #6]
 8008842:	2b08      	cmp	r3, #8
 8008844:	d9f2      	bls.n	800882c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	08014b20 	.word	0x08014b20

08008854 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d012      	beq.n	8008890 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	6812      	ldr	r2, [r2, #0]
 8008872:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d006      	beq.n	800888c <do_memp_malloc_pool+0x38>
 800887e:	4b07      	ldr	r3, [pc, #28]	; (800889c <do_memp_malloc_pool+0x48>)
 8008880:	f240 1219 	movw	r2, #281	; 0x119
 8008884:	4906      	ldr	r1, [pc, #24]	; (80088a0 <do_memp_malloc_pool+0x4c>)
 8008886:	4807      	ldr	r0, [pc, #28]	; (80088a4 <do_memp_malloc_pool+0x50>)
 8008888:	f008 f8b8 	bl	80109fc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	e000      	b.n	8008892 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	08012768 	.word	0x08012768
 80088a0:	08012798 	.word	0x08012798
 80088a4:	080127bc 	.word	0x080127bc

080088a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d908      	bls.n	80088ca <memp_malloc+0x22>
 80088b8:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <memp_malloc+0x3c>)
 80088ba:	f240 1257 	movw	r2, #343	; 0x157
 80088be:	490a      	ldr	r1, [pc, #40]	; (80088e8 <memp_malloc+0x40>)
 80088c0:	480a      	ldr	r0, [pc, #40]	; (80088ec <memp_malloc+0x44>)
 80088c2:	f008 f89b 	bl	80109fc <iprintf>
 80088c6:	2300      	movs	r3, #0
 80088c8:	e008      	b.n	80088dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	4a08      	ldr	r2, [pc, #32]	; (80088f0 <memp_malloc+0x48>)
 80088ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff ffbe 	bl	8008854 <do_memp_malloc_pool>
 80088d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80088da:	68fb      	ldr	r3, [r7, #12]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	08012768 	.word	0x08012768
 80088e8:	080127f8 	.word	0x080127f8
 80088ec:	080127bc 	.word	0x080127bc
 80088f0:	08014b20 	.word	0x08014b20

080088f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	f003 0303 	and.w	r3, r3, #3
 8008904:	2b00      	cmp	r3, #0
 8008906:	d006      	beq.n	8008916 <do_memp_free_pool+0x22>
 8008908:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <do_memp_free_pool+0x40>)
 800890a:	f240 126d 	movw	r2, #365	; 0x16d
 800890e:	490a      	ldr	r1, [pc, #40]	; (8008938 <do_memp_free_pool+0x44>)
 8008910:	480a      	ldr	r0, [pc, #40]	; (800893c <do_memp_free_pool+0x48>)
 8008912:	f008 f873 	bl	80109fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800892c:	bf00      	nop
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	08012768 	.word	0x08012768
 8008938:	08012818 	.word	0x08012818
 800893c:	080127bc 	.word	0x080127bc

08008940 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	6039      	str	r1, [r7, #0]
 800894a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800894c:	79fb      	ldrb	r3, [r7, #7]
 800894e:	2b08      	cmp	r3, #8
 8008950:	d907      	bls.n	8008962 <memp_free+0x22>
 8008952:	4b0c      	ldr	r3, [pc, #48]	; (8008984 <memp_free+0x44>)
 8008954:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008958:	490b      	ldr	r1, [pc, #44]	; (8008988 <memp_free+0x48>)
 800895a:	480c      	ldr	r0, [pc, #48]	; (800898c <memp_free+0x4c>)
 800895c:	f008 f84e 	bl	80109fc <iprintf>
 8008960:	e00c      	b.n	800897c <memp_free+0x3c>

  if (mem == NULL) {
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d008      	beq.n	800897a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	4a09      	ldr	r2, [pc, #36]	; (8008990 <memp_free+0x50>)
 800896c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff ffbe 	bl	80088f4 <do_memp_free_pool>
 8008978:	e000      	b.n	800897c <memp_free+0x3c>
    return;
 800897a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	08012768 	.word	0x08012768
 8008988:	08012838 	.word	0x08012838
 800898c:	080127bc 	.word	0x080127bc
 8008990:	08014b20 	.word	0x08014b20

08008994 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008994:	b480      	push	{r7}
 8008996:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008998:	bf00      	nop
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
	...

080089a4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
 80089b0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d108      	bne.n	80089ca <netif_add+0x26>
 80089b8:	4b5b      	ldr	r3, [pc, #364]	; (8008b28 <netif_add+0x184>)
 80089ba:	f240 1227 	movw	r2, #295	; 0x127
 80089be:	495b      	ldr	r1, [pc, #364]	; (8008b2c <netif_add+0x188>)
 80089c0:	485b      	ldr	r0, [pc, #364]	; (8008b30 <netif_add+0x18c>)
 80089c2:	f008 f81b 	bl	80109fc <iprintf>
 80089c6:	2300      	movs	r3, #0
 80089c8:	e0a9      	b.n	8008b1e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d108      	bne.n	80089e2 <netif_add+0x3e>
 80089d0:	4b55      	ldr	r3, [pc, #340]	; (8008b28 <netif_add+0x184>)
 80089d2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80089d6:	4957      	ldr	r1, [pc, #348]	; (8008b34 <netif_add+0x190>)
 80089d8:	4855      	ldr	r0, [pc, #340]	; (8008b30 <netif_add+0x18c>)
 80089da:	f008 f80f 	bl	80109fc <iprintf>
 80089de:	2300      	movs	r3, #0
 80089e0:	e09d      	b.n	8008b1e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d101      	bne.n	80089ec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80089e8:	4b53      	ldr	r3, [pc, #332]	; (8008b38 <netif_add+0x194>)
 80089ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80089f2:	4b51      	ldr	r3, [pc, #324]	; (8008b38 <netif_add+0x194>)
 80089f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80089fc:	4b4e      	ldr	r3, [pc, #312]	; (8008b38 <netif_add+0x194>)
 80089fe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	4a49      	ldr	r2, [pc, #292]	; (8008b3c <netif_add+0x198>)
 8008a16:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3324      	adds	r3, #36	; 0x24
 8008a2a:	2204      	movs	r2, #4
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f007 ffdc 	bl	80109ec <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6a3a      	ldr	r2, [r7, #32]
 8008a3e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008a40:	4b3f      	ldr	r3, [pc, #252]	; (8008b40 <netif_add+0x19c>)
 8008a42:	781a      	ldrb	r2, [r3, #0]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a4e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 f914 	bl	8008c84 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	4798      	blx	r3
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <netif_add+0xc8>
    return NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e058      	b.n	8008b1e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a72:	2bff      	cmp	r3, #255	; 0xff
 8008a74:	d103      	bne.n	8008a7e <netif_add+0xda>
        netif->num = 0;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008a82:	4b30      	ldr	r3, [pc, #192]	; (8008b44 <netif_add+0x1a0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	617b      	str	r3, [r7, #20]
 8008a88:	e02b      	b.n	8008ae2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d106      	bne.n	8008aa0 <netif_add+0xfc>
 8008a92:	4b25      	ldr	r3, [pc, #148]	; (8008b28 <netif_add+0x184>)
 8008a94:	f240 128b 	movw	r2, #395	; 0x18b
 8008a98:	492b      	ldr	r1, [pc, #172]	; (8008b48 <netif_add+0x1a4>)
 8008a9a:	4825      	ldr	r0, [pc, #148]	; (8008b30 <netif_add+0x18c>)
 8008a9c:	f007 ffae 	bl	80109fc <iprintf>
        num_netifs++;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	2bff      	cmp	r3, #255	; 0xff
 8008aaa:	dd06      	ble.n	8008aba <netif_add+0x116>
 8008aac:	4b1e      	ldr	r3, [pc, #120]	; (8008b28 <netif_add+0x184>)
 8008aae:	f240 128d 	movw	r2, #397	; 0x18d
 8008ab2:	4926      	ldr	r1, [pc, #152]	; (8008b4c <netif_add+0x1a8>)
 8008ab4:	481e      	ldr	r0, [pc, #120]	; (8008b30 <netif_add+0x18c>)
 8008ab6:	f007 ffa1 	bl	80109fc <iprintf>
        if (netif2->num == netif->num) {
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d108      	bne.n	8008adc <netif_add+0x138>
          netif->num++;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8008ada:	e005      	b.n	8008ae8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	617b      	str	r3, [r7, #20]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1d0      	bne.n	8008a8a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1be      	bne.n	8008a6c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008af4:	2bfe      	cmp	r3, #254	; 0xfe
 8008af6:	d103      	bne.n	8008b00 <netif_add+0x15c>
    netif_num = 0;
 8008af8:	4b11      	ldr	r3, [pc, #68]	; (8008b40 <netif_add+0x19c>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	e006      	b.n	8008b0e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b06:	3301      	adds	r3, #1
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <netif_add+0x19c>)
 8008b0c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <netif_add+0x1a0>)
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008b16:	4a0b      	ldr	r2, [pc, #44]	; (8008b44 <netif_add+0x1a0>)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	08012854 	.word	0x08012854
 8008b2c:	080128e8 	.word	0x080128e8
 8008b30:	080128a4 	.word	0x080128a4
 8008b34:	08012904 	.word	0x08012904
 8008b38:	08014aac 	.word	0x08014aac
 8008b3c:	08008e97 	.word	0x08008e97
 8008b40:	20000618 	.word	0x20000618
 8008b44:	20006d10 	.word	0x20006d10
 8008b48:	08012928 	.word	0x08012928
 8008b4c:	0801293c 	.word	0x0801293c

08008b50 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f002 fd89 	bl	800b674 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f007 fdd3 	bl	8010710 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d106      	bne.n	8008b94 <netif_do_set_ipaddr+0x20>
 8008b86:	4b1d      	ldr	r3, [pc, #116]	; (8008bfc <netif_do_set_ipaddr+0x88>)
 8008b88:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008b8c:	491c      	ldr	r1, [pc, #112]	; (8008c00 <netif_do_set_ipaddr+0x8c>)
 8008b8e:	481d      	ldr	r0, [pc, #116]	; (8008c04 <netif_do_set_ipaddr+0x90>)
 8008b90:	f007 ff34 	bl	80109fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d106      	bne.n	8008ba8 <netif_do_set_ipaddr+0x34>
 8008b9a:	4b18      	ldr	r3, [pc, #96]	; (8008bfc <netif_do_set_ipaddr+0x88>)
 8008b9c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008ba0:	4917      	ldr	r1, [pc, #92]	; (8008c00 <netif_do_set_ipaddr+0x8c>)
 8008ba2:	4818      	ldr	r0, [pc, #96]	; (8008c04 <netif_do_set_ipaddr+0x90>)
 8008ba4:	f007 ff2a 	bl	80109fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d01c      	beq.n	8008bf0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008bc6:	f107 0314 	add.w	r3, r7, #20
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff ffbf 	bl	8008b50 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <netif_do_set_ipaddr+0x6a>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	e000      	b.n	8008be0 <netif_do_set_ipaddr+0x6c>
 8008bde:	2300      	movs	r3, #0
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008be4:	2101      	movs	r1, #1
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 f8d2 	bl	8008d90 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008bec:	2301      	movs	r3, #1
 8008bee:	e000      	b.n	8008bf2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	08012854 	.word	0x08012854
 8008c00:	0801296c 	.word	0x0801296c
 8008c04:	080128a4 	.word	0x080128a4

08008c08 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d00a      	beq.n	8008c38 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <netif_do_set_netmask+0x26>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	e000      	b.n	8008c30 <netif_do_set_netmask+0x28>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008c34:	2301      	movs	r3, #1
 8008c36:	e000      	b.n	8008c3a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	330c      	adds	r3, #12
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d00a      	beq.n	8008c76 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <netif_do_set_gw+0x26>
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	e000      	b.n	8008c6e <netif_do_set_gw+0x28>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008c72:	2301      	movs	r3, #1
 8008c74:	e000      	b.n	8008c78 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
 8008c90:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008c92:	2300      	movs	r3, #0
 8008c94:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008ca0:	4b1c      	ldr	r3, [pc, #112]	; (8008d14 <netif_set_addr+0x90>)
 8008ca2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008caa:	4b1a      	ldr	r3, [pc, #104]	; (8008d14 <netif_set_addr+0x90>)
 8008cac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d101      	bne.n	8008cb8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008cb4:	4b17      	ldr	r3, [pc, #92]	; (8008d14 <netif_set_addr+0x90>)
 8008cb6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <netif_set_addr+0x42>
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <netif_set_addr+0x46>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e000      	b.n	8008ccc <netif_set_addr+0x48>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d006      	beq.n	8008ce2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008cd4:	f107 0310 	add.w	r3, r7, #16
 8008cd8:	461a      	mov	r2, r3
 8008cda:	68b9      	ldr	r1, [r7, #8]
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f7ff ff49 	bl	8008b74 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008ce2:	69fa      	ldr	r2, [r7, #28]
 8008ce4:	6879      	ldr	r1, [r7, #4]
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f7ff ff8e 	bl	8008c08 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f7ff ffa8 	bl	8008c46 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d106      	bne.n	8008d0a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008cfc:	f107 0310 	add.w	r3, r7, #16
 8008d00:	461a      	mov	r2, r3
 8008d02:	68b9      	ldr	r1, [r7, #8]
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f7ff ff35 	bl	8008b74 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008d0a:	bf00      	nop
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	08014aac 	.word	0x08014aac

08008d18 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008d20:	4a04      	ldr	r2, [pc, #16]	; (8008d34 <netif_set_default+0x1c>)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	20006d14 	.word	0x20006d14

08008d38 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d107      	bne.n	8008d56 <netif_set_up+0x1e>
 8008d46:	4b0f      	ldr	r3, [pc, #60]	; (8008d84 <netif_set_up+0x4c>)
 8008d48:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008d4c:	490e      	ldr	r1, [pc, #56]	; (8008d88 <netif_set_up+0x50>)
 8008d4e:	480f      	ldr	r0, [pc, #60]	; (8008d8c <netif_set_up+0x54>)
 8008d50:	f007 fe54 	bl	80109fc <iprintf>
 8008d54:	e013      	b.n	8008d7e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10c      	bne.n	8008d7e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d6a:	f043 0301 	orr.w	r3, r3, #1
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008d76:	2103      	movs	r1, #3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f809 	bl	8008d90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	08012854 	.word	0x08012854
 8008d88:	080129dc 	.word	0x080129dc
 8008d8c:	080128a4 	.word	0x080128a4

08008d90 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d106      	bne.n	8008db0 <netif_issue_reports+0x20>
 8008da2:	4b18      	ldr	r3, [pc, #96]	; (8008e04 <netif_issue_reports+0x74>)
 8008da4:	f240 326d 	movw	r2, #877	; 0x36d
 8008da8:	4917      	ldr	r1, [pc, #92]	; (8008e08 <netif_issue_reports+0x78>)
 8008daa:	4818      	ldr	r0, [pc, #96]	; (8008e0c <netif_issue_reports+0x7c>)
 8008dac:	f007 fe26 	bl	80109fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008db6:	f003 0304 	and.w	r3, r3, #4
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d01e      	beq.n	8008dfc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008dc4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d017      	beq.n	8008dfc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008dcc:	78fb      	ldrb	r3, [r7, #3]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d013      	beq.n	8008dfe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00e      	beq.n	8008dfe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008de6:	f003 0308 	and.w	r3, r3, #8
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d007      	beq.n	8008dfe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3304      	adds	r3, #4
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7fd fe87 	bl	8006b08 <etharp_request>
 8008dfa:	e000      	b.n	8008dfe <netif_issue_reports+0x6e>
    return;
 8008dfc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	08012854 	.word	0x08012854
 8008e08:	080129f8 	.word	0x080129f8
 8008e0c:	080128a4 	.word	0x080128a4

08008e10 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d107      	bne.n	8008e2e <netif_set_down+0x1e>
 8008e1e:	4b12      	ldr	r3, [pc, #72]	; (8008e68 <netif_set_down+0x58>)
 8008e20:	f240 329b 	movw	r2, #923	; 0x39b
 8008e24:	4911      	ldr	r1, [pc, #68]	; (8008e6c <netif_set_down+0x5c>)
 8008e26:	4812      	ldr	r0, [pc, #72]	; (8008e70 <netif_set_down+0x60>)
 8008e28:	f007 fde8 	bl	80109fc <iprintf>
 8008e2c:	e019      	b.n	8008e62 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d012      	beq.n	8008e62 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e42:	f023 0301 	bic.w	r3, r3, #1
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e54:	f003 0308 	and.w	r3, r3, #8
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7fd fa0d 	bl	800627c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	08012854 	.word	0x08012854
 8008e6c:	08012a1c 	.word	0x08012a1c
 8008e70:	080128a4 	.word	0x080128a4

08008e74 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	61da      	str	r2, [r3, #28]
  }
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b085      	sub	sp, #20
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60f8      	str	r0, [r7, #12]
 8008e9e:	60b9      	str	r1, [r7, #8]
 8008ea0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008ea2:	f06f 030b 	mvn.w	r3, #11
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
	...

08008eb4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d013      	beq.n	8008eec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008ec4:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <netif_get_by_index+0x48>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60fb      	str	r3, [r7, #12]
 8008eca:	e00c      	b.n	8008ee6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	79fa      	ldrb	r2, [r7, #7]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d101      	bne.n	8008ee0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	e006      	b.n	8008eee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1ef      	bne.n	8008ecc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	20006d10 	.word	0x20006d10

08008f00 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008f06:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <pbuf_free_ooseq+0x38>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008f0c:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <pbuf_free_ooseq+0x3c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	607b      	str	r3, [r7, #4]
 8008f12:	e00a      	b.n	8008f2a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d003      	beq.n	8008f24 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f002 fbe7 	bl	800b6f0 <tcp_free_ooseq>
      return;
 8008f22:	e005      	b.n	8008f30 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	607b      	str	r3, [r7, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1f1      	bne.n	8008f14 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20006d18 	.word	0x20006d18
 8008f3c:	20006d20 	.word	0x20006d20

08008f40 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008f40:	b480      	push	{r7}
 8008f42:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008f44:	4b03      	ldr	r3, [pc, #12]	; (8008f54 <pbuf_pool_is_empty+0x14>)
 8008f46:	2201      	movs	r2, #1
 8008f48:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008f4a:	bf00      	nop
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	20006d18 	.word	0x20006d18

08008f58 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4611      	mov	r1, r2
 8008f64:	461a      	mov	r2, r3
 8008f66:	460b      	mov	r3, r1
 8008f68:	80fb      	strh	r3, [r7, #6]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	88fa      	ldrh	r2, [r7, #6]
 8008f7e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	88ba      	ldrh	r2, [r7, #4]
 8008f84:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008f86:	8b3b      	ldrh	r3, [r7, #24]
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	7f3a      	ldrb	r2, [r7, #28]
 8008f92:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2201      	movs	r2, #1
 8008f98:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	73da      	strb	r2, [r3, #15]
}
 8008fa0:	bf00      	nop
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08c      	sub	sp, #48	; 0x30
 8008fb0:	af02      	add	r7, sp, #8
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	71fb      	strb	r3, [r7, #7]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	80bb      	strh	r3, [r7, #4]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008fbe:	79fb      	ldrb	r3, [r7, #7]
 8008fc0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008fc2:	887b      	ldrh	r3, [r7, #2]
 8008fc4:	2b41      	cmp	r3, #65	; 0x41
 8008fc6:	d00b      	beq.n	8008fe0 <pbuf_alloc+0x34>
 8008fc8:	2b41      	cmp	r3, #65	; 0x41
 8008fca:	dc02      	bgt.n	8008fd2 <pbuf_alloc+0x26>
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d007      	beq.n	8008fe0 <pbuf_alloc+0x34>
 8008fd0:	e0c2      	b.n	8009158 <pbuf_alloc+0x1ac>
 8008fd2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008fd6:	d00b      	beq.n	8008ff0 <pbuf_alloc+0x44>
 8008fd8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008fdc:	d070      	beq.n	80090c0 <pbuf_alloc+0x114>
 8008fde:	e0bb      	b.n	8009158 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008fe0:	887a      	ldrh	r2, [r7, #2]
 8008fe2:	88bb      	ldrh	r3, [r7, #4]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	f000 f8d2 	bl	8009190 <pbuf_alloc_reference>
 8008fec:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008fee:	e0bd      	b.n	800916c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008ff8:	88bb      	ldrh	r3, [r7, #4]
 8008ffa:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008ffc:	2008      	movs	r0, #8
 8008ffe:	f7ff fc53 	bl	80088a8 <memp_malloc>
 8009002:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d109      	bne.n	800901e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800900a:	f7ff ff99 	bl	8008f40 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <pbuf_alloc+0x6e>
            pbuf_free(p);
 8009014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009016:	f000 faab 	bl	8009570 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	e0a7      	b.n	800916e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800901e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009020:	3303      	adds	r3, #3
 8009022:	b29b      	uxth	r3, r3
 8009024:	f023 0303 	bic.w	r3, r3, #3
 8009028:	b29b      	uxth	r3, r3
 800902a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800902e:	b29a      	uxth	r2, r3
 8009030:	8b7b      	ldrh	r3, [r7, #26]
 8009032:	4293      	cmp	r3, r2
 8009034:	bf28      	it	cs
 8009036:	4613      	movcs	r3, r2
 8009038:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800903a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800903c:	3310      	adds	r3, #16
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4413      	add	r3, r2
 8009042:	3303      	adds	r3, #3
 8009044:	f023 0303 	bic.w	r3, r3, #3
 8009048:	4618      	mov	r0, r3
 800904a:	8a79      	ldrh	r1, [r7, #18]
 800904c:	8b7a      	ldrh	r2, [r7, #26]
 800904e:	2300      	movs	r3, #0
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	887b      	ldrh	r3, [r7, #2]
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	460b      	mov	r3, r1
 8009058:	4601      	mov	r1, r0
 800905a:	6978      	ldr	r0, [r7, #20]
 800905c:	f7ff ff7c 	bl	8008f58 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f003 0303 	and.w	r3, r3, #3
 8009068:	2b00      	cmp	r3, #0
 800906a:	d006      	beq.n	800907a <pbuf_alloc+0xce>
 800906c:	4b42      	ldr	r3, [pc, #264]	; (8009178 <pbuf_alloc+0x1cc>)
 800906e:	f240 1201 	movw	r2, #257	; 0x101
 8009072:	4942      	ldr	r1, [pc, #264]	; (800917c <pbuf_alloc+0x1d0>)
 8009074:	4842      	ldr	r0, [pc, #264]	; (8009180 <pbuf_alloc+0x1d4>)
 8009076:	f007 fcc1 	bl	80109fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800907a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800907c:	3303      	adds	r3, #3
 800907e:	f023 0303 	bic.w	r3, r3, #3
 8009082:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009086:	d106      	bne.n	8009096 <pbuf_alloc+0xea>
 8009088:	4b3b      	ldr	r3, [pc, #236]	; (8009178 <pbuf_alloc+0x1cc>)
 800908a:	f240 1203 	movw	r2, #259	; 0x103
 800908e:	493d      	ldr	r1, [pc, #244]	; (8009184 <pbuf_alloc+0x1d8>)
 8009090:	483b      	ldr	r0, [pc, #236]	; (8009180 <pbuf_alloc+0x1d4>)
 8009092:	f007 fcb3 	bl	80109fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
 80090a0:	e002      	b.n	80090a8 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80090ac:	8b7a      	ldrh	r2, [r7, #26]
 80090ae:	8a7b      	ldrh	r3, [r7, #18]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80090b8:	8b7b      	ldrh	r3, [r7, #26]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d19e      	bne.n	8008ffc <pbuf_alloc+0x50>
      break;
 80090be:	e055      	b.n	800916c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80090c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090c2:	3303      	adds	r3, #3
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	f023 0303 	bic.w	r3, r3, #3
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	88bb      	ldrh	r3, [r7, #4]
 80090ce:	3303      	adds	r3, #3
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	f023 0303 	bic.w	r3, r3, #3
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	4413      	add	r3, r2
 80090da:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80090dc:	8a3b      	ldrh	r3, [r7, #16]
 80090de:	3310      	adds	r3, #16
 80090e0:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80090e2:	8a3a      	ldrh	r2, [r7, #16]
 80090e4:	88bb      	ldrh	r3, [r7, #4]
 80090e6:	3303      	adds	r3, #3
 80090e8:	f023 0303 	bic.w	r3, r3, #3
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d306      	bcc.n	80090fe <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80090f0:	89fa      	ldrh	r2, [r7, #14]
 80090f2:	88bb      	ldrh	r3, [r7, #4]
 80090f4:	3303      	adds	r3, #3
 80090f6:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d201      	bcs.n	8009102 <pbuf_alloc+0x156>
        return NULL;
 80090fe:	2300      	movs	r3, #0
 8009100:	e035      	b.n	800916e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009102:	89fb      	ldrh	r3, [r7, #14]
 8009104:	4618      	mov	r0, r3
 8009106:	f7ff fa61 	bl	80085cc <mem_malloc>
 800910a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <pbuf_alloc+0x16a>
        return NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	e02b      	b.n	800916e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009116:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009118:	3310      	adds	r3, #16
 800911a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911c:	4413      	add	r3, r2
 800911e:	3303      	adds	r3, #3
 8009120:	f023 0303 	bic.w	r3, r3, #3
 8009124:	4618      	mov	r0, r3
 8009126:	88b9      	ldrh	r1, [r7, #4]
 8009128:	88ba      	ldrh	r2, [r7, #4]
 800912a:	2300      	movs	r3, #0
 800912c:	9301      	str	r3, [sp, #4]
 800912e:	887b      	ldrh	r3, [r7, #2]
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	460b      	mov	r3, r1
 8009134:	4601      	mov	r1, r0
 8009136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009138:	f7ff ff0e 	bl	8008f58 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f003 0303 	and.w	r3, r3, #3
 8009144:	2b00      	cmp	r3, #0
 8009146:	d010      	beq.n	800916a <pbuf_alloc+0x1be>
 8009148:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <pbuf_alloc+0x1cc>)
 800914a:	f240 1223 	movw	r2, #291	; 0x123
 800914e:	490e      	ldr	r1, [pc, #56]	; (8009188 <pbuf_alloc+0x1dc>)
 8009150:	480b      	ldr	r0, [pc, #44]	; (8009180 <pbuf_alloc+0x1d4>)
 8009152:	f007 fc53 	bl	80109fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009156:	e008      	b.n	800916a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009158:	4b07      	ldr	r3, [pc, #28]	; (8009178 <pbuf_alloc+0x1cc>)
 800915a:	f240 1227 	movw	r2, #295	; 0x127
 800915e:	490b      	ldr	r1, [pc, #44]	; (800918c <pbuf_alloc+0x1e0>)
 8009160:	4807      	ldr	r0, [pc, #28]	; (8009180 <pbuf_alloc+0x1d4>)
 8009162:	f007 fc4b 	bl	80109fc <iprintf>
      return NULL;
 8009166:	2300      	movs	r3, #0
 8009168:	e001      	b.n	800916e <pbuf_alloc+0x1c2>
      break;
 800916a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800916e:	4618      	mov	r0, r3
 8009170:	3728      	adds	r7, #40	; 0x28
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	08012a84 	.word	0x08012a84
 800917c:	08012ab4 	.word	0x08012ab4
 8009180:	08012ae4 	.word	0x08012ae4
 8009184:	08012b0c 	.word	0x08012b0c
 8009188:	08012b40 	.word	0x08012b40
 800918c:	08012b6c 	.word	0x08012b6c

08009190 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af02      	add	r7, sp, #8
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	460b      	mov	r3, r1
 800919a:	807b      	strh	r3, [r7, #2]
 800919c:	4613      	mov	r3, r2
 800919e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80091a0:	883b      	ldrh	r3, [r7, #0]
 80091a2:	2b41      	cmp	r3, #65	; 0x41
 80091a4:	d009      	beq.n	80091ba <pbuf_alloc_reference+0x2a>
 80091a6:	883b      	ldrh	r3, [r7, #0]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d006      	beq.n	80091ba <pbuf_alloc_reference+0x2a>
 80091ac:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <pbuf_alloc_reference+0x5c>)
 80091ae:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80091b2:	490f      	ldr	r1, [pc, #60]	; (80091f0 <pbuf_alloc_reference+0x60>)
 80091b4:	480f      	ldr	r0, [pc, #60]	; (80091f4 <pbuf_alloc_reference+0x64>)
 80091b6:	f007 fc21 	bl	80109fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80091ba:	2007      	movs	r0, #7
 80091bc:	f7ff fb74 	bl	80088a8 <memp_malloc>
 80091c0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80091c8:	2300      	movs	r3, #0
 80091ca:	e00b      	b.n	80091e4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80091cc:	8879      	ldrh	r1, [r7, #2]
 80091ce:	887a      	ldrh	r2, [r7, #2]
 80091d0:	2300      	movs	r3, #0
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	883b      	ldrh	r3, [r7, #0]
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	460b      	mov	r3, r1
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7ff febb 	bl	8008f58 <pbuf_init_alloced_pbuf>
  return p;
 80091e2:	68fb      	ldr	r3, [r7, #12]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	08012a84 	.word	0x08012a84
 80091f0:	08012b88 	.word	0x08012b88
 80091f4:	08012ae4 	.word	0x08012ae4

080091f8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af02      	add	r7, sp, #8
 80091fe:	607b      	str	r3, [r7, #4]
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]
 8009204:	460b      	mov	r3, r1
 8009206:	81bb      	strh	r3, [r7, #12]
 8009208:	4613      	mov	r3, r2
 800920a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009210:	8a7b      	ldrh	r3, [r7, #18]
 8009212:	3303      	adds	r3, #3
 8009214:	f023 0203 	bic.w	r2, r3, #3
 8009218:	89bb      	ldrh	r3, [r7, #12]
 800921a:	441a      	add	r2, r3
 800921c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800921e:	429a      	cmp	r2, r3
 8009220:	d901      	bls.n	8009226 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	e018      	b.n	8009258 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d007      	beq.n	800923c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800922c:	8a7b      	ldrh	r3, [r7, #18]
 800922e:	3303      	adds	r3, #3
 8009230:	f023 0303 	bic.w	r3, r3, #3
 8009234:	6a3a      	ldr	r2, [r7, #32]
 8009236:	4413      	add	r3, r2
 8009238:	617b      	str	r3, [r7, #20]
 800923a:	e001      	b.n	8009240 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800923c:	2300      	movs	r3, #0
 800923e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	89b9      	ldrh	r1, [r7, #12]
 8009244:	89ba      	ldrh	r2, [r7, #12]
 8009246:	2302      	movs	r3, #2
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	897b      	ldrh	r3, [r7, #10]
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	460b      	mov	r3, r1
 8009250:	6979      	ldr	r1, [r7, #20]
 8009252:	f7ff fe81 	bl	8008f58 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009256:	687b      	ldr	r3, [r7, #4]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3718      	adds	r7, #24
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d106      	bne.n	8009280 <pbuf_realloc+0x20>
 8009272:	4b3a      	ldr	r3, [pc, #232]	; (800935c <pbuf_realloc+0xfc>)
 8009274:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009278:	4939      	ldr	r1, [pc, #228]	; (8009360 <pbuf_realloc+0x100>)
 800927a:	483a      	ldr	r0, [pc, #232]	; (8009364 <pbuf_realloc+0x104>)
 800927c:	f007 fbbe 	bl	80109fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	891b      	ldrh	r3, [r3, #8]
 8009284:	887a      	ldrh	r2, [r7, #2]
 8009286:	429a      	cmp	r2, r3
 8009288:	d264      	bcs.n	8009354 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	891a      	ldrh	r2, [r3, #8]
 800928e:	887b      	ldrh	r3, [r7, #2]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009294:	887b      	ldrh	r3, [r7, #2]
 8009296:	817b      	strh	r3, [r7, #10]
  q = p;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800929c:	e018      	b.n	80092d0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	895b      	ldrh	r3, [r3, #10]
 80092a2:	897a      	ldrh	r2, [r7, #10]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	891a      	ldrh	r2, [r3, #8]
 80092ac:	893b      	ldrh	r3, [r7, #8]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d106      	bne.n	80092d0 <pbuf_realloc+0x70>
 80092c2:	4b26      	ldr	r3, [pc, #152]	; (800935c <pbuf_realloc+0xfc>)
 80092c4:	f240 12af 	movw	r2, #431	; 0x1af
 80092c8:	4927      	ldr	r1, [pc, #156]	; (8009368 <pbuf_realloc+0x108>)
 80092ca:	4826      	ldr	r0, [pc, #152]	; (8009364 <pbuf_realloc+0x104>)
 80092cc:	f007 fb96 	bl	80109fc <iprintf>
  while (rem_len > q->len) {
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	895b      	ldrh	r3, [r3, #10]
 80092d4:	897a      	ldrh	r2, [r7, #10]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d8e1      	bhi.n	800929e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	7b1b      	ldrb	r3, [r3, #12]
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d122      	bne.n	800932c <pbuf_realloc+0xcc>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	895b      	ldrh	r3, [r3, #10]
 80092ea:	897a      	ldrh	r2, [r7, #10]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d01d      	beq.n	800932c <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	7b5b      	ldrb	r3, [r3, #13]
 80092f4:	f003 0302 	and.w	r3, r3, #2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d117      	bne.n	800932c <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	461a      	mov	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	b29a      	uxth	r2, r3
 8009308:	897b      	ldrh	r3, [r7, #10]
 800930a:	4413      	add	r3, r2
 800930c:	b29b      	uxth	r3, r3
 800930e:	4619      	mov	r1, r3
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f7ff f85f 	bl	80083d4 <mem_trim>
 8009316:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d106      	bne.n	800932c <pbuf_realloc+0xcc>
 800931e:	4b0f      	ldr	r3, [pc, #60]	; (800935c <pbuf_realloc+0xfc>)
 8009320:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009324:	4911      	ldr	r1, [pc, #68]	; (800936c <pbuf_realloc+0x10c>)
 8009326:	480f      	ldr	r0, [pc, #60]	; (8009364 <pbuf_realloc+0x104>)
 8009328:	f007 fb68 	bl	80109fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	897a      	ldrh	r2, [r7, #10]
 8009330:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	895a      	ldrh	r2, [r3, #10]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d004      	beq.n	800934c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f912 	bl	8009570 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e000      	b.n	8009356 <pbuf_realloc+0xf6>
    return;
 8009354:	bf00      	nop

}
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	08012a84 	.word	0x08012a84
 8009360:	08012b9c 	.word	0x08012b9c
 8009364:	08012ae4 	.word	0x08012ae4
 8009368:	08012bb4 	.word	0x08012bb4
 800936c:	08012bcc 	.word	0x08012bcc

08009370 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d106      	bne.n	8009392 <pbuf_add_header_impl+0x22>
 8009384:	4b2c      	ldr	r3, [pc, #176]	; (8009438 <pbuf_add_header_impl+0xc8>)
 8009386:	f240 12df 	movw	r2, #479	; 0x1df
 800938a:	492c      	ldr	r1, [pc, #176]	; (800943c <pbuf_add_header_impl+0xcc>)
 800938c:	482c      	ldr	r0, [pc, #176]	; (8009440 <pbuf_add_header_impl+0xd0>)
 800938e:	f007 fb35 	bl	80109fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d003      	beq.n	80093a0 <pbuf_add_header_impl+0x30>
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800939e:	d301      	bcc.n	80093a4 <pbuf_add_header_impl+0x34>
    return 1;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e044      	b.n	800942e <pbuf_add_header_impl+0xbe>
  }
  if (header_size_increment == 0) {
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <pbuf_add_header_impl+0x3e>
    return 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	e03f      	b.n	800942e <pbuf_add_header_impl+0xbe>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	891a      	ldrh	r2, [r3, #8]
 80093b6:	8a7b      	ldrh	r3, [r7, #18]
 80093b8:	4413      	add	r3, r2
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	8a7a      	ldrh	r2, [r7, #18]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d901      	bls.n	80093c6 <pbuf_add_header_impl+0x56>
    return 1;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e033      	b.n	800942e <pbuf_add_header_impl+0xbe>
  }

  type_internal = p->type_internal;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	7b1b      	ldrb	r3, [r3, #12]
 80093ca:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80093cc:	8a3b      	ldrh	r3, [r7, #16]
 80093ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00d      	beq.n	80093f2 <pbuf_add_header_impl+0x82>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	425b      	negs	r3, r3
 80093de:	4413      	add	r3, r2
 80093e0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f103 0210 	add.w	r2, r3, #16
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d90d      	bls.n	800940a <pbuf_add_header_impl+0x9a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e01d      	b.n	800942e <pbuf_add_header_impl+0xbe>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d006      	beq.n	8009406 <pbuf_add_header_impl+0x96>
      payload = (u8_t *)p->payload - header_size_increment;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	425b      	negs	r3, r3
 8009400:	4413      	add	r3, r2
 8009402:	617b      	str	r3, [r7, #20]
 8009404:	e001      	b.n	800940a <pbuf_add_header_impl+0x9a>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009406:	2301      	movs	r3, #1
 8009408:	e011      	b.n	800942e <pbuf_add_header_impl+0xbe>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	895a      	ldrh	r2, [r3, #10]
 8009414:	8a7b      	ldrh	r3, [r7, #18]
 8009416:	4413      	add	r3, r2
 8009418:	b29a      	uxth	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	891a      	ldrh	r2, [r3, #8]
 8009422:	8a7b      	ldrh	r3, [r7, #18]
 8009424:	4413      	add	r3, r2
 8009426:	b29a      	uxth	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	811a      	strh	r2, [r3, #8]


  return 0;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	08012a84 	.word	0x08012a84
 800943c:	08012be8 	.word	0x08012be8
 8009440:	08012ae4 	.word	0x08012ae4

08009444 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800944e:	2200      	movs	r2, #0
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff ff8c 	bl	8009370 <pbuf_add_header_impl>
 8009458:	4603      	mov	r3, r0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
	...

08009464 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d106      	bne.n	8009482 <pbuf_remove_header+0x1e>
 8009474:	4b20      	ldr	r3, [pc, #128]	; (80094f8 <pbuf_remove_header+0x94>)
 8009476:	f240 224b 	movw	r2, #587	; 0x24b
 800947a:	4920      	ldr	r1, [pc, #128]	; (80094fc <pbuf_remove_header+0x98>)
 800947c:	4820      	ldr	r0, [pc, #128]	; (8009500 <pbuf_remove_header+0x9c>)
 800947e:	f007 fabd 	bl	80109fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d003      	beq.n	8009490 <pbuf_remove_header+0x2c>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800948e:	d301      	bcc.n	8009494 <pbuf_remove_header+0x30>
    return 1;
 8009490:	2301      	movs	r3, #1
 8009492:	e02c      	b.n	80094ee <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <pbuf_remove_header+0x3a>
    return 0;
 800949a:	2300      	movs	r3, #0
 800949c:	e027      	b.n	80094ee <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	895b      	ldrh	r3, [r3, #10]
 80094a6:	89fa      	ldrh	r2, [r7, #14]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d908      	bls.n	80094be <pbuf_remove_header+0x5a>
 80094ac:	4b12      	ldr	r3, [pc, #72]	; (80094f8 <pbuf_remove_header+0x94>)
 80094ae:	f240 2255 	movw	r2, #597	; 0x255
 80094b2:	4914      	ldr	r1, [pc, #80]	; (8009504 <pbuf_remove_header+0xa0>)
 80094b4:	4812      	ldr	r0, [pc, #72]	; (8009500 <pbuf_remove_header+0x9c>)
 80094b6:	f007 faa1 	bl	80109fc <iprintf>
 80094ba:	2301      	movs	r3, #1
 80094bc:	e017      	b.n	80094ee <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	441a      	add	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	895a      	ldrh	r2, [r3, #10]
 80094d4:	89fb      	ldrh	r3, [r7, #14]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	b29a      	uxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	891a      	ldrh	r2, [r3, #8]
 80094e2:	89fb      	ldrh	r3, [r7, #14]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	08012a84 	.word	0x08012a84
 80094fc:	08012be8 	.word	0x08012be8
 8009500:	08012ae4 	.word	0x08012ae4
 8009504:	08012bf4 	.word	0x08012bf4

08009508 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	807b      	strh	r3, [r7, #2]
 8009514:	4613      	mov	r3, r2
 8009516:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009518:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800951c:	2b00      	cmp	r3, #0
 800951e:	da08      	bge.n	8009532 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009520:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009524:	425b      	negs	r3, r3
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff ff9b 	bl	8009464 <pbuf_remove_header>
 800952e:	4603      	mov	r3, r0
 8009530:	e007      	b.n	8009542 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009532:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009536:	787a      	ldrb	r2, [r7, #1]
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff ff18 	bl	8009370 <pbuf_add_header_impl>
 8009540:	4603      	mov	r3, r0
  }
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b082      	sub	sp, #8
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	460b      	mov	r3, r1
 8009554:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009556:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800955a:	2201      	movs	r2, #1
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7ff ffd2 	bl	8009508 <pbuf_header_impl>
 8009564:	4603      	mov	r3, r0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10b      	bne.n	8009596 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d106      	bne.n	8009592 <pbuf_free+0x22>
 8009584:	4b38      	ldr	r3, [pc, #224]	; (8009668 <pbuf_free+0xf8>)
 8009586:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800958a:	4938      	ldr	r1, [pc, #224]	; (800966c <pbuf_free+0xfc>)
 800958c:	4838      	ldr	r0, [pc, #224]	; (8009670 <pbuf_free+0x100>)
 800958e:	f007 fa35 	bl	80109fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009592:	2300      	movs	r3, #0
 8009594:	e063      	b.n	800965e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800959a:	e05c      	b.n	8009656 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	7b9b      	ldrb	r3, [r3, #14]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d106      	bne.n	80095b2 <pbuf_free+0x42>
 80095a4:	4b30      	ldr	r3, [pc, #192]	; (8009668 <pbuf_free+0xf8>)
 80095a6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80095aa:	4932      	ldr	r1, [pc, #200]	; (8009674 <pbuf_free+0x104>)
 80095ac:	4830      	ldr	r0, [pc, #192]	; (8009670 <pbuf_free+0x100>)
 80095ae:	f007 fa25 	bl	80109fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	7b9b      	ldrb	r3, [r3, #14]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	739a      	strb	r2, [r3, #14]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	7b9b      	ldrb	r3, [r3, #14]
 80095c2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80095c4:	7dbb      	ldrb	r3, [r7, #22]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d143      	bne.n	8009652 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	7b1b      	ldrb	r3, [r3, #12]
 80095d4:	f003 030f 	and.w	r3, r3, #15
 80095d8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	7b5b      	ldrb	r3, [r3, #13]
 80095de:	f003 0302 	and.w	r3, r3, #2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d011      	beq.n	800960a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d106      	bne.n	8009600 <pbuf_free+0x90>
 80095f2:	4b1d      	ldr	r3, [pc, #116]	; (8009668 <pbuf_free+0xf8>)
 80095f4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80095f8:	491f      	ldr	r1, [pc, #124]	; (8009678 <pbuf_free+0x108>)
 80095fa:	481d      	ldr	r0, [pc, #116]	; (8009670 <pbuf_free+0x100>)
 80095fc:	f007 f9fe 	bl	80109fc <iprintf>
        pc->custom_free_function(p);
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	4798      	blx	r3
 8009608:	e01d      	b.n	8009646 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	2b02      	cmp	r3, #2
 800960e:	d104      	bne.n	800961a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009610:	6879      	ldr	r1, [r7, #4]
 8009612:	2008      	movs	r0, #8
 8009614:	f7ff f994 	bl	8008940 <memp_free>
 8009618:	e015      	b.n	8009646 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d104      	bne.n	800962a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	2007      	movs	r0, #7
 8009624:	f7ff f98c 	bl	8008940 <memp_free>
 8009628:	e00d      	b.n	8009646 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d103      	bne.n	8009638 <pbuf_free+0xc8>
          mem_free(p);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7fe fe65 	bl	8008300 <mem_free>
 8009636:	e006      	b.n	8009646 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009638:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <pbuf_free+0xf8>)
 800963a:	f240 320f 	movw	r2, #783	; 0x30f
 800963e:	490f      	ldr	r1, [pc, #60]	; (800967c <pbuf_free+0x10c>)
 8009640:	480b      	ldr	r0, [pc, #44]	; (8009670 <pbuf_free+0x100>)
 8009642:	f007 f9db 	bl	80109fc <iprintf>
        }
      }
      count++;
 8009646:	7dfb      	ldrb	r3, [r7, #23]
 8009648:	3301      	adds	r3, #1
 800964a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	607b      	str	r3, [r7, #4]
 8009650:	e001      	b.n	8009656 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009652:	2300      	movs	r3, #0
 8009654:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d19f      	bne.n	800959c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800965c:	7dfb      	ldrb	r3, [r7, #23]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3718      	adds	r7, #24
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	08012a84 	.word	0x08012a84
 800966c:	08012be8 	.word	0x08012be8
 8009670:	08012ae4 	.word	0x08012ae4
 8009674:	08012c14 	.word	0x08012c14
 8009678:	08012c2c 	.word	0x08012c2c
 800967c:	08012c50 	.word	0x08012c50

08009680 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009688:	2300      	movs	r3, #0
 800968a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800968c:	e005      	b.n	800969a <pbuf_clen+0x1a>
    ++len;
 800968e:	89fb      	ldrh	r3, [r7, #14]
 8009690:	3301      	adds	r3, #1
 8009692:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1f6      	bne.n	800968e <pbuf_clen+0xe>
  }
  return len;
 80096a0:	89fb      	ldrh	r3, [r7, #14]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
	...

080096b0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d010      	beq.n	80096e0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	7b9b      	ldrb	r3, [r3, #14]
 80096c2:	3301      	adds	r3, #1
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	7b9b      	ldrb	r3, [r3, #14]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d106      	bne.n	80096e0 <pbuf_ref+0x30>
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <pbuf_ref+0x38>)
 80096d4:	f240 3242 	movw	r2, #834	; 0x342
 80096d8:	4904      	ldr	r1, [pc, #16]	; (80096ec <pbuf_ref+0x3c>)
 80096da:	4805      	ldr	r0, [pc, #20]	; (80096f0 <pbuf_ref+0x40>)
 80096dc:	f007 f98e 	bl	80109fc <iprintf>
  }
}
 80096e0:	bf00      	nop
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	08012a84 	.word	0x08012a84
 80096ec:	08012c64 	.word	0x08012c64
 80096f0:	08012ae4 	.word	0x08012ae4

080096f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <pbuf_cat+0x16>
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d107      	bne.n	800971a <pbuf_cat+0x26>
 800970a:	4b20      	ldr	r3, [pc, #128]	; (800978c <pbuf_cat+0x98>)
 800970c:	f240 325a 	movw	r2, #858	; 0x35a
 8009710:	491f      	ldr	r1, [pc, #124]	; (8009790 <pbuf_cat+0x9c>)
 8009712:	4820      	ldr	r0, [pc, #128]	; (8009794 <pbuf_cat+0xa0>)
 8009714:	f007 f972 	bl	80109fc <iprintf>
 8009718:	e034      	b.n	8009784 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	e00a      	b.n	8009736 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	891a      	ldrh	r2, [r3, #8]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	891b      	ldrh	r3, [r3, #8]
 8009728:	4413      	add	r3, r2
 800972a:	b29a      	uxth	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1f0      	bne.n	8009720 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	891a      	ldrh	r2, [r3, #8]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	895b      	ldrh	r3, [r3, #10]
 8009746:	429a      	cmp	r2, r3
 8009748:	d006      	beq.n	8009758 <pbuf_cat+0x64>
 800974a:	4b10      	ldr	r3, [pc, #64]	; (800978c <pbuf_cat+0x98>)
 800974c:	f240 3262 	movw	r2, #866	; 0x362
 8009750:	4911      	ldr	r1, [pc, #68]	; (8009798 <pbuf_cat+0xa4>)
 8009752:	4810      	ldr	r0, [pc, #64]	; (8009794 <pbuf_cat+0xa0>)
 8009754:	f007 f952 	bl	80109fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d006      	beq.n	800976e <pbuf_cat+0x7a>
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <pbuf_cat+0x98>)
 8009762:	f240 3263 	movw	r2, #867	; 0x363
 8009766:	490d      	ldr	r1, [pc, #52]	; (800979c <pbuf_cat+0xa8>)
 8009768:	480a      	ldr	r0, [pc, #40]	; (8009794 <pbuf_cat+0xa0>)
 800976a:	f007 f947 	bl	80109fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	891a      	ldrh	r2, [r3, #8]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	891b      	ldrh	r3, [r3, #8]
 8009776:	4413      	add	r3, r2
 8009778:	b29a      	uxth	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	08012a84 	.word	0x08012a84
 8009790:	08012c78 	.word	0x08012c78
 8009794:	08012ae4 	.word	0x08012ae4
 8009798:	08012cb0 	.word	0x08012cb0
 800979c:	08012ce0 	.word	0x08012ce0

080097a0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7ff ffa1 	bl	80096f4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80097b2:	6838      	ldr	r0, [r7, #0]
 80097b4:	f7ff ff7c 	bl	80096b0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80097b8:	bf00      	nop
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80097ca:	2300      	movs	r3, #0
 80097cc:	617b      	str	r3, [r7, #20]
 80097ce:	2300      	movs	r3, #0
 80097d0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d008      	beq.n	80097ea <pbuf_copy+0x2a>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d005      	beq.n	80097ea <pbuf_copy+0x2a>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	891a      	ldrh	r2, [r3, #8]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	891b      	ldrh	r3, [r3, #8]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d209      	bcs.n	80097fe <pbuf_copy+0x3e>
 80097ea:	4b57      	ldr	r3, [pc, #348]	; (8009948 <pbuf_copy+0x188>)
 80097ec:	f240 32ca 	movw	r2, #970	; 0x3ca
 80097f0:	4956      	ldr	r1, [pc, #344]	; (800994c <pbuf_copy+0x18c>)
 80097f2:	4857      	ldr	r0, [pc, #348]	; (8009950 <pbuf_copy+0x190>)
 80097f4:	f007 f902 	bl	80109fc <iprintf>
 80097f8:	f06f 030f 	mvn.w	r3, #15
 80097fc:	e09f      	b.n	800993e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	895b      	ldrh	r3, [r3, #10]
 8009802:	461a      	mov	r2, r3
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	1ad2      	subs	r2, r2, r3
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	895b      	ldrh	r3, [r3, #10]
 800980c:	4619      	mov	r1, r3
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	1acb      	subs	r3, r1, r3
 8009812:	429a      	cmp	r2, r3
 8009814:	d306      	bcc.n	8009824 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	895b      	ldrh	r3, [r3, #10]
 800981a:	461a      	mov	r2, r3
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	60fb      	str	r3, [r7, #12]
 8009822:	e005      	b.n	8009830 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	895b      	ldrh	r3, [r3, #10]
 8009828:	461a      	mov	r2, r3
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	18d0      	adds	r0, r2, r3
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	4413      	add	r3, r2
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	4619      	mov	r1, r3
 8009844:	f007 f8c7 	bl	80109d6 <memcpy>
    offset_to += len;
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4413      	add	r3, r2
 8009856:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	895b      	ldrh	r3, [r3, #10]
 800985c:	461a      	mov	r2, r3
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	429a      	cmp	r2, r3
 8009862:	d206      	bcs.n	8009872 <pbuf_copy+0xb2>
 8009864:	4b38      	ldr	r3, [pc, #224]	; (8009948 <pbuf_copy+0x188>)
 8009866:	f240 32d9 	movw	r2, #985	; 0x3d9
 800986a:	493a      	ldr	r1, [pc, #232]	; (8009954 <pbuf_copy+0x194>)
 800986c:	4838      	ldr	r0, [pc, #224]	; (8009950 <pbuf_copy+0x190>)
 800986e:	f007 f8c5 	bl	80109fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	895b      	ldrh	r3, [r3, #10]
 8009876:	461a      	mov	r2, r3
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	429a      	cmp	r2, r3
 800987c:	d206      	bcs.n	800988c <pbuf_copy+0xcc>
 800987e:	4b32      	ldr	r3, [pc, #200]	; (8009948 <pbuf_copy+0x188>)
 8009880:	f240 32da 	movw	r2, #986	; 0x3da
 8009884:	4934      	ldr	r1, [pc, #208]	; (8009958 <pbuf_copy+0x198>)
 8009886:	4832      	ldr	r0, [pc, #200]	; (8009950 <pbuf_copy+0x190>)
 8009888:	f007 f8b8 	bl	80109fc <iprintf>
    if (offset_from >= p_from->len) {
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	895b      	ldrh	r3, [r3, #10]
 8009890:	461a      	mov	r2, r3
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	429a      	cmp	r2, r3
 8009896:	d804      	bhi.n	80098a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009898:	2300      	movs	r3, #0
 800989a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	895b      	ldrh	r3, [r3, #10]
 80098a6:	461a      	mov	r2, r3
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d114      	bne.n	80098d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10c      	bne.n	80098d8 <pbuf_copy+0x118>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d009      	beq.n	80098d8 <pbuf_copy+0x118>
 80098c4:	4b20      	ldr	r3, [pc, #128]	; (8009948 <pbuf_copy+0x188>)
 80098c6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80098ca:	4924      	ldr	r1, [pc, #144]	; (800995c <pbuf_copy+0x19c>)
 80098cc:	4820      	ldr	r0, [pc, #128]	; (8009950 <pbuf_copy+0x190>)
 80098ce:	f007 f895 	bl	80109fc <iprintf>
 80098d2:	f06f 030f 	mvn.w	r3, #15
 80098d6:	e032      	b.n	800993e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d013      	beq.n	8009906 <pbuf_copy+0x146>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	895a      	ldrh	r2, [r3, #10]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	891b      	ldrh	r3, [r3, #8]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d10d      	bne.n	8009906 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d009      	beq.n	8009906 <pbuf_copy+0x146>
 80098f2:	4b15      	ldr	r3, [pc, #84]	; (8009948 <pbuf_copy+0x188>)
 80098f4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80098f8:	4919      	ldr	r1, [pc, #100]	; (8009960 <pbuf_copy+0x1a0>)
 80098fa:	4815      	ldr	r0, [pc, #84]	; (8009950 <pbuf_copy+0x190>)
 80098fc:	f007 f87e 	bl	80109fc <iprintf>
 8009900:	f06f 0305 	mvn.w	r3, #5
 8009904:	e01b      	b.n	800993e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d013      	beq.n	8009934 <pbuf_copy+0x174>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	895a      	ldrh	r2, [r3, #10]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	891b      	ldrh	r3, [r3, #8]
 8009914:	429a      	cmp	r2, r3
 8009916:	d10d      	bne.n	8009934 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d009      	beq.n	8009934 <pbuf_copy+0x174>
 8009920:	4b09      	ldr	r3, [pc, #36]	; (8009948 <pbuf_copy+0x188>)
 8009922:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009926:	490e      	ldr	r1, [pc, #56]	; (8009960 <pbuf_copy+0x1a0>)
 8009928:	4809      	ldr	r0, [pc, #36]	; (8009950 <pbuf_copy+0x190>)
 800992a:	f007 f867 	bl	80109fc <iprintf>
 800992e:	f06f 0305 	mvn.w	r3, #5
 8009932:	e004      	b.n	800993e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f47f af61 	bne.w	80097fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	08012a84 	.word	0x08012a84
 800994c:	08012d2c 	.word	0x08012d2c
 8009950:	08012ae4 	.word	0x08012ae4
 8009954:	08012d5c 	.word	0x08012d5c
 8009958:	08012d74 	.word	0x08012d74
 800995c:	08012d90 	.word	0x08012d90
 8009960:	08012da0 	.word	0x08012da0

08009964 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b088      	sub	sp, #32
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	4611      	mov	r1, r2
 8009970:	461a      	mov	r2, r3
 8009972:	460b      	mov	r3, r1
 8009974:	80fb      	strh	r3, [r7, #6]
 8009976:	4613      	mov	r3, r2
 8009978:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d108      	bne.n	800999a <pbuf_copy_partial+0x36>
 8009988:	4b2b      	ldr	r3, [pc, #172]	; (8009a38 <pbuf_copy_partial+0xd4>)
 800998a:	f240 420a 	movw	r2, #1034	; 0x40a
 800998e:	492b      	ldr	r1, [pc, #172]	; (8009a3c <pbuf_copy_partial+0xd8>)
 8009990:	482b      	ldr	r0, [pc, #172]	; (8009a40 <pbuf_copy_partial+0xdc>)
 8009992:	f007 f833 	bl	80109fc <iprintf>
 8009996:	2300      	movs	r3, #0
 8009998:	e04a      	b.n	8009a30 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d108      	bne.n	80099b2 <pbuf_copy_partial+0x4e>
 80099a0:	4b25      	ldr	r3, [pc, #148]	; (8009a38 <pbuf_copy_partial+0xd4>)
 80099a2:	f240 420b 	movw	r2, #1035	; 0x40b
 80099a6:	4927      	ldr	r1, [pc, #156]	; (8009a44 <pbuf_copy_partial+0xe0>)
 80099a8:	4825      	ldr	r0, [pc, #148]	; (8009a40 <pbuf_copy_partial+0xdc>)
 80099aa:	f007 f827 	bl	80109fc <iprintf>
 80099ae:	2300      	movs	r3, #0
 80099b0:	e03e      	b.n	8009a30 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	61fb      	str	r3, [r7, #28]
 80099b6:	e034      	b.n	8009a22 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80099b8:	88bb      	ldrh	r3, [r7, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00a      	beq.n	80099d4 <pbuf_copy_partial+0x70>
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	895b      	ldrh	r3, [r3, #10]
 80099c2:	88ba      	ldrh	r2, [r7, #4]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d305      	bcc.n	80099d4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	895b      	ldrh	r3, [r3, #10]
 80099cc:	88ba      	ldrh	r2, [r7, #4]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	80bb      	strh	r3, [r7, #4]
 80099d2:	e023      	b.n	8009a1c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	895a      	ldrh	r2, [r3, #10]
 80099d8:	88bb      	ldrh	r3, [r7, #4]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80099de:	8b3a      	ldrh	r2, [r7, #24]
 80099e0:	88fb      	ldrh	r3, [r7, #6]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d901      	bls.n	80099ea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80099e6:	88fb      	ldrh	r3, [r7, #6]
 80099e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80099ea:	8b7b      	ldrh	r3, [r7, #26]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	18d0      	adds	r0, r2, r3
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	88bb      	ldrh	r3, [r7, #4]
 80099f6:	4413      	add	r3, r2
 80099f8:	8b3a      	ldrh	r2, [r7, #24]
 80099fa:	4619      	mov	r1, r3
 80099fc:	f006 ffeb 	bl	80109d6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009a00:	8afa      	ldrh	r2, [r7, #22]
 8009a02:	8b3b      	ldrh	r3, [r7, #24]
 8009a04:	4413      	add	r3, r2
 8009a06:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009a08:	8b7a      	ldrh	r2, [r7, #26]
 8009a0a:	8b3b      	ldrh	r3, [r7, #24]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009a10:	88fa      	ldrh	r2, [r7, #6]
 8009a12:	8b3b      	ldrh	r3, [r7, #24]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	61fb      	str	r3, [r7, #28]
 8009a22:	88fb      	ldrh	r3, [r7, #6]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <pbuf_copy_partial+0xca>
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1c4      	bne.n	80099b8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009a2e:	8afb      	ldrh	r3, [r7, #22]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3720      	adds	r7, #32
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	08012a84 	.word	0x08012a84
 8009a3c:	08012dcc 	.word	0x08012dcc
 8009a40:	08012ae4 	.word	0x08012ae4
 8009a44:	08012dec 	.word	0x08012dec

08009a48 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	603a      	str	r2, [r7, #0]
 8009a52:	71fb      	strb	r3, [r7, #7]
 8009a54:	460b      	mov	r3, r1
 8009a56:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	8919      	ldrh	r1, [r3, #8]
 8009a5c:	88ba      	ldrh	r2, [r7, #4]
 8009a5e:	79fb      	ldrb	r3, [r7, #7]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff faa3 	bl	8008fac <pbuf_alloc>
 8009a66:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d101      	bne.n	8009a72 <pbuf_clone+0x2a>
    return NULL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e011      	b.n	8009a96 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f7ff fea3 	bl	80097c0 <pbuf_copy>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009a7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d006      	beq.n	8009a94 <pbuf_clone+0x4c>
 8009a86:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <pbuf_clone+0x58>)
 8009a88:	f240 5224 	movw	r2, #1316	; 0x524
 8009a8c:	4905      	ldr	r1, [pc, #20]	; (8009aa4 <pbuf_clone+0x5c>)
 8009a8e:	4806      	ldr	r0, [pc, #24]	; (8009aa8 <pbuf_clone+0x60>)
 8009a90:	f006 ffb4 	bl	80109fc <iprintf>
  return q;
 8009a94:	68fb      	ldr	r3, [r7, #12]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	08012a84 	.word	0x08012a84
 8009aa4:	08012ef8 	.word	0x08012ef8
 8009aa8:	08012ae4 	.word	0x08012ae4

08009aac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009ab0:	f006 ffbc 	bl	8010a2c <rand>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	4b01      	ldr	r3, [pc, #4]	; (8009acc <tcp_init+0x20>)
 8009ac6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009ac8:	bf00      	nop
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	20000010 	.word	0x20000010

08009ad0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	7d1b      	ldrb	r3, [r3, #20]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d105      	bne.n	8009aec <tcp_free+0x1c>
 8009ae0:	4b06      	ldr	r3, [pc, #24]	; (8009afc <tcp_free+0x2c>)
 8009ae2:	22d4      	movs	r2, #212	; 0xd4
 8009ae4:	4906      	ldr	r1, [pc, #24]	; (8009b00 <tcp_free+0x30>)
 8009ae6:	4807      	ldr	r0, [pc, #28]	; (8009b04 <tcp_free+0x34>)
 8009ae8:	f006 ff88 	bl	80109fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	2001      	movs	r0, #1
 8009af0:	f7fe ff26 	bl	8008940 <memp_free>
}
 8009af4:	bf00      	nop
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	08012f84 	.word	0x08012f84
 8009b00:	08012fb4 	.word	0x08012fb4
 8009b04:	08012fc8 	.word	0x08012fc8

08009b08 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7d1b      	ldrb	r3, [r3, #20]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d105      	bne.n	8009b24 <tcp_free_listen+0x1c>
 8009b18:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <tcp_free_listen+0x2c>)
 8009b1a:	22df      	movs	r2, #223	; 0xdf
 8009b1c:	4906      	ldr	r1, [pc, #24]	; (8009b38 <tcp_free_listen+0x30>)
 8009b1e:	4807      	ldr	r0, [pc, #28]	; (8009b3c <tcp_free_listen+0x34>)
 8009b20:	f006 ff6c 	bl	80109fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	2002      	movs	r0, #2
 8009b28:	f7fe ff0a 	bl	8008940 <memp_free>
}
 8009b2c:	bf00      	nop
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	08012f84 	.word	0x08012f84
 8009b38:	08012ff0 	.word	0x08012ff0
 8009b3c:	08012fc8 	.word	0x08012fc8

08009b40 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009b44:	f001 f854 	bl	800abf0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009b48:	4b07      	ldr	r3, [pc, #28]	; (8009b68 <tcp_tmr+0x28>)
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <tcp_tmr+0x28>)
 8009b52:	701a      	strb	r2, [r3, #0]
 8009b54:	4b04      	ldr	r3, [pc, #16]	; (8009b68 <tcp_tmr+0x28>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009b60:	f000 fd08 	bl	800a574 <tcp_slowtmr>
  }
}
 8009b64:	bf00      	nop
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20000619 	.word	0x20000619

08009b6c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d105      	bne.n	8009b88 <tcp_remove_listener+0x1c>
 8009b7c:	4b0d      	ldr	r3, [pc, #52]	; (8009bb4 <tcp_remove_listener+0x48>)
 8009b7e:	22ff      	movs	r2, #255	; 0xff
 8009b80:	490d      	ldr	r1, [pc, #52]	; (8009bb8 <tcp_remove_listener+0x4c>)
 8009b82:	480e      	ldr	r0, [pc, #56]	; (8009bbc <tcp_remove_listener+0x50>)
 8009b84:	f006 ff3a 	bl	80109fc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	e00a      	b.n	8009ba4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d102      	bne.n	8009b9e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1f1      	bne.n	8009b8e <tcp_remove_listener+0x22>
    }
  }
}
 8009baa:	bf00      	nop
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	08012f84 	.word	0x08012f84
 8009bb8:	0801300c 	.word	0x0801300c
 8009bbc:	08012fc8 	.word	0x08012fc8

08009bc0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d106      	bne.n	8009bdc <tcp_listen_closed+0x1c>
 8009bce:	4b14      	ldr	r3, [pc, #80]	; (8009c20 <tcp_listen_closed+0x60>)
 8009bd0:	f240 1211 	movw	r2, #273	; 0x111
 8009bd4:	4913      	ldr	r1, [pc, #76]	; (8009c24 <tcp_listen_closed+0x64>)
 8009bd6:	4814      	ldr	r0, [pc, #80]	; (8009c28 <tcp_listen_closed+0x68>)
 8009bd8:	f006 ff10 	bl	80109fc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	7d1b      	ldrb	r3, [r3, #20]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d006      	beq.n	8009bf2 <tcp_listen_closed+0x32>
 8009be4:	4b0e      	ldr	r3, [pc, #56]	; (8009c20 <tcp_listen_closed+0x60>)
 8009be6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009bea:	4910      	ldr	r1, [pc, #64]	; (8009c2c <tcp_listen_closed+0x6c>)
 8009bec:	480e      	ldr	r0, [pc, #56]	; (8009c28 <tcp_listen_closed+0x68>)
 8009bee:	f006 ff05 	bl	80109fc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	e00b      	b.n	8009c10 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009bf8:	4a0d      	ldr	r2, [pc, #52]	; (8009c30 <tcp_listen_closed+0x70>)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7ff ffb1 	bl	8009b6c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	60fb      	str	r3, [r7, #12]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	d9f0      	bls.n	8009bf8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009c16:	bf00      	nop
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	08012f84 	.word	0x08012f84
 8009c24:	08013034 	.word	0x08013034
 8009c28:	08012fc8 	.word	0x08012fc8
 8009c2c:	08013040 	.word	0x08013040
 8009c30:	08014b5c 	.word	0x08014b5c

08009c34 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009c34:	b5b0      	push	{r4, r5, r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af04      	add	r7, sp, #16
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d106      	bne.n	8009c54 <tcp_close_shutdown+0x20>
 8009c46:	4b61      	ldr	r3, [pc, #388]	; (8009dcc <tcp_close_shutdown+0x198>)
 8009c48:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009c4c:	4960      	ldr	r1, [pc, #384]	; (8009dd0 <tcp_close_shutdown+0x19c>)
 8009c4e:	4861      	ldr	r0, [pc, #388]	; (8009dd4 <tcp_close_shutdown+0x1a0>)
 8009c50:	f006 fed4 	bl	80109fc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d066      	beq.n	8009d28 <tcp_close_shutdown+0xf4>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	7d1b      	ldrb	r3, [r3, #20]
 8009c5e:	2b04      	cmp	r3, #4
 8009c60:	d003      	beq.n	8009c6a <tcp_close_shutdown+0x36>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	7d1b      	ldrb	r3, [r3, #20]
 8009c66:	2b07      	cmp	r3, #7
 8009c68:	d15e      	bne.n	8009d28 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d104      	bne.n	8009c7c <tcp_close_shutdown+0x48>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009c7a:	d055      	beq.n	8009d28 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	8b5b      	ldrh	r3, [r3, #26]
 8009c80:	f003 0310 	and.w	r3, r3, #16
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d106      	bne.n	8009c96 <tcp_close_shutdown+0x62>
 8009c88:	4b50      	ldr	r3, [pc, #320]	; (8009dcc <tcp_close_shutdown+0x198>)
 8009c8a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009c8e:	4952      	ldr	r1, [pc, #328]	; (8009dd8 <tcp_close_shutdown+0x1a4>)
 8009c90:	4850      	ldr	r0, [pc, #320]	; (8009dd4 <tcp_close_shutdown+0x1a0>)
 8009c92:	f006 feb3 	bl	80109fc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009c9e:	687d      	ldr	r5, [r7, #4]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	8ad2      	ldrh	r2, [r2, #22]
 8009ca8:	6879      	ldr	r1, [r7, #4]
 8009caa:	8b09      	ldrh	r1, [r1, #24]
 8009cac:	9102      	str	r1, [sp, #8]
 8009cae:	9201      	str	r2, [sp, #4]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	462b      	mov	r3, r5
 8009cb4:	4622      	mov	r2, r4
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f005 fd9f 	bl	800f7fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 fb62 	bl	800b388 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009cc4:	4b45      	ldr	r3, [pc, #276]	; (8009ddc <tcp_close_shutdown+0x1a8>)
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d105      	bne.n	8009cda <tcp_close_shutdown+0xa6>
 8009cce:	4b43      	ldr	r3, [pc, #268]	; (8009ddc <tcp_close_shutdown+0x1a8>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	4a41      	ldr	r2, [pc, #260]	; (8009ddc <tcp_close_shutdown+0x1a8>)
 8009cd6:	6013      	str	r3, [r2, #0]
 8009cd8:	e013      	b.n	8009d02 <tcp_close_shutdown+0xce>
 8009cda:	4b40      	ldr	r3, [pc, #256]	; (8009ddc <tcp_close_shutdown+0x1a8>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	e00c      	b.n	8009cfc <tcp_close_shutdown+0xc8>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d104      	bne.n	8009cf6 <tcp_close_shutdown+0xc2>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	68da      	ldr	r2, [r3, #12]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	60da      	str	r2, [r3, #12]
 8009cf4:	e005      	b.n	8009d02 <tcp_close_shutdown+0xce>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1ef      	bne.n	8009ce2 <tcp_close_shutdown+0xae>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	60da      	str	r2, [r3, #12]
 8009d08:	4b35      	ldr	r3, [pc, #212]	; (8009de0 <tcp_close_shutdown+0x1ac>)
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009d0e:	4b35      	ldr	r3, [pc, #212]	; (8009de4 <tcp_close_shutdown+0x1b0>)
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d102      	bne.n	8009d1e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009d18:	f003 fff4 	bl	800dd04 <tcp_trigger_input_pcb_close>
 8009d1c:	e002      	b.n	8009d24 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff fed6 	bl	8009ad0 <tcp_free>
      }
      return ERR_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	e04d      	b.n	8009dc4 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	7d1b      	ldrb	r3, [r3, #20]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d02d      	beq.n	8009d8c <tcp_close_shutdown+0x158>
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d036      	beq.n	8009da2 <tcp_close_shutdown+0x16e>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d13f      	bne.n	8009db8 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	8adb      	ldrh	r3, [r3, #22]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d021      	beq.n	8009d84 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009d40:	4b29      	ldr	r3, [pc, #164]	; (8009de8 <tcp_close_shutdown+0x1b4>)
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d105      	bne.n	8009d56 <tcp_close_shutdown+0x122>
 8009d4a:	4b27      	ldr	r3, [pc, #156]	; (8009de8 <tcp_close_shutdown+0x1b4>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	4a25      	ldr	r2, [pc, #148]	; (8009de8 <tcp_close_shutdown+0x1b4>)
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	e013      	b.n	8009d7e <tcp_close_shutdown+0x14a>
 8009d56:	4b24      	ldr	r3, [pc, #144]	; (8009de8 <tcp_close_shutdown+0x1b4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	60bb      	str	r3, [r7, #8]
 8009d5c:	e00c      	b.n	8009d78 <tcp_close_shutdown+0x144>
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	68da      	ldr	r2, [r3, #12]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d104      	bne.n	8009d72 <tcp_close_shutdown+0x13e>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	60da      	str	r2, [r3, #12]
 8009d70:	e005      	b.n	8009d7e <tcp_close_shutdown+0x14a>
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	60bb      	str	r3, [r7, #8]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1ef      	bne.n	8009d5e <tcp_close_shutdown+0x12a>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7ff fea3 	bl	8009ad0 <tcp_free>
      break;
 8009d8a:	e01a      	b.n	8009dc2 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7ff ff17 	bl	8009bc0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009d92:	6879      	ldr	r1, [r7, #4]
 8009d94:	4815      	ldr	r0, [pc, #84]	; (8009dec <tcp_close_shutdown+0x1b8>)
 8009d96:	f001 fb47 	bl	800b428 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff feb4 	bl	8009b08 <tcp_free_listen>
      break;
 8009da0:	e00f      	b.n	8009dc2 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009da2:	6879      	ldr	r1, [r7, #4]
 8009da4:	480d      	ldr	r0, [pc, #52]	; (8009ddc <tcp_close_shutdown+0x1a8>)
 8009da6:	f001 fb3f 	bl	800b428 <tcp_pcb_remove>
 8009daa:	4b0d      	ldr	r3, [pc, #52]	; (8009de0 <tcp_close_shutdown+0x1ac>)
 8009dac:	2201      	movs	r2, #1
 8009dae:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7ff fe8d 	bl	8009ad0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009db6:	e004      	b.n	8009dc2 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f819 	bl	8009df0 <tcp_close_shutdown_fin>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	e000      	b.n	8009dc4 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bdb0      	pop	{r4, r5, r7, pc}
 8009dcc:	08012f84 	.word	0x08012f84
 8009dd0:	08013058 	.word	0x08013058
 8009dd4:	08012fc8 	.word	0x08012fc8
 8009dd8:	08013078 	.word	0x08013078
 8009ddc:	20006d20 	.word	0x20006d20
 8009de0:	20006d1c 	.word	0x20006d1c
 8009de4:	20006d34 	.word	0x20006d34
 8009de8:	20006d2c 	.word	0x20006d2c
 8009dec:	20006d28 	.word	0x20006d28

08009df0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d106      	bne.n	8009e0c <tcp_close_shutdown_fin+0x1c>
 8009dfe:	4b2c      	ldr	r3, [pc, #176]	; (8009eb0 <tcp_close_shutdown_fin+0xc0>)
 8009e00:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009e04:	492b      	ldr	r1, [pc, #172]	; (8009eb4 <tcp_close_shutdown_fin+0xc4>)
 8009e06:	482c      	ldr	r0, [pc, #176]	; (8009eb8 <tcp_close_shutdown_fin+0xc8>)
 8009e08:	f006 fdf8 	bl	80109fc <iprintf>

  switch (pcb->state) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	7d1b      	ldrb	r3, [r3, #20]
 8009e10:	2b04      	cmp	r3, #4
 8009e12:	d010      	beq.n	8009e36 <tcp_close_shutdown_fin+0x46>
 8009e14:	2b07      	cmp	r3, #7
 8009e16:	d01b      	beq.n	8009e50 <tcp_close_shutdown_fin+0x60>
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d126      	bne.n	8009e6a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f004 fde1 	bl	800e9e4 <tcp_send_fin>
 8009e22:	4603      	mov	r3, r0
 8009e24:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d11f      	bne.n	8009e6e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2205      	movs	r2, #5
 8009e32:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009e34:	e01b      	b.n	8009e6e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f004 fdd4 	bl	800e9e4 <tcp_send_fin>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d114      	bne.n	8009e72 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2205      	movs	r2, #5
 8009e4c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009e4e:	e010      	b.n	8009e72 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f004 fdc7 	bl	800e9e4 <tcp_send_fin>
 8009e56:	4603      	mov	r3, r0
 8009e58:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d109      	bne.n	8009e76 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2209      	movs	r2, #9
 8009e66:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009e68:	e005      	b.n	8009e76 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e01c      	b.n	8009ea8 <tcp_close_shutdown_fin+0xb8>
      break;
 8009e6e:	bf00      	nop
 8009e70:	e002      	b.n	8009e78 <tcp_close_shutdown_fin+0x88>
      break;
 8009e72:	bf00      	nop
 8009e74:	e000      	b.n	8009e78 <tcp_close_shutdown_fin+0x88>
      break;
 8009e76:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d103      	bne.n	8009e88 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f004 feef 	bl	800ec64 <tcp_output>
 8009e86:	e00d      	b.n	8009ea4 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e90:	d108      	bne.n	8009ea4 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	8b5b      	ldrh	r3, [r3, #26]
 8009e96:	f043 0308 	orr.w	r3, r3, #8
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	e001      	b.n	8009ea8 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8009ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	08012f84 	.word	0x08012f84
 8009eb4:	08013034 	.word	0x08013034
 8009eb8:	08012fc8 	.word	0x08012fc8

08009ebc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d109      	bne.n	8009ede <tcp_close+0x22>
 8009eca:	4b0f      	ldr	r3, [pc, #60]	; (8009f08 <tcp_close+0x4c>)
 8009ecc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009ed0:	490e      	ldr	r1, [pc, #56]	; (8009f0c <tcp_close+0x50>)
 8009ed2:	480f      	ldr	r0, [pc, #60]	; (8009f10 <tcp_close+0x54>)
 8009ed4:	f006 fd92 	bl	80109fc <iprintf>
 8009ed8:	f06f 030f 	mvn.w	r3, #15
 8009edc:	e00f      	b.n	8009efe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	7d1b      	ldrb	r3, [r3, #20]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d006      	beq.n	8009ef4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	8b5b      	ldrh	r3, [r3, #26]
 8009eea:	f043 0310 	orr.w	r3, r3, #16
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7ff fe9c 	bl	8009c34 <tcp_close_shutdown>
 8009efc:	4603      	mov	r3, r0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	08012f84 	.word	0x08012f84
 8009f0c:	08013094 	.word	0x08013094
 8009f10:	08012fc8 	.word	0x08012fc8

08009f14 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b08e      	sub	sp, #56	; 0x38
 8009f18:	af04      	add	r7, sp, #16
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d107      	bne.n	8009f34 <tcp_abandon+0x20>
 8009f24:	4b52      	ldr	r3, [pc, #328]	; (800a070 <tcp_abandon+0x15c>)
 8009f26:	f240 223d 	movw	r2, #573	; 0x23d
 8009f2a:	4952      	ldr	r1, [pc, #328]	; (800a074 <tcp_abandon+0x160>)
 8009f2c:	4852      	ldr	r0, [pc, #328]	; (800a078 <tcp_abandon+0x164>)
 8009f2e:	f006 fd65 	bl	80109fc <iprintf>
 8009f32:	e099      	b.n	800a068 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	7d1b      	ldrb	r3, [r3, #20]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d106      	bne.n	8009f4a <tcp_abandon+0x36>
 8009f3c:	4b4c      	ldr	r3, [pc, #304]	; (800a070 <tcp_abandon+0x15c>)
 8009f3e:	f240 2241 	movw	r2, #577	; 0x241
 8009f42:	494e      	ldr	r1, [pc, #312]	; (800a07c <tcp_abandon+0x168>)
 8009f44:	484c      	ldr	r0, [pc, #304]	; (800a078 <tcp_abandon+0x164>)
 8009f46:	f006 fd59 	bl	80109fc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	7d1b      	ldrb	r3, [r3, #20]
 8009f4e:	2b0a      	cmp	r3, #10
 8009f50:	d107      	bne.n	8009f62 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009f52:	6879      	ldr	r1, [r7, #4]
 8009f54:	484a      	ldr	r0, [pc, #296]	; (800a080 <tcp_abandon+0x16c>)
 8009f56:	f001 fa67 	bl	800b428 <tcp_pcb_remove>
    tcp_free(pcb);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7ff fdb8 	bl	8009ad0 <tcp_free>
 8009f60:	e082      	b.n	800a068 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009f62:	2300      	movs	r3, #0
 8009f64:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f6e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f7c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	7d1b      	ldrb	r3, [r3, #20]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d126      	bne.n	8009fda <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	8adb      	ldrh	r3, [r3, #22]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d02e      	beq.n	8009ff2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009f94:	4b3b      	ldr	r3, [pc, #236]	; (800a084 <tcp_abandon+0x170>)
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d105      	bne.n	8009faa <tcp_abandon+0x96>
 8009f9e:	4b39      	ldr	r3, [pc, #228]	; (800a084 <tcp_abandon+0x170>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	4a37      	ldr	r2, [pc, #220]	; (800a084 <tcp_abandon+0x170>)
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	e013      	b.n	8009fd2 <tcp_abandon+0xbe>
 8009faa:	4b36      	ldr	r3, [pc, #216]	; (800a084 <tcp_abandon+0x170>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	61fb      	str	r3, [r7, #28]
 8009fb0:	e00c      	b.n	8009fcc <tcp_abandon+0xb8>
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	68da      	ldr	r2, [r3, #12]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d104      	bne.n	8009fc6 <tcp_abandon+0xb2>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	68da      	ldr	r2, [r3, #12]
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	60da      	str	r2, [r3, #12]
 8009fc4:	e005      	b.n	8009fd2 <tcp_abandon+0xbe>
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	61fb      	str	r3, [r7, #28]
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1ef      	bne.n	8009fb2 <tcp_abandon+0x9e>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	60da      	str	r2, [r3, #12]
 8009fd8:	e00b      	b.n	8009ff2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	8adb      	ldrh	r3, [r3, #22]
 8009fe2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	4828      	ldr	r0, [pc, #160]	; (800a088 <tcp_abandon+0x174>)
 8009fe8:	f001 fa1e 	bl	800b428 <tcp_pcb_remove>
 8009fec:	4b27      	ldr	r3, [pc, #156]	; (800a08c <tcp_abandon+0x178>)
 8009fee:	2201      	movs	r2, #1
 8009ff0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d004      	beq.n	800a004 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 fed6 	bl	800adb0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d004      	beq.n	800a016 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a010:	4618      	mov	r0, r3
 800a012:	f000 fecd 	bl	800adb0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d004      	beq.n	800a028 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a022:	4618      	mov	r0, r3
 800a024:	f000 fec4 	bl	800adb0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00e      	beq.n	800a04c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a02e:	6879      	ldr	r1, [r7, #4]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3304      	adds	r3, #4
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	8b12      	ldrh	r2, [r2, #24]
 800a038:	9202      	str	r2, [sp, #8]
 800a03a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a03c:	9201      	str	r2, [sp, #4]
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	460b      	mov	r3, r1
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	69b9      	ldr	r1, [r7, #24]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f005 fbd8 	bl	800f7fc <tcp_rst>
    }
    last_state = pcb->state;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	7d1b      	ldrb	r3, [r3, #20]
 800a050:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff fd3c 	bl	8009ad0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d004      	beq.n	800a068 <tcp_abandon+0x154>
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	f06f 010c 	mvn.w	r1, #12
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	4798      	blx	r3
  }
}
 800a068:	3728      	adds	r7, #40	; 0x28
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	08012f84 	.word	0x08012f84
 800a074:	080130c8 	.word	0x080130c8
 800a078:	08012fc8 	.word	0x08012fc8
 800a07c:	080130e4 	.word	0x080130e4
 800a080:	20006d30 	.word	0x20006d30
 800a084:	20006d2c 	.word	0x20006d2c
 800a088:	20006d20 	.word	0x20006d20
 800a08c:	20006d1c 	.word	0x20006d1c

0800a090 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a098:	2101      	movs	r1, #1
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7ff ff3a 	bl	8009f14 <tcp_abandon>
}
 800a0a0:	bf00      	nop
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b088      	sub	sp, #32
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800a0b6:	2304      	movs	r3, #4
 800a0b8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800a0c0:	4b3e      	ldr	r3, [pc, #248]	; (800a1bc <tcp_bind+0x114>)
 800a0c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d109      	bne.n	800a0de <tcp_bind+0x36>
 800a0ca:	4b3d      	ldr	r3, [pc, #244]	; (800a1c0 <tcp_bind+0x118>)
 800a0cc:	f240 22a9 	movw	r2, #681	; 0x2a9
 800a0d0:	493c      	ldr	r1, [pc, #240]	; (800a1c4 <tcp_bind+0x11c>)
 800a0d2:	483d      	ldr	r0, [pc, #244]	; (800a1c8 <tcp_bind+0x120>)
 800a0d4:	f006 fc92 	bl	80109fc <iprintf>
 800a0d8:	f06f 030f 	mvn.w	r3, #15
 800a0dc:	e06a      	b.n	800a1b4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	7d1b      	ldrb	r3, [r3, #20]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d009      	beq.n	800a0fa <tcp_bind+0x52>
 800a0e6:	4b36      	ldr	r3, [pc, #216]	; (800a1c0 <tcp_bind+0x118>)
 800a0e8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a0ec:	4937      	ldr	r1, [pc, #220]	; (800a1cc <tcp_bind+0x124>)
 800a0ee:	4836      	ldr	r0, [pc, #216]	; (800a1c8 <tcp_bind+0x120>)
 800a0f0:	f006 fc84 	bl	80109fc <iprintf>
 800a0f4:	f06f 0305 	mvn.w	r3, #5
 800a0f8:	e05c      	b.n	800a1b4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800a0fa:	88fb      	ldrh	r3, [r7, #6]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d109      	bne.n	800a114 <tcp_bind+0x6c>
    port = tcp_new_port();
 800a100:	f000 f9f2 	bl	800a4e8 <tcp_new_port>
 800a104:	4603      	mov	r3, r0
 800a106:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a108:	88fb      	ldrh	r3, [r7, #6]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d135      	bne.n	800a17a <tcp_bind+0xd2>
      return ERR_BUF;
 800a10e:	f06f 0301 	mvn.w	r3, #1
 800a112:	e04f      	b.n	800a1b4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800a114:	2300      	movs	r3, #0
 800a116:	61fb      	str	r3, [r7, #28]
 800a118:	e02b      	b.n	800a172 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a11a:	4a2d      	ldr	r2, [pc, #180]	; (800a1d0 <tcp_bind+0x128>)
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	61bb      	str	r3, [r7, #24]
 800a126:	e01e      	b.n	800a166 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	8adb      	ldrh	r3, [r3, #22]
 800a12c:	88fa      	ldrh	r2, [r7, #6]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d116      	bne.n	800a160 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800a132:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a134:	2b00      	cmp	r3, #0
 800a136:	d010      	beq.n	800a15a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00c      	beq.n	800a15a <tcp_bind+0xb2>
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d009      	beq.n	800a15a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d005      	beq.n	800a15a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a156:	429a      	cmp	r2, r3
 800a158:	d102      	bne.n	800a160 <tcp_bind+0xb8>
              return ERR_USE;
 800a15a:	f06f 0307 	mvn.w	r3, #7
 800a15e:	e029      	b.n	800a1b4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	61bb      	str	r3, [r7, #24]
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1dd      	bne.n	800a128 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	3301      	adds	r3, #1
 800a170:	61fb      	str	r3, [r7, #28]
 800a172:	69fa      	ldr	r2, [r7, #28]
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	429a      	cmp	r2, r3
 800a178:	dbcf      	blt.n	800a11a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00c      	beq.n	800a19a <tcp_bind+0xf2>
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d008      	beq.n	800a19a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d002      	beq.n	800a194 <tcp_bind+0xec>
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	e000      	b.n	800a196 <tcp_bind+0xee>
 800a194:	2300      	movs	r3, #0
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	88fa      	ldrh	r2, [r7, #6]
 800a19e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a1a0:	4b0c      	ldr	r3, [pc, #48]	; (800a1d4 <tcp_bind+0x12c>)
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	60da      	str	r2, [r3, #12]
 800a1a8:	4a0a      	ldr	r2, [pc, #40]	; (800a1d4 <tcp_bind+0x12c>)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	f005 fce9 	bl	800fb84 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3720      	adds	r7, #32
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	08014aac 	.word	0x08014aac
 800a1c0:	08012f84 	.word	0x08012f84
 800a1c4:	08013118 	.word	0x08013118
 800a1c8:	08012fc8 	.word	0x08012fc8
 800a1cc:	08013130 	.word	0x08013130
 800a1d0:	08014b5c 	.word	0x08014b5c
 800a1d4:	20006d2c 	.word	0x20006d2c

0800a1d8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d106      	bne.n	800a1fa <tcp_accept_null+0x22>
 800a1ec:	4b07      	ldr	r3, [pc, #28]	; (800a20c <tcp_accept_null+0x34>)
 800a1ee:	f240 320f 	movw	r2, #783	; 0x30f
 800a1f2:	4907      	ldr	r1, [pc, #28]	; (800a210 <tcp_accept_null+0x38>)
 800a1f4:	4807      	ldr	r0, [pc, #28]	; (800a214 <tcp_accept_null+0x3c>)
 800a1f6:	f006 fc01 	bl	80109fc <iprintf>

  tcp_abort(pcb);
 800a1fa:	68b8      	ldr	r0, [r7, #8]
 800a1fc:	f7ff ff48 	bl	800a090 <tcp_abort>

  return ERR_ABRT;
 800a200:	f06f 030c 	mvn.w	r3, #12
}
 800a204:	4618      	mov	r0, r3
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	08012f84 	.word	0x08012f84
 800a210:	08013158 	.word	0x08013158
 800a214:	08012fc8 	.word	0x08012fc8

0800a218 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800a224:	78fb      	ldrb	r3, [r7, #3]
 800a226:	2200      	movs	r2, #0
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f806 	bl	800a23c <tcp_listen_with_backlog_and_err>
 800a230:	4603      	mov	r3, r0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	460b      	mov	r3, r1
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d109      	bne.n	800a268 <tcp_listen_with_backlog_and_err+0x2c>
 800a254:	4b47      	ldr	r3, [pc, #284]	; (800a374 <tcp_listen_with_backlog_and_err+0x138>)
 800a256:	f240 3259 	movw	r2, #857	; 0x359
 800a25a:	4947      	ldr	r1, [pc, #284]	; (800a378 <tcp_listen_with_backlog_and_err+0x13c>)
 800a25c:	4847      	ldr	r0, [pc, #284]	; (800a37c <tcp_listen_with_backlog_and_err+0x140>)
 800a25e:	f006 fbcd 	bl	80109fc <iprintf>
 800a262:	23f0      	movs	r3, #240	; 0xf0
 800a264:	76fb      	strb	r3, [r7, #27]
 800a266:	e079      	b.n	800a35c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	7d1b      	ldrb	r3, [r3, #20]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d009      	beq.n	800a284 <tcp_listen_with_backlog_and_err+0x48>
 800a270:	4b40      	ldr	r3, [pc, #256]	; (800a374 <tcp_listen_with_backlog_and_err+0x138>)
 800a272:	f240 325a 	movw	r2, #858	; 0x35a
 800a276:	4942      	ldr	r1, [pc, #264]	; (800a380 <tcp_listen_with_backlog_and_err+0x144>)
 800a278:	4840      	ldr	r0, [pc, #256]	; (800a37c <tcp_listen_with_backlog_and_err+0x140>)
 800a27a:	f006 fbbf 	bl	80109fc <iprintf>
 800a27e:	23f1      	movs	r3, #241	; 0xf1
 800a280:	76fb      	strb	r3, [r7, #27]
 800a282:	e06b      	b.n	800a35c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	7d1b      	ldrb	r3, [r3, #20]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d104      	bne.n	800a296 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800a290:	23f7      	movs	r3, #247	; 0xf7
 800a292:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a294:	e062      	b.n	800a35c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a296:	2002      	movs	r0, #2
 800a298:	f7fe fb06 	bl	80088a8 <memp_malloc>
 800a29c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d102      	bne.n	800a2aa <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800a2a4:	23ff      	movs	r3, #255	; 0xff
 800a2a6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a2a8:	e058      	b.n	800a35c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	691a      	ldr	r2, [r3, #16]
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	8ada      	ldrh	r2, [r3, #22]
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	7d5a      	ldrb	r2, [r3, #21]
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	7a5a      	ldrb	r2, [r3, #9]
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	7ada      	ldrb	r2, [r3, #11]
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	7a9a      	ldrb	r2, [r3, #10]
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8adb      	ldrh	r3, [r3, #22]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d021      	beq.n	800a33a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a2f6:	4b23      	ldr	r3, [pc, #140]	; (800a384 <tcp_listen_with_backlog_and_err+0x148>)
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d105      	bne.n	800a30c <tcp_listen_with_backlog_and_err+0xd0>
 800a300:	4b20      	ldr	r3, [pc, #128]	; (800a384 <tcp_listen_with_backlog_and_err+0x148>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	4a1f      	ldr	r2, [pc, #124]	; (800a384 <tcp_listen_with_backlog_and_err+0x148>)
 800a308:	6013      	str	r3, [r2, #0]
 800a30a:	e013      	b.n	800a334 <tcp_listen_with_backlog_and_err+0xf8>
 800a30c:	4b1d      	ldr	r3, [pc, #116]	; (800a384 <tcp_listen_with_backlog_and_err+0x148>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	617b      	str	r3, [r7, #20]
 800a312:	e00c      	b.n	800a32e <tcp_listen_with_backlog_and_err+0xf2>
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	68da      	ldr	r2, [r3, #12]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d104      	bne.n	800a328 <tcp_listen_with_backlog_and_err+0xec>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	60da      	str	r2, [r3, #12]
 800a326:	e005      	b.n	800a334 <tcp_listen_with_backlog_and_err+0xf8>
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	617b      	str	r3, [r7, #20]
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1ef      	bne.n	800a314 <tcp_listen_with_backlog_and_err+0xd8>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f7ff fbc8 	bl	8009ad0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	4a11      	ldr	r2, [pc, #68]	; (800a388 <tcp_listen_with_backlog_and_err+0x14c>)
 800a344:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a346:	4b11      	ldr	r3, [pc, #68]	; (800a38c <tcp_listen_with_backlog_and_err+0x150>)
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	60da      	str	r2, [r3, #12]
 800a34e:	4a0f      	ldr	r2, [pc, #60]	; (800a38c <tcp_listen_with_backlog_and_err+0x150>)
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	f005 fc16 	bl	800fb84 <tcp_timer_needed>
  res = ERR_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	7efa      	ldrb	r2, [r7, #27]
 800a366:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800a368:	69fb      	ldr	r3, [r7, #28]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3720      	adds	r7, #32
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	08012f84 	.word	0x08012f84
 800a378:	08013178 	.word	0x08013178
 800a37c:	08012fc8 	.word	0x08012fc8
 800a380:	080131a8 	.word	0x080131a8
 800a384:	20006d2c 	.word	0x20006d2c
 800a388:	0800a1d9 	.word	0x0800a1d9
 800a38c:	20006d28 	.word	0x20006d28

0800a390 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d106      	bne.n	800a3ac <tcp_update_rcv_ann_wnd+0x1c>
 800a39e:	4b26      	ldr	r3, [pc, #152]	; (800a438 <tcp_update_rcv_ann_wnd+0xa8>)
 800a3a0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a3a4:	4925      	ldr	r1, [pc, #148]	; (800a43c <tcp_update_rcv_ann_wnd+0xac>)
 800a3a6:	4826      	ldr	r0, [pc, #152]	; (800a440 <tcp_update_rcv_ann_wnd+0xb0>)
 800a3a8:	f006 fb28 	bl	80109fc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a3b4:	4413      	add	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a3c0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a3c4:	d802      	bhi.n	800a3cc <tcp_update_rcv_ann_wnd+0x3c>
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a3ca:	e001      	b.n	800a3d0 <tcp_update_rcv_ann_wnd+0x40>
 800a3cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a3d0:	4413      	add	r3, r2
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	db08      	blt.n	800a3ec <tcp_update_rcv_ann_wnd+0x5c>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	e020      	b.n	800a42e <tcp_update_rcv_ann_wnd+0x9e>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	dd03      	ble.n	800a402 <tcp_update_rcv_ann_wnd+0x72>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a400:	e014      	b.n	800a42c <tcp_update_rcv_ann_wnd+0x9c>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a414:	d306      	bcc.n	800a424 <tcp_update_rcv_ann_wnd+0x94>
 800a416:	4b08      	ldr	r3, [pc, #32]	; (800a438 <tcp_update_rcv_ann_wnd+0xa8>)
 800a418:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a41c:	4909      	ldr	r1, [pc, #36]	; (800a444 <tcp_update_rcv_ann_wnd+0xb4>)
 800a41e:	4808      	ldr	r0, [pc, #32]	; (800a440 <tcp_update_rcv_ann_wnd+0xb0>)
 800a420:	f006 faec 	bl	80109fc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	b29a      	uxth	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a42c:	2300      	movs	r3, #0
  }
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	08012f84 	.word	0x08012f84
 800a43c:	080131e0 	.word	0x080131e0
 800a440:	08012fc8 	.word	0x08012fc8
 800a444:	08013204 	.word	0x08013204

0800a448 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d107      	bne.n	800a46a <tcp_recved+0x22>
 800a45a:	4b1f      	ldr	r3, [pc, #124]	; (800a4d8 <tcp_recved+0x90>)
 800a45c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a460:	491e      	ldr	r1, [pc, #120]	; (800a4dc <tcp_recved+0x94>)
 800a462:	481f      	ldr	r0, [pc, #124]	; (800a4e0 <tcp_recved+0x98>)
 800a464:	f006 faca 	bl	80109fc <iprintf>
 800a468:	e032      	b.n	800a4d0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	7d1b      	ldrb	r3, [r3, #20]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d106      	bne.n	800a480 <tcp_recved+0x38>
 800a472:	4b19      	ldr	r3, [pc, #100]	; (800a4d8 <tcp_recved+0x90>)
 800a474:	f240 32d3 	movw	r2, #979	; 0x3d3
 800a478:	491a      	ldr	r1, [pc, #104]	; (800a4e4 <tcp_recved+0x9c>)
 800a47a:	4819      	ldr	r0, [pc, #100]	; (800a4e0 <tcp_recved+0x98>)
 800a47c:	f006 fabe 	bl	80109fc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a484:	887b      	ldrh	r3, [r7, #2]
 800a486:	4413      	add	r3, r2
 800a488:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a48a:	89fb      	ldrh	r3, [r7, #14]
 800a48c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a490:	d804      	bhi.n	800a49c <tcp_recved+0x54>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a496:	89fa      	ldrh	r2, [r7, #14]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d204      	bcs.n	800a4a6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a4a2:	851a      	strh	r2, [r3, #40]	; 0x28
 800a4a4:	e002      	b.n	800a4ac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	89fa      	ldrh	r2, [r7, #14]
 800a4aa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff ff6f 	bl	800a390 <tcp_update_rcv_ann_wnd>
 800a4b2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a4ba:	d309      	bcc.n	800a4d0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	8b5b      	ldrh	r3, [r3, #26]
 800a4c0:	f043 0302 	orr.w	r3, r3, #2
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f004 fbca 	bl	800ec64 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	08012f84 	.word	0x08012f84
 800a4dc:	08013220 	.word	0x08013220
 800a4e0:	08012fc8 	.word	0x08012fc8
 800a4e4:	08013238 	.word	0x08013238

0800a4e8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800a4f2:	4b1e      	ldr	r3, [pc, #120]	; (800a56c <tcp_new_port+0x84>)
 800a4f4:	881b      	ldrh	r3, [r3, #0]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	4b1c      	ldr	r3, [pc, #112]	; (800a56c <tcp_new_port+0x84>)
 800a4fc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a4fe:	4b1b      	ldr	r3, [pc, #108]	; (800a56c <tcp_new_port+0x84>)
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a506:	4293      	cmp	r3, r2
 800a508:	d103      	bne.n	800a512 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a50a:	4b18      	ldr	r3, [pc, #96]	; (800a56c <tcp_new_port+0x84>)
 800a50c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a510:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a512:	2300      	movs	r3, #0
 800a514:	71fb      	strb	r3, [r7, #7]
 800a516:	e01e      	b.n	800a556 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a518:	79fb      	ldrb	r3, [r7, #7]
 800a51a:	4a15      	ldr	r2, [pc, #84]	; (800a570 <tcp_new_port+0x88>)
 800a51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	603b      	str	r3, [r7, #0]
 800a524:	e011      	b.n	800a54a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	8ada      	ldrh	r2, [r3, #22]
 800a52a:	4b10      	ldr	r3, [pc, #64]	; (800a56c <tcp_new_port+0x84>)
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d108      	bne.n	800a544 <tcp_new_port+0x5c>
        n++;
 800a532:	88bb      	ldrh	r3, [r7, #4]
 800a534:	3301      	adds	r3, #1
 800a536:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a538:	88bb      	ldrh	r3, [r7, #4]
 800a53a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a53e:	d3d8      	bcc.n	800a4f2 <tcp_new_port+0xa>
          return 0;
 800a540:	2300      	movs	r3, #0
 800a542:	e00d      	b.n	800a560 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1ea      	bne.n	800a526 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	3301      	adds	r3, #1
 800a554:	71fb      	strb	r3, [r7, #7]
 800a556:	79fb      	ldrb	r3, [r7, #7]
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d9dd      	bls.n	800a518 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a55c:	4b03      	ldr	r3, [pc, #12]	; (800a56c <tcp_new_port+0x84>)
 800a55e:	881b      	ldrh	r3, [r3, #0]
}
 800a560:	4618      	mov	r0, r3
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	20000010 	.word	0x20000010
 800a570:	08014b5c 	.word	0x08014b5c

0800a574 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a574:	b5b0      	push	{r4, r5, r7, lr}
 800a576:	b090      	sub	sp, #64	; 0x40
 800a578:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a580:	4b94      	ldr	r3, [pc, #592]	; (800a7d4 <tcp_slowtmr+0x260>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	3301      	adds	r3, #1
 800a586:	4a93      	ldr	r2, [pc, #588]	; (800a7d4 <tcp_slowtmr+0x260>)
 800a588:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a58a:	4b93      	ldr	r3, [pc, #588]	; (800a7d8 <tcp_slowtmr+0x264>)
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	3301      	adds	r3, #1
 800a590:	b2da      	uxtb	r2, r3
 800a592:	4b91      	ldr	r3, [pc, #580]	; (800a7d8 <tcp_slowtmr+0x264>)
 800a594:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a596:	2300      	movs	r3, #0
 800a598:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a59a:	4b90      	ldr	r3, [pc, #576]	; (800a7dc <tcp_slowtmr+0x268>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a5a0:	e29d      	b.n	800aade <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	7d1b      	ldrb	r3, [r3, #20]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d106      	bne.n	800a5b8 <tcp_slowtmr+0x44>
 800a5aa:	4b8d      	ldr	r3, [pc, #564]	; (800a7e0 <tcp_slowtmr+0x26c>)
 800a5ac:	f240 42be 	movw	r2, #1214	; 0x4be
 800a5b0:	498c      	ldr	r1, [pc, #560]	; (800a7e4 <tcp_slowtmr+0x270>)
 800a5b2:	488d      	ldr	r0, [pc, #564]	; (800a7e8 <tcp_slowtmr+0x274>)
 800a5b4:	f006 fa22 	bl	80109fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ba:	7d1b      	ldrb	r3, [r3, #20]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d106      	bne.n	800a5ce <tcp_slowtmr+0x5a>
 800a5c0:	4b87      	ldr	r3, [pc, #540]	; (800a7e0 <tcp_slowtmr+0x26c>)
 800a5c2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a5c6:	4989      	ldr	r1, [pc, #548]	; (800a7ec <tcp_slowtmr+0x278>)
 800a5c8:	4887      	ldr	r0, [pc, #540]	; (800a7e8 <tcp_slowtmr+0x274>)
 800a5ca:	f006 fa17 	bl	80109fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d0:	7d1b      	ldrb	r3, [r3, #20]
 800a5d2:	2b0a      	cmp	r3, #10
 800a5d4:	d106      	bne.n	800a5e4 <tcp_slowtmr+0x70>
 800a5d6:	4b82      	ldr	r3, [pc, #520]	; (800a7e0 <tcp_slowtmr+0x26c>)
 800a5d8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a5dc:	4984      	ldr	r1, [pc, #528]	; (800a7f0 <tcp_slowtmr+0x27c>)
 800a5de:	4882      	ldr	r0, [pc, #520]	; (800a7e8 <tcp_slowtmr+0x274>)
 800a5e0:	f006 fa0c 	bl	80109fc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	7f9a      	ldrb	r2, [r3, #30]
 800a5e8:	4b7b      	ldr	r3, [pc, #492]	; (800a7d8 <tcp_slowtmr+0x264>)
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d105      	bne.n	800a5fc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a5fa:	e270      	b.n	800aade <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a5fc:	4b76      	ldr	r3, [pc, #472]	; (800a7d8 <tcp_slowtmr+0x264>)
 800a5fe:	781a      	ldrb	r2, [r3, #0]
 800a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a602:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a612:	7d1b      	ldrb	r3, [r3, #20]
 800a614:	2b02      	cmp	r3, #2
 800a616:	d10a      	bne.n	800a62e <tcp_slowtmr+0xba>
 800a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a61e:	2b05      	cmp	r3, #5
 800a620:	d905      	bls.n	800a62e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a626:	3301      	adds	r3, #1
 800a628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a62c:	e11e      	b.n	800a86c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a630:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a634:	2b0b      	cmp	r3, #11
 800a636:	d905      	bls.n	800a644 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a63c:	3301      	adds	r3, #1
 800a63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a642:	e113      	b.n	800a86c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a646:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d075      	beq.n	800a73a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a652:	2b00      	cmp	r3, #0
 800a654:	d006      	beq.n	800a664 <tcp_slowtmr+0xf0>
 800a656:	4b62      	ldr	r3, [pc, #392]	; (800a7e0 <tcp_slowtmr+0x26c>)
 800a658:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a65c:	4965      	ldr	r1, [pc, #404]	; (800a7f4 <tcp_slowtmr+0x280>)
 800a65e:	4862      	ldr	r0, [pc, #392]	; (800a7e8 <tcp_slowtmr+0x274>)
 800a660:	f006 f9cc 	bl	80109fc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d106      	bne.n	800a67a <tcp_slowtmr+0x106>
 800a66c:	4b5c      	ldr	r3, [pc, #368]	; (800a7e0 <tcp_slowtmr+0x26c>)
 800a66e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a672:	4961      	ldr	r1, [pc, #388]	; (800a7f8 <tcp_slowtmr+0x284>)
 800a674:	485c      	ldr	r0, [pc, #368]	; (800a7e8 <tcp_slowtmr+0x274>)
 800a676:	f006 f9c1 	bl	80109fc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a680:	2b0b      	cmp	r3, #11
 800a682:	d905      	bls.n	800a690 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a688:	3301      	adds	r3, #1
 800a68a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a68e:	e0ed      	b.n	800a86c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a692:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a696:	3b01      	subs	r3, #1
 800a698:	4a58      	ldr	r2, [pc, #352]	; (800a7fc <tcp_slowtmr+0x288>)
 800a69a:	5cd3      	ldrb	r3, [r2, r3]
 800a69c:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 800a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a6a4:	7ffa      	ldrb	r2, [r7, #31]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d907      	bls.n	800a6ba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	b2da      	uxtb	r2, r3
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a6c0:	7ffa      	ldrb	r2, [r7, #31]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	f200 80d2 	bhi.w	800a86c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d108      	bne.n	800a6e8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a6d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6d8:	f005 f986 	bl	800f9e8 <tcp_zero_window_probe>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d014      	beq.n	800a70c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	623b      	str	r3, [r7, #32]
 800a6e6:	e011      	b.n	800a70c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6f2:	f004 f82d 	bl	800e750 <tcp_split_unsent_seg>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d107      	bne.n	800a70c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a6fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6fe:	f004 fab1 	bl	800ec64 <tcp_output>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a708:	2300      	movs	r3, #0
 800a70a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a70c:	6a3b      	ldr	r3, [r7, #32]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f000 80ac 	beq.w	800a86c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a716:	2200      	movs	r2, #0
 800a718:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a722:	2b06      	cmp	r3, #6
 800a724:	f200 80a2 	bhi.w	800a86c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a72e:	3301      	adds	r3, #1
 800a730:	b2da      	uxtb	r2, r3
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a738:	e098      	b.n	800a86c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a740:	2b00      	cmp	r3, #0
 800a742:	db0f      	blt.n	800a764 <tcp_slowtmr+0x1f0>
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a74a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a74e:	4293      	cmp	r3, r2
 800a750:	d008      	beq.n	800a764 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a754:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a758:	b29b      	uxth	r3, r3
 800a75a:	3301      	adds	r3, #1
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	b21a      	sxth	r2, r3
 800a760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a762:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a770:	429a      	cmp	r2, r3
 800a772:	db7b      	blt.n	800a86c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a776:	f004 fd6f 	bl	800f258 <tcp_rexmit_rto_prepare>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d007      	beq.n	800a790 <tcp_slowtmr+0x21c>
 800a780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a784:	2b00      	cmp	r3, #0
 800a786:	d171      	bne.n	800a86c <tcp_slowtmr+0x2f8>
 800a788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d06d      	beq.n	800a86c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a792:	7d1b      	ldrb	r3, [r3, #20]
 800a794:	2b02      	cmp	r3, #2
 800a796:	d03a      	beq.n	800a80e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a79e:	2b0c      	cmp	r3, #12
 800a7a0:	bf28      	it	cs
 800a7a2:	230c      	movcs	r3, #12
 800a7a4:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a7ac:	10db      	asrs	r3, r3, #3
 800a7ae:	b21b      	sxth	r3, r3
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a7b8:	4413      	add	r3, r2
 800a7ba:	7fba      	ldrb	r2, [r7, #30]
 800a7bc:	4910      	ldr	r1, [pc, #64]	; (800a800 <tcp_slowtmr+0x28c>)
 800a7be:	5c8a      	ldrb	r2, [r1, r2]
 800a7c0:	4093      	lsls	r3, r2
 800a7c2:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	dc1a      	bgt.n	800a804 <tcp_slowtmr+0x290>
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	b21a      	sxth	r2, r3
 800a7d2:	e019      	b.n	800a808 <tcp_slowtmr+0x294>
 800a7d4:	20006d24 	.word	0x20006d24
 800a7d8:	2000061a 	.word	0x2000061a
 800a7dc:	20006d20 	.word	0x20006d20
 800a7e0:	08012f84 	.word	0x08012f84
 800a7e4:	080132c8 	.word	0x080132c8
 800a7e8:	08012fc8 	.word	0x08012fc8
 800a7ec:	080132f4 	.word	0x080132f4
 800a7f0:	08013320 	.word	0x08013320
 800a7f4:	08013350 	.word	0x08013350
 800a7f8:	08013384 	.word	0x08013384
 800a7fc:	08014b54 	.word	0x08014b54
 800a800:	08014b44 	.word	0x08014b44
 800a804:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a810:	2200      	movs	r2, #0
 800a812:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a816:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a820:	4293      	cmp	r3, r2
 800a822:	bf28      	it	cs
 800a824:	4613      	movcs	r3, r2
 800a826:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 800a828:	8afb      	ldrh	r3, [r7, #22]
 800a82a:	085b      	lsrs	r3, r3, #1
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a830:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a83e:	005b      	lsls	r3, r3, #1
 800a840:	b29b      	uxth	r3, r3
 800a842:	429a      	cmp	r2, r3
 800a844:	d206      	bcs.n	800a854 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a850:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a856:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a860:	2200      	movs	r2, #0
 800a862:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a868:	f004 fd66 	bl	800f338 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86e:	7d1b      	ldrb	r3, [r3, #20]
 800a870:	2b06      	cmp	r3, #6
 800a872:	d111      	bne.n	800a898 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a876:	8b5b      	ldrh	r3, [r3, #26]
 800a878:	f003 0310 	and.w	r3, r3, #16
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00b      	beq.n	800a898 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a880:	4b9c      	ldr	r3, [pc, #624]	; (800aaf4 <tcp_slowtmr+0x580>)
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a886:	6a1b      	ldr	r3, [r3, #32]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	2b28      	cmp	r3, #40	; 0x28
 800a88c:	d904      	bls.n	800a898 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a88e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a892:	3301      	adds	r3, #1
 800a894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89a:	7a5b      	ldrb	r3, [r3, #9]
 800a89c:	f003 0308 	and.w	r3, r3, #8
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d04a      	beq.n	800a93a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a8a8:	2b04      	cmp	r3, #4
 800a8aa:	d003      	beq.n	800a8b4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a8b0:	2b07      	cmp	r3, #7
 800a8b2:	d142      	bne.n	800a93a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a8b4:	4b8f      	ldr	r3, [pc, #572]	; (800aaf4 <tcp_slowtmr+0x580>)
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ba:	6a1b      	ldr	r3, [r3, #32]
 800a8bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a8c4:	4b8c      	ldr	r3, [pc, #560]	; (800aaf8 <tcp_slowtmr+0x584>)
 800a8c6:	440b      	add	r3, r1
 800a8c8:	498c      	ldr	r1, [pc, #560]	; (800aafc <tcp_slowtmr+0x588>)
 800a8ca:	fba1 1303 	umull	r1, r3, r1, r3
 800a8ce:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d90a      	bls.n	800a8ea <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8d8:	3301      	adds	r3, #1
 800a8da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a8de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a8e8:	e027      	b.n	800a93a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a8ea:	4b82      	ldr	r3, [pc, #520]	; (800aaf4 <tcp_slowtmr+0x580>)
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a900:	4618      	mov	r0, r3
 800a902:	4b7f      	ldr	r3, [pc, #508]	; (800ab00 <tcp_slowtmr+0x58c>)
 800a904:	fb03 f300 	mul.w	r3, r3, r0
 800a908:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a90a:	497c      	ldr	r1, [pc, #496]	; (800aafc <tcp_slowtmr+0x588>)
 800a90c:	fba1 1303 	umull	r1, r3, r1, r3
 800a910:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a912:	429a      	cmp	r2, r3
 800a914:	d911      	bls.n	800a93a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800a916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a918:	f005 f826 	bl	800f968 <tcp_keepalive>
 800a91c:	4603      	mov	r3, r0
 800a91e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a922:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a926:	2b00      	cmp	r3, #0
 800a928:	d107      	bne.n	800a93a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800a92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a930:	3301      	adds	r3, #1
 800a932:	b2da      	uxtb	r2, r3
 800a934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a936:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d011      	beq.n	800a966 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a942:	4b6c      	ldr	r3, [pc, #432]	; (800aaf4 <tcp_slowtmr+0x580>)
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	1ad2      	subs	r2, r2, r3
 800a94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a952:	4619      	mov	r1, r3
 800a954:	460b      	mov	r3, r1
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	440b      	add	r3, r1
 800a95a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d302      	bcc.n	800a966 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a960:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a962:	f000 fec5 	bl	800b6f0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	7d1b      	ldrb	r3, [r3, #20]
 800a96a:	2b03      	cmp	r3, #3
 800a96c:	d10b      	bne.n	800a986 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a96e:	4b61      	ldr	r3, [pc, #388]	; (800aaf4 <tcp_slowtmr+0x580>)
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	1ad3      	subs	r3, r2, r3
 800a978:	2b28      	cmp	r3, #40	; 0x28
 800a97a:	d904      	bls.n	800a986 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a980:	3301      	adds	r3, #1
 800a982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a988:	7d1b      	ldrb	r3, [r3, #20]
 800a98a:	2b09      	cmp	r3, #9
 800a98c:	d10b      	bne.n	800a9a6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a98e:	4b59      	ldr	r3, [pc, #356]	; (800aaf4 <tcp_slowtmr+0x580>)
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	2bf0      	cmp	r3, #240	; 0xf0
 800a99a:	d904      	bls.n	800a9a6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800a99c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a9a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d060      	beq.n	800aa70 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a9b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9b8:	f000 fce6 	bl	800b388 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d010      	beq.n	800a9e4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a9c2:	4b50      	ldr	r3, [pc, #320]	; (800ab04 <tcp_slowtmr+0x590>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d106      	bne.n	800a9da <tcp_slowtmr+0x466>
 800a9cc:	4b4e      	ldr	r3, [pc, #312]	; (800ab08 <tcp_slowtmr+0x594>)
 800a9ce:	f240 526d 	movw	r2, #1389	; 0x56d
 800a9d2:	494e      	ldr	r1, [pc, #312]	; (800ab0c <tcp_slowtmr+0x598>)
 800a9d4:	484e      	ldr	r0, [pc, #312]	; (800ab10 <tcp_slowtmr+0x59c>)
 800a9d6:	f006 f811 	bl	80109fc <iprintf>
        prev->next = pcb->next;
 800a9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9dc:	68da      	ldr	r2, [r3, #12]
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	60da      	str	r2, [r3, #12]
 800a9e2:	e00f      	b.n	800aa04 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a9e4:	4b47      	ldr	r3, [pc, #284]	; (800ab04 <tcp_slowtmr+0x590>)
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d006      	beq.n	800a9fc <tcp_slowtmr+0x488>
 800a9ee:	4b46      	ldr	r3, [pc, #280]	; (800ab08 <tcp_slowtmr+0x594>)
 800a9f0:	f240 5271 	movw	r2, #1393	; 0x571
 800a9f4:	4947      	ldr	r1, [pc, #284]	; (800ab14 <tcp_slowtmr+0x5a0>)
 800a9f6:	4846      	ldr	r0, [pc, #280]	; (800ab10 <tcp_slowtmr+0x59c>)
 800a9f8:	f006 f800 	bl	80109fc <iprintf>
        tcp_active_pcbs = pcb->next;
 800a9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	4a40      	ldr	r2, [pc, #256]	; (800ab04 <tcp_slowtmr+0x590>)
 800aa02:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800aa04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d013      	beq.n	800aa34 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800aa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa12:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800aa14:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800aa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa18:	3304      	adds	r3, #4
 800aa1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa1c:	8ad2      	ldrh	r2, [r2, #22]
 800aa1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa20:	8b09      	ldrh	r1, [r1, #24]
 800aa22:	9102      	str	r1, [sp, #8]
 800aa24:	9201      	str	r2, [sp, #4]
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	462b      	mov	r3, r5
 800aa2a:	4622      	mov	r2, r4
 800aa2c:	4601      	mov	r1, r0
 800aa2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa30:	f004 fee4 	bl	800f7fc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800aa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 800aa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3c:	7d1b      	ldrb	r3, [r3, #20]
 800aa3e:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 800aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa42:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800aa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7ff f840 	bl	8009ad0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800aa50:	4b31      	ldr	r3, [pc, #196]	; (800ab18 <tcp_slowtmr+0x5a4>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d004      	beq.n	800aa66 <tcp_slowtmr+0x4f2>
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	f06f 010c 	mvn.w	r1, #12
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800aa66:	4b2c      	ldr	r3, [pc, #176]	; (800ab18 <tcp_slowtmr+0x5a4>)
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d037      	beq.n	800aade <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800aa6e:	e592      	b.n	800a596 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800aa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa72:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	7f1b      	ldrb	r3, [r3, #28]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa84:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800aa86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa88:	7f1a      	ldrb	r2, [r3, #28]
 800aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8c:	7f5b      	ldrb	r3, [r3, #29]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d325      	bcc.n	800aade <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800aa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa94:	2200      	movs	r2, #0
 800aa96:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800aa98:	4b1f      	ldr	r3, [pc, #124]	; (800ab18 <tcp_slowtmr+0x5a4>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800aa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00b      	beq.n	800aac0 <tcp_slowtmr+0x54c>
 800aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aab0:	6912      	ldr	r2, [r2, #16]
 800aab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aab4:	4610      	mov	r0, r2
 800aab6:	4798      	blx	r3
 800aab8:	4603      	mov	r3, r0
 800aaba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800aabe:	e002      	b.n	800aac6 <tcp_slowtmr+0x552>
 800aac0:	2300      	movs	r3, #0
 800aac2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800aac6:	4b14      	ldr	r3, [pc, #80]	; (800ab18 <tcp_slowtmr+0x5a4>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d000      	beq.n	800aad0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800aace:	e562      	b.n	800a596 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800aad0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d102      	bne.n	800aade <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800aad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aada:	f004 f8c3 	bl	800ec64 <tcp_output>
  while (pcb != NULL) {
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f47f ad5e 	bne.w	800a5a2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800aae6:	2300      	movs	r3, #0
 800aae8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800aaea:	4b0c      	ldr	r3, [pc, #48]	; (800ab1c <tcp_slowtmr+0x5a8>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800aaf0:	e069      	b.n	800abc6 <tcp_slowtmr+0x652>
 800aaf2:	bf00      	nop
 800aaf4:	20006d24 	.word	0x20006d24
 800aaf8:	000a4cb8 	.word	0x000a4cb8
 800aafc:	10624dd3 	.word	0x10624dd3
 800ab00:	000124f8 	.word	0x000124f8
 800ab04:	20006d20 	.word	0x20006d20
 800ab08:	08012f84 	.word	0x08012f84
 800ab0c:	080133bc 	.word	0x080133bc
 800ab10:	08012fc8 	.word	0x08012fc8
 800ab14:	080133e8 	.word	0x080133e8
 800ab18:	20006d1c 	.word	0x20006d1c
 800ab1c:	20006d30 	.word	0x20006d30
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	7d1b      	ldrb	r3, [r3, #20]
 800ab24:	2b0a      	cmp	r3, #10
 800ab26:	d006      	beq.n	800ab36 <tcp_slowtmr+0x5c2>
 800ab28:	4b2a      	ldr	r3, [pc, #168]	; (800abd4 <tcp_slowtmr+0x660>)
 800ab2a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ab2e:	492a      	ldr	r1, [pc, #168]	; (800abd8 <tcp_slowtmr+0x664>)
 800ab30:	482a      	ldr	r0, [pc, #168]	; (800abdc <tcp_slowtmr+0x668>)
 800ab32:	f005 ff63 	bl	80109fc <iprintf>
    pcb_remove = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ab3c:	4b28      	ldr	r3, [pc, #160]	; (800abe0 <tcp_slowtmr+0x66c>)
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	2bf0      	cmp	r3, #240	; 0xf0
 800ab48:	d904      	bls.n	800ab54 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ab4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab4e:	3301      	adds	r3, #1
 800ab50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ab54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d02f      	beq.n	800abbc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ab5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab5e:	f000 fc13 	bl	800b388 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d010      	beq.n	800ab8a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ab68:	4b1e      	ldr	r3, [pc, #120]	; (800abe4 <tcp_slowtmr+0x670>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d106      	bne.n	800ab80 <tcp_slowtmr+0x60c>
 800ab72:	4b18      	ldr	r3, [pc, #96]	; (800abd4 <tcp_slowtmr+0x660>)
 800ab74:	f240 52af 	movw	r2, #1455	; 0x5af
 800ab78:	491b      	ldr	r1, [pc, #108]	; (800abe8 <tcp_slowtmr+0x674>)
 800ab7a:	4818      	ldr	r0, [pc, #96]	; (800abdc <tcp_slowtmr+0x668>)
 800ab7c:	f005 ff3e 	bl	80109fc <iprintf>
        prev->next = pcb->next;
 800ab80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab82:	68da      	ldr	r2, [r3, #12]
 800ab84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab86:	60da      	str	r2, [r3, #12]
 800ab88:	e00f      	b.n	800abaa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ab8a:	4b16      	ldr	r3, [pc, #88]	; (800abe4 <tcp_slowtmr+0x670>)
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d006      	beq.n	800aba2 <tcp_slowtmr+0x62e>
 800ab94:	4b0f      	ldr	r3, [pc, #60]	; (800abd4 <tcp_slowtmr+0x660>)
 800ab96:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ab9a:	4914      	ldr	r1, [pc, #80]	; (800abec <tcp_slowtmr+0x678>)
 800ab9c:	480f      	ldr	r0, [pc, #60]	; (800abdc <tcp_slowtmr+0x668>)
 800ab9e:	f005 ff2d 	bl	80109fc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800aba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	4a0f      	ldr	r2, [pc, #60]	; (800abe4 <tcp_slowtmr+0x670>)
 800aba8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800abb4:	6838      	ldr	r0, [r7, #0]
 800abb6:	f7fe ff8b 	bl	8009ad0 <tcp_free>
 800abba:	e004      	b.n	800abc6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800abc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800abc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1a9      	bne.n	800ab20 <tcp_slowtmr+0x5ac>
    }
  }
}
 800abcc:	bf00      	nop
 800abce:	3730      	adds	r7, #48	; 0x30
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bdb0      	pop	{r4, r5, r7, pc}
 800abd4:	08012f84 	.word	0x08012f84
 800abd8:	08013414 	.word	0x08013414
 800abdc:	08012fc8 	.word	0x08012fc8
 800abe0:	20006d24 	.word	0x20006d24
 800abe4:	20006d30 	.word	0x20006d30
 800abe8:	08013444 	.word	0x08013444
 800abec:	0801346c 	.word	0x0801346c

0800abf0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800abf6:	4b2d      	ldr	r3, [pc, #180]	; (800acac <tcp_fasttmr+0xbc>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	3301      	adds	r3, #1
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	4b2b      	ldr	r3, [pc, #172]	; (800acac <tcp_fasttmr+0xbc>)
 800ac00:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ac02:	4b2b      	ldr	r3, [pc, #172]	; (800acb0 <tcp_fasttmr+0xc0>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ac08:	e048      	b.n	800ac9c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	7f9a      	ldrb	r2, [r3, #30]
 800ac0e:	4b27      	ldr	r3, [pc, #156]	; (800acac <tcp_fasttmr+0xbc>)
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d03f      	beq.n	800ac96 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ac16:	4b25      	ldr	r3, [pc, #148]	; (800acac <tcp_fasttmr+0xbc>)
 800ac18:	781a      	ldrb	r2, [r3, #0]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	8b5b      	ldrh	r3, [r3, #26]
 800ac22:	f003 0301 	and.w	r3, r3, #1
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d010      	beq.n	800ac4c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	8b5b      	ldrh	r3, [r3, #26]
 800ac2e:	f043 0302 	orr.w	r3, r3, #2
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f004 f813 	bl	800ec64 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	8b5b      	ldrh	r3, [r3, #26]
 800ac42:	f023 0303 	bic.w	r3, r3, #3
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	8b5b      	ldrh	r3, [r3, #26]
 800ac50:	f003 0308 	and.w	r3, r3, #8
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d009      	beq.n	800ac6c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	8b5b      	ldrh	r3, [r3, #26]
 800ac5c:	f023 0308 	bic.w	r3, r3, #8
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7ff f8c2 	bl	8009df0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00a      	beq.n	800ac90 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ac7a:	4b0e      	ldr	r3, [pc, #56]	; (800acb4 <tcp_fasttmr+0xc4>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f819 	bl	800acb8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ac86:	4b0b      	ldr	r3, [pc, #44]	; (800acb4 <tcp_fasttmr+0xc4>)
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d000      	beq.n	800ac90 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ac8e:	e7b8      	b.n	800ac02 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	607b      	str	r3, [r7, #4]
 800ac94:	e002      	b.n	800ac9c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1b3      	bne.n	800ac0a <tcp_fasttmr+0x1a>
    }
  }
}
 800aca2:	bf00      	nop
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	2000061a 	.word	0x2000061a
 800acb0:	20006d20 	.word	0x20006d20
 800acb4:	20006d1c 	.word	0x20006d1c

0800acb8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800acb8:	b590      	push	{r4, r7, lr}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d109      	bne.n	800acda <tcp_process_refused_data+0x22>
 800acc6:	4b37      	ldr	r3, [pc, #220]	; (800ada4 <tcp_process_refused_data+0xec>)
 800acc8:	f240 6209 	movw	r2, #1545	; 0x609
 800accc:	4936      	ldr	r1, [pc, #216]	; (800ada8 <tcp_process_refused_data+0xf0>)
 800acce:	4837      	ldr	r0, [pc, #220]	; (800adac <tcp_process_refused_data+0xf4>)
 800acd0:	f005 fe94 	bl	80109fc <iprintf>
 800acd4:	f06f 030f 	mvn.w	r3, #15
 800acd8:	e060      	b.n	800ad9c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acde:	7b5b      	ldrb	r3, [r3, #13]
 800ace0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ace6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00b      	beq.n	800ad10 <tcp_process_refused_data+0x58>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6918      	ldr	r0, [r3, #16]
 800ad02:	2300      	movs	r3, #0
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	47a0      	blx	r4
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	73fb      	strb	r3, [r7, #15]
 800ad0e:	e007      	b.n	800ad20 <tcp_process_refused_data+0x68>
 800ad10:	2300      	movs	r3, #0
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	2000      	movs	r0, #0
 800ad18:	f000 f8c0 	bl	800ae9c <tcp_recv_null>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ad20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d12a      	bne.n	800ad7e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
 800ad2a:	f003 0320 	and.w	r3, r3, #32
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d033      	beq.n	800ad9a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad36:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ad3a:	d005      	beq.n	800ad48 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad40:	3301      	adds	r3, #1
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00b      	beq.n	800ad6a <tcp_process_refused_data+0xb2>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6918      	ldr	r0, [r3, #16]
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	2200      	movs	r2, #0
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	47a0      	blx	r4
 800ad64:	4603      	mov	r3, r0
 800ad66:	73fb      	strb	r3, [r7, #15]
 800ad68:	e001      	b.n	800ad6e <tcp_process_refused_data+0xb6>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ad6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad72:	f113 0f0d 	cmn.w	r3, #13
 800ad76:	d110      	bne.n	800ad9a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ad78:	f06f 030c 	mvn.w	r3, #12
 800ad7c:	e00e      	b.n	800ad9c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ad7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad82:	f113 0f0d 	cmn.w	r3, #13
 800ad86:	d102      	bne.n	800ad8e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ad88:	f06f 030c 	mvn.w	r3, #12
 800ad8c:	e006      	b.n	800ad9c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ad94:	f06f 0304 	mvn.w	r3, #4
 800ad98:	e000      	b.n	800ad9c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd90      	pop	{r4, r7, pc}
 800ada4:	08012f84 	.word	0x08012f84
 800ada8:	08013494 	.word	0x08013494
 800adac:	08012fc8 	.word	0x08012fc8

0800adb0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800adb8:	e007      	b.n	800adca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 f809 	bl	800add8 <tcp_seg_free>
    seg = next;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1f4      	bne.n	800adba <tcp_segs_free+0xa>
  }
}
 800add0:	bf00      	nop
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00c      	beq.n	800ae00 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d004      	beq.n	800adf8 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe fbbc 	bl	8009570 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	2003      	movs	r0, #3
 800adfc:	f7fd fda0 	bl	8008940 <memp_free>
  }
}
 800ae00:	bf00      	nop
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d107      	bne.n	800ae2a <tcp_setprio+0x22>
 800ae1a:	4b07      	ldr	r3, [pc, #28]	; (800ae38 <tcp_setprio+0x30>)
 800ae1c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800ae20:	4906      	ldr	r1, [pc, #24]	; (800ae3c <tcp_setprio+0x34>)
 800ae22:	4807      	ldr	r0, [pc, #28]	; (800ae40 <tcp_setprio+0x38>)
 800ae24:	f005 fdea 	bl	80109fc <iprintf>
 800ae28:	e002      	b.n	800ae30 <tcp_setprio+0x28>

  pcb->prio = prio;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	78fa      	ldrb	r2, [r7, #3]
 800ae2e:	755a      	strb	r2, [r3, #21]
}
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	08012f84 	.word	0x08012f84
 800ae3c:	080134bc 	.word	0x080134bc
 800ae40:	08012fc8 	.word	0x08012fc8

0800ae44 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d106      	bne.n	800ae60 <tcp_seg_copy+0x1c>
 800ae52:	4b0f      	ldr	r3, [pc, #60]	; (800ae90 <tcp_seg_copy+0x4c>)
 800ae54:	f240 6282 	movw	r2, #1666	; 0x682
 800ae58:	490e      	ldr	r1, [pc, #56]	; (800ae94 <tcp_seg_copy+0x50>)
 800ae5a:	480f      	ldr	r0, [pc, #60]	; (800ae98 <tcp_seg_copy+0x54>)
 800ae5c:	f005 fdce 	bl	80109fc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ae60:	2003      	movs	r0, #3
 800ae62:	f7fd fd21 	bl	80088a8 <memp_malloc>
 800ae66:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d101      	bne.n	800ae72 <tcp_seg_copy+0x2e>
    return NULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e00a      	b.n	800ae88 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ae72:	2210      	movs	r2, #16
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f005 fdad 	bl	80109d6 <memcpy>
  pbuf_ref(cseg->p);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fe fc15 	bl	80096b0 <pbuf_ref>
  return cseg;
 800ae86:	68fb      	ldr	r3, [r7, #12]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	08012f84 	.word	0x08012f84
 800ae94:	080134d8 	.word	0x080134d8
 800ae98:	08012fc8 	.word	0x08012fc8

0800ae9c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d109      	bne.n	800aec4 <tcp_recv_null+0x28>
 800aeb0:	4b12      	ldr	r3, [pc, #72]	; (800aefc <tcp_recv_null+0x60>)
 800aeb2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800aeb6:	4912      	ldr	r1, [pc, #72]	; (800af00 <tcp_recv_null+0x64>)
 800aeb8:	4812      	ldr	r0, [pc, #72]	; (800af04 <tcp_recv_null+0x68>)
 800aeba:	f005 fd9f 	bl	80109fc <iprintf>
 800aebe:	f06f 030f 	mvn.w	r3, #15
 800aec2:	e016      	b.n	800aef2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d009      	beq.n	800aede <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	891b      	ldrh	r3, [r3, #8]
 800aece:	4619      	mov	r1, r3
 800aed0:	68b8      	ldr	r0, [r7, #8]
 800aed2:	f7ff fab9 	bl	800a448 <tcp_recved>
    pbuf_free(p);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7fe fb4a 	bl	8009570 <pbuf_free>
 800aedc:	e008      	b.n	800aef0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800aede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d104      	bne.n	800aef0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800aee6:	68b8      	ldr	r0, [r7, #8]
 800aee8:	f7fe ffe8 	bl	8009ebc <tcp_close>
 800aeec:	4603      	mov	r3, r0
 800aeee:	e000      	b.n	800aef2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	08012f84 	.word	0x08012f84
 800af00:	080134f4 	.word	0x080134f4
 800af04:	08012fc8 	.word	0x08012fc8

0800af08 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	4603      	mov	r3, r0
 800af10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800af12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af16:	2b00      	cmp	r3, #0
 800af18:	db01      	blt.n	800af1e <tcp_kill_prio+0x16>
 800af1a:	79fb      	ldrb	r3, [r7, #7]
 800af1c:	e000      	b.n	800af20 <tcp_kill_prio+0x18>
 800af1e:	237f      	movs	r3, #127	; 0x7f
 800af20:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800af22:	7afb      	ldrb	r3, [r7, #11]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d034      	beq.n	800af92 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800af28:	7afb      	ldrb	r3, [r7, #11]
 800af2a:	3b01      	subs	r3, #1
 800af2c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800af32:	2300      	movs	r3, #0
 800af34:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800af36:	4b19      	ldr	r3, [pc, #100]	; (800af9c <tcp_kill_prio+0x94>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	617b      	str	r3, [r7, #20]
 800af3c:	e01f      	b.n	800af7e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	7d5b      	ldrb	r3, [r3, #21]
 800af42:	7afa      	ldrb	r2, [r7, #11]
 800af44:	429a      	cmp	r2, r3
 800af46:	d80c      	bhi.n	800af62 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800af4c:	7afa      	ldrb	r2, [r7, #11]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d112      	bne.n	800af78 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800af52:	4b13      	ldr	r3, [pc, #76]	; (800afa0 <tcp_kill_prio+0x98>)
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	1ad2      	subs	r2, r2, r3
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d30a      	bcc.n	800af78 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800af62:	4b0f      	ldr	r3, [pc, #60]	; (800afa0 <tcp_kill_prio+0x98>)
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	7d5b      	ldrb	r3, [r3, #21]
 800af76:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	617b      	str	r3, [r7, #20]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1dc      	bne.n	800af3e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d004      	beq.n	800af94 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800af8a:	6938      	ldr	r0, [r7, #16]
 800af8c:	f7ff f880 	bl	800a090 <tcp_abort>
 800af90:	e000      	b.n	800af94 <tcp_kill_prio+0x8c>
    return;
 800af92:	bf00      	nop
  }
}
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20006d20 	.word	0x20006d20
 800afa0:	20006d24 	.word	0x20006d24

0800afa4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	4603      	mov	r3, r0
 800afac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800afae:	79fb      	ldrb	r3, [r7, #7]
 800afb0:	2b08      	cmp	r3, #8
 800afb2:	d009      	beq.n	800afc8 <tcp_kill_state+0x24>
 800afb4:	79fb      	ldrb	r3, [r7, #7]
 800afb6:	2b09      	cmp	r3, #9
 800afb8:	d006      	beq.n	800afc8 <tcp_kill_state+0x24>
 800afba:	4b1a      	ldr	r3, [pc, #104]	; (800b024 <tcp_kill_state+0x80>)
 800afbc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800afc0:	4919      	ldr	r1, [pc, #100]	; (800b028 <tcp_kill_state+0x84>)
 800afc2:	481a      	ldr	r0, [pc, #104]	; (800b02c <tcp_kill_state+0x88>)
 800afc4:	f005 fd1a 	bl	80109fc <iprintf>

  inactivity = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800afcc:	2300      	movs	r3, #0
 800afce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800afd0:	4b17      	ldr	r3, [pc, #92]	; (800b030 <tcp_kill_state+0x8c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	617b      	str	r3, [r7, #20]
 800afd6:	e017      	b.n	800b008 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	7d1b      	ldrb	r3, [r3, #20]
 800afdc:	79fa      	ldrb	r2, [r7, #7]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d10f      	bne.n	800b002 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800afe2:	4b14      	ldr	r3, [pc, #80]	; (800b034 <tcp_kill_state+0x90>)
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	1ad2      	subs	r2, r2, r3
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d307      	bcc.n	800b002 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800aff2:	4b10      	ldr	r3, [pc, #64]	; (800b034 <tcp_kill_state+0x90>)
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	6a1b      	ldr	r3, [r3, #32]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	617b      	str	r3, [r7, #20]
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1e4      	bne.n	800afd8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d003      	beq.n	800b01c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b014:	2100      	movs	r1, #0
 800b016:	6938      	ldr	r0, [r7, #16]
 800b018:	f7fe ff7c 	bl	8009f14 <tcp_abandon>
  }
}
 800b01c:	bf00      	nop
 800b01e:	3718      	adds	r7, #24
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	08012f84 	.word	0x08012f84
 800b028:	08013510 	.word	0x08013510
 800b02c:	08012fc8 	.word	0x08012fc8
 800b030:	20006d20 	.word	0x20006d20
 800b034:	20006d24 	.word	0x20006d24

0800b038 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b03e:	2300      	movs	r3, #0
 800b040:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b042:	2300      	movs	r3, #0
 800b044:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b046:	4b12      	ldr	r3, [pc, #72]	; (800b090 <tcp_kill_timewait+0x58>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	60fb      	str	r3, [r7, #12]
 800b04c:	e012      	b.n	800b074 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b04e:	4b11      	ldr	r3, [pc, #68]	; (800b094 <tcp_kill_timewait+0x5c>)
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6a1b      	ldr	r3, [r3, #32]
 800b056:	1ad2      	subs	r2, r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d307      	bcc.n	800b06e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b05e:	4b0d      	ldr	r3, [pc, #52]	; (800b094 <tcp_kill_timewait+0x5c>)
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e9      	bne.n	800b04e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b080:	68b8      	ldr	r0, [r7, #8]
 800b082:	f7ff f805 	bl	800a090 <tcp_abort>
  }
}
 800b086:	bf00      	nop
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20006d30 	.word	0x20006d30
 800b094:	20006d24 	.word	0x20006d24

0800b098 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b09e:	4b10      	ldr	r3, [pc, #64]	; (800b0e0 <tcp_handle_closepend+0x48>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b0a4:	e014      	b.n	800b0d0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	8b5b      	ldrh	r3, [r3, #26]
 800b0b0:	f003 0308 	and.w	r3, r3, #8
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d009      	beq.n	800b0cc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	8b5b      	ldrh	r3, [r3, #26]
 800b0bc:	f023 0308 	bic.w	r3, r3, #8
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7fe fe92 	bl	8009df0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1e7      	bne.n	800b0a6 <tcp_handle_closepend+0xe>
  }
}
 800b0d6:	bf00      	nop
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	20006d20 	.word	0x20006d20

0800b0e4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b0ee:	2001      	movs	r0, #1
 800b0f0:	f7fd fbda 	bl	80088a8 <memp_malloc>
 800b0f4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d126      	bne.n	800b14a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b0fc:	f7ff ffcc 	bl	800b098 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b100:	f7ff ff9a 	bl	800b038 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b104:	2001      	movs	r0, #1
 800b106:	f7fd fbcf 	bl	80088a8 <memp_malloc>
 800b10a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d11b      	bne.n	800b14a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b112:	2009      	movs	r0, #9
 800b114:	f7ff ff46 	bl	800afa4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b118:	2001      	movs	r0, #1
 800b11a:	f7fd fbc5 	bl	80088a8 <memp_malloc>
 800b11e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d111      	bne.n	800b14a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b126:	2008      	movs	r0, #8
 800b128:	f7ff ff3c 	bl	800afa4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b12c:	2001      	movs	r0, #1
 800b12e:	f7fd fbbb 	bl	80088a8 <memp_malloc>
 800b132:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d107      	bne.n	800b14a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b13a:	79fb      	ldrb	r3, [r7, #7]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7ff fee3 	bl	800af08 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b142:	2001      	movs	r0, #1
 800b144:	f7fd fbb0 	bl	80088a8 <memp_malloc>
 800b148:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d03f      	beq.n	800b1d0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b150:	229c      	movs	r2, #156	; 0x9c
 800b152:	2100      	movs	r1, #0
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f005 fc49 	bl	80109ec <memset>
    pcb->prio = prio;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	79fa      	ldrb	r2, [r7, #7]
 800b15e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b166:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b170:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	22ff      	movs	r2, #255	; 0xff
 800b17e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b186:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2206      	movs	r2, #6
 800b18c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2206      	movs	r2, #6
 800b194:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b19c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b1a6:	4b0d      	ldr	r3, [pc, #52]	; (800b1dc <tcp_alloc+0xf8>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b1ae:	4b0c      	ldr	r3, [pc, #48]	; (800b1e0 <tcp_alloc+0xfc>)
 800b1b0:	781a      	ldrb	r2, [r3, #0]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b1bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	4a08      	ldr	r2, [pc, #32]	; (800b1e4 <tcp_alloc+0x100>)
 800b1c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4a07      	ldr	r2, [pc, #28]	; (800b1e8 <tcp_alloc+0x104>)
 800b1cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	20006d24 	.word	0x20006d24
 800b1e0:	2000061a 	.word	0x2000061a
 800b1e4:	0800ae9d 	.word	0x0800ae9d
 800b1e8:	006ddd00 	.word	0x006ddd00

0800b1ec <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800b1f6:	2040      	movs	r0, #64	; 0x40
 800b1f8:	f7ff ff74 	bl	800b0e4 <tcp_alloc>
 800b1fc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d002      	beq.n	800b21e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	683a      	ldr	r2, [r7, #0]
 800b21c:	611a      	str	r2, [r3, #16]
  }
}
 800b21e:	bf00      	nop
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
	...

0800b22c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00e      	beq.n	800b25a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	7d1b      	ldrb	r3, [r3, #20]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d106      	bne.n	800b252 <tcp_recv+0x26>
 800b244:	4b07      	ldr	r3, [pc, #28]	; (800b264 <tcp_recv+0x38>)
 800b246:	f240 72df 	movw	r2, #2015	; 0x7df
 800b24a:	4907      	ldr	r1, [pc, #28]	; (800b268 <tcp_recv+0x3c>)
 800b24c:	4807      	ldr	r0, [pc, #28]	; (800b26c <tcp_recv+0x40>)
 800b24e:	f005 fbd5 	bl	80109fc <iprintf>
    pcb->recv = recv;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800b25a:	bf00      	nop
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	08012f84 	.word	0x08012f84
 800b268:	08013520 	.word	0x08013520
 800b26c:	08012fc8 	.word	0x08012fc8

0800b270 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00e      	beq.n	800b29e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	7d1b      	ldrb	r3, [r3, #20]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d106      	bne.n	800b296 <tcp_sent+0x26>
 800b288:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <tcp_sent+0x38>)
 800b28a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800b28e:	4907      	ldr	r1, [pc, #28]	; (800b2ac <tcp_sent+0x3c>)
 800b290:	4807      	ldr	r0, [pc, #28]	; (800b2b0 <tcp_sent+0x40>)
 800b292:	f005 fbb3 	bl	80109fc <iprintf>
    pcb->sent = sent;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800b29e:	bf00      	nop
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	08012f84 	.word	0x08012f84
 800b2ac:	08013548 	.word	0x08013548
 800b2b0:	08012fc8 	.word	0x08012fc8

0800b2b4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00e      	beq.n	800b2e2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	7d1b      	ldrb	r3, [r3, #20]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d106      	bne.n	800b2da <tcp_err+0x26>
 800b2cc:	4b07      	ldr	r3, [pc, #28]	; (800b2ec <tcp_err+0x38>)
 800b2ce:	f640 020d 	movw	r2, #2061	; 0x80d
 800b2d2:	4907      	ldr	r1, [pc, #28]	; (800b2f0 <tcp_err+0x3c>)
 800b2d4:	4807      	ldr	r0, [pc, #28]	; (800b2f4 <tcp_err+0x40>)
 800b2d6:	f005 fb91 	bl	80109fc <iprintf>
    pcb->errf = err;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800b2e2:	bf00      	nop
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	08012f84 	.word	0x08012f84
 800b2f0:	08013570 	.word	0x08013570
 800b2f4:	08012fc8 	.word	0x08012fc8

0800b2f8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d008      	beq.n	800b31a <tcp_accept+0x22>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	7d1b      	ldrb	r3, [r3, #20]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d104      	bne.n	800b31a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	619a      	str	r2, [r3, #24]
  }
}
 800b31a:	bf00      	nop
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
	...

0800b328 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	4613      	mov	r3, r2
 800b334:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d107      	bne.n	800b34c <tcp_poll+0x24>
 800b33c:	4b0e      	ldr	r3, [pc, #56]	; (800b378 <tcp_poll+0x50>)
 800b33e:	f640 023d 	movw	r2, #2109	; 0x83d
 800b342:	490e      	ldr	r1, [pc, #56]	; (800b37c <tcp_poll+0x54>)
 800b344:	480e      	ldr	r0, [pc, #56]	; (800b380 <tcp_poll+0x58>)
 800b346:	f005 fb59 	bl	80109fc <iprintf>
 800b34a:	e011      	b.n	800b370 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	7d1b      	ldrb	r3, [r3, #20]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d106      	bne.n	800b362 <tcp_poll+0x3a>
 800b354:	4b08      	ldr	r3, [pc, #32]	; (800b378 <tcp_poll+0x50>)
 800b356:	f640 023e 	movw	r2, #2110	; 0x83e
 800b35a:	490a      	ldr	r1, [pc, #40]	; (800b384 <tcp_poll+0x5c>)
 800b35c:	4808      	ldr	r0, [pc, #32]	; (800b380 <tcp_poll+0x58>)
 800b35e:	f005 fb4d 	bl	80109fc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	79fa      	ldrb	r2, [r7, #7]
 800b36e:	775a      	strb	r2, [r3, #29]
}
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	08012f84 	.word	0x08012f84
 800b37c:	08013598 	.word	0x08013598
 800b380:	08012fc8 	.word	0x08012fc8
 800b384:	080135b0 	.word	0x080135b0

0800b388 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d107      	bne.n	800b3a6 <tcp_pcb_purge+0x1e>
 800b396:	4b21      	ldr	r3, [pc, #132]	; (800b41c <tcp_pcb_purge+0x94>)
 800b398:	f640 0251 	movw	r2, #2129	; 0x851
 800b39c:	4920      	ldr	r1, [pc, #128]	; (800b420 <tcp_pcb_purge+0x98>)
 800b39e:	4821      	ldr	r0, [pc, #132]	; (800b424 <tcp_pcb_purge+0x9c>)
 800b3a0:	f005 fb2c 	bl	80109fc <iprintf>
 800b3a4:	e037      	b.n	800b416 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	7d1b      	ldrb	r3, [r3, #20]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d033      	beq.n	800b416 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b3b2:	2b0a      	cmp	r3, #10
 800b3b4:	d02f      	beq.n	800b416 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d02b      	beq.n	800b416 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d007      	beq.n	800b3d6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fe f8d0 	bl	8009570 <pbuf_free>
      pcb->refused_data = NULL;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d002      	beq.n	800b3e4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f986 	bl	800b6f0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3ea:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7ff fcdd 	bl	800adb0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7ff fcd8 	bl	800adb0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	66da      	str	r2, [r3, #108]	; 0x6c
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	08012f84 	.word	0x08012f84
 800b420:	080135d0 	.word	0x080135d0
 800b424:	08012fc8 	.word	0x08012fc8

0800b428 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d106      	bne.n	800b446 <tcp_pcb_remove+0x1e>
 800b438:	4b3e      	ldr	r3, [pc, #248]	; (800b534 <tcp_pcb_remove+0x10c>)
 800b43a:	f640 0283 	movw	r2, #2179	; 0x883
 800b43e:	493e      	ldr	r1, [pc, #248]	; (800b538 <tcp_pcb_remove+0x110>)
 800b440:	483e      	ldr	r0, [pc, #248]	; (800b53c <tcp_pcb_remove+0x114>)
 800b442:	f005 fadb 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d106      	bne.n	800b45a <tcp_pcb_remove+0x32>
 800b44c:	4b39      	ldr	r3, [pc, #228]	; (800b534 <tcp_pcb_remove+0x10c>)
 800b44e:	f640 0284 	movw	r2, #2180	; 0x884
 800b452:	493b      	ldr	r1, [pc, #236]	; (800b540 <tcp_pcb_remove+0x118>)
 800b454:	4839      	ldr	r0, [pc, #228]	; (800b53c <tcp_pcb_remove+0x114>)
 800b456:	f005 fad1 	bl	80109fc <iprintf>

  TCP_RMV(pcblist, pcb);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	429a      	cmp	r2, r3
 800b462:	d105      	bne.n	800b470 <tcp_pcb_remove+0x48>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68da      	ldr	r2, [r3, #12]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	601a      	str	r2, [r3, #0]
 800b46e:	e013      	b.n	800b498 <tcp_pcb_remove+0x70>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	60fb      	str	r3, [r7, #12]
 800b476:	e00c      	b.n	800b492 <tcp_pcb_remove+0x6a>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	68da      	ldr	r2, [r3, #12]
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d104      	bne.n	800b48c <tcp_pcb_remove+0x64>
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	68da      	ldr	r2, [r3, #12]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	60da      	str	r2, [r3, #12]
 800b48a:	e005      	b.n	800b498 <tcp_pcb_remove+0x70>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	60fb      	str	r3, [r7, #12]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1ef      	bne.n	800b478 <tcp_pcb_remove+0x50>
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	2200      	movs	r2, #0
 800b49c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b49e:	6838      	ldr	r0, [r7, #0]
 800b4a0:	f7ff ff72 	bl	800b388 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	7d1b      	ldrb	r3, [r3, #20]
 800b4a8:	2b0a      	cmp	r3, #10
 800b4aa:	d013      	beq.n	800b4d4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d00f      	beq.n	800b4d4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	8b5b      	ldrh	r3, [r3, #26]
 800b4b8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d009      	beq.n	800b4d4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	8b5b      	ldrh	r3, [r3, #26]
 800b4c4:	f043 0302 	orr.w	r3, r3, #2
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b4ce:	6838      	ldr	r0, [r7, #0]
 800b4d0:	f003 fbc8 	bl	800ec64 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	7d1b      	ldrb	r3, [r3, #20]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d020      	beq.n	800b51e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d006      	beq.n	800b4f2 <tcp_pcb_remove+0xca>
 800b4e4:	4b13      	ldr	r3, [pc, #76]	; (800b534 <tcp_pcb_remove+0x10c>)
 800b4e6:	f640 0293 	movw	r2, #2195	; 0x893
 800b4ea:	4916      	ldr	r1, [pc, #88]	; (800b544 <tcp_pcb_remove+0x11c>)
 800b4ec:	4813      	ldr	r0, [pc, #76]	; (800b53c <tcp_pcb_remove+0x114>)
 800b4ee:	f005 fa85 	bl	80109fc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d006      	beq.n	800b508 <tcp_pcb_remove+0xe0>
 800b4fa:	4b0e      	ldr	r3, [pc, #56]	; (800b534 <tcp_pcb_remove+0x10c>)
 800b4fc:	f640 0294 	movw	r2, #2196	; 0x894
 800b500:	4911      	ldr	r1, [pc, #68]	; (800b548 <tcp_pcb_remove+0x120>)
 800b502:	480e      	ldr	r0, [pc, #56]	; (800b53c <tcp_pcb_remove+0x114>)
 800b504:	f005 fa7a 	bl	80109fc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d006      	beq.n	800b51e <tcp_pcb_remove+0xf6>
 800b510:	4b08      	ldr	r3, [pc, #32]	; (800b534 <tcp_pcb_remove+0x10c>)
 800b512:	f640 0296 	movw	r2, #2198	; 0x896
 800b516:	490d      	ldr	r1, [pc, #52]	; (800b54c <tcp_pcb_remove+0x124>)
 800b518:	4808      	ldr	r0, [pc, #32]	; (800b53c <tcp_pcb_remove+0x114>)
 800b51a:	f005 fa6f 	bl	80109fc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2200      	movs	r2, #0
 800b522:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	2200      	movs	r2, #0
 800b528:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b52a:	bf00      	nop
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	08012f84 	.word	0x08012f84
 800b538:	080135ec 	.word	0x080135ec
 800b53c:	08012fc8 	.word	0x08012fc8
 800b540:	08013608 	.word	0x08013608
 800b544:	08013628 	.word	0x08013628
 800b548:	08013640 	.word	0x08013640
 800b54c:	0801365c 	.word	0x0801365c

0800b550 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <tcp_next_iss+0x1c>
 800b55e:	4b0a      	ldr	r3, [pc, #40]	; (800b588 <tcp_next_iss+0x38>)
 800b560:	f640 02af 	movw	r2, #2223	; 0x8af
 800b564:	4909      	ldr	r1, [pc, #36]	; (800b58c <tcp_next_iss+0x3c>)
 800b566:	480a      	ldr	r0, [pc, #40]	; (800b590 <tcp_next_iss+0x40>)
 800b568:	f005 fa48 	bl	80109fc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b56c:	4b09      	ldr	r3, [pc, #36]	; (800b594 <tcp_next_iss+0x44>)
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	4b09      	ldr	r3, [pc, #36]	; (800b598 <tcp_next_iss+0x48>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4413      	add	r3, r2
 800b576:	4a07      	ldr	r2, [pc, #28]	; (800b594 <tcp_next_iss+0x44>)
 800b578:	6013      	str	r3, [r2, #0]
  return iss;
 800b57a:	4b06      	ldr	r3, [pc, #24]	; (800b594 <tcp_next_iss+0x44>)
 800b57c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	08012f84 	.word	0x08012f84
 800b58c:	08013674 	.word	0x08013674
 800b590:	08012fc8 	.word	0x08012fc8
 800b594:	20000014 	.word	0x20000014
 800b598:	20006d24 	.word	0x20006d24

0800b59c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d106      	bne.n	800b5be <tcp_eff_send_mss_netif+0x22>
 800b5b0:	4b14      	ldr	r3, [pc, #80]	; (800b604 <tcp_eff_send_mss_netif+0x68>)
 800b5b2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b5b6:	4914      	ldr	r1, [pc, #80]	; (800b608 <tcp_eff_send_mss_netif+0x6c>)
 800b5b8:	4814      	ldr	r0, [pc, #80]	; (800b60c <tcp_eff_send_mss_netif+0x70>)
 800b5ba:	f005 fa1f 	bl	80109fc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d101      	bne.n	800b5c8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b5c4:	89fb      	ldrh	r3, [r7, #14]
 800b5c6:	e019      	b.n	800b5fc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5cc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b5ce:	8afb      	ldrh	r3, [r7, #22]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d012      	beq.n	800b5fa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b5d4:	2328      	movs	r3, #40	; 0x28
 800b5d6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b5d8:	8afa      	ldrh	r2, [r7, #22]
 800b5da:	8abb      	ldrh	r3, [r7, #20]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d904      	bls.n	800b5ea <tcp_eff_send_mss_netif+0x4e>
 800b5e0:	8afa      	ldrh	r2, [r7, #22]
 800b5e2:	8abb      	ldrh	r3, [r7, #20]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	e000      	b.n	800b5ec <tcp_eff_send_mss_netif+0x50>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b5ee:	8a7a      	ldrh	r2, [r7, #18]
 800b5f0:	89fb      	ldrh	r3, [r7, #14]
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	bf28      	it	cs
 800b5f6:	4613      	movcs	r3, r2
 800b5f8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b5fa:	89fb      	ldrh	r3, [r7, #14]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3718      	adds	r7, #24
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	08012f84 	.word	0x08012f84
 800b608:	08013690 	.word	0x08013690
 800b60c:	08012fc8 	.word	0x08012fc8

0800b610 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d119      	bne.n	800b658 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b624:	4b10      	ldr	r3, [pc, #64]	; (800b668 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b626:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b62a:	4910      	ldr	r1, [pc, #64]	; (800b66c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b62c:	4810      	ldr	r0, [pc, #64]	; (800b670 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b62e:	f005 f9e5 	bl	80109fc <iprintf>

  while (pcb != NULL) {
 800b632:	e011      	b.n	800b658 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d108      	bne.n	800b652 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f7fe fd22 	bl	800a090 <tcp_abort>
      pcb = next;
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	60fb      	str	r3, [r7, #12]
 800b650:	e002      	b.n	800b658 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d1ea      	bne.n	800b634 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b65e:	bf00      	nop
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	08012f84 	.word	0x08012f84
 800b66c:	080136b8 	.word	0x080136b8
 800b670:	08012fc8 	.word	0x08012fc8

0800b674 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d02a      	beq.n	800b6da <tcp_netif_ip_addr_changed+0x66>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d026      	beq.n	800b6da <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b68c:	4b15      	ldr	r3, [pc, #84]	; (800b6e4 <tcp_netif_ip_addr_changed+0x70>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff ffbc 	bl	800b610 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b698:	4b13      	ldr	r3, [pc, #76]	; (800b6e8 <tcp_netif_ip_addr_changed+0x74>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4619      	mov	r1, r3
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7ff ffb6 	bl	800b610 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d017      	beq.n	800b6da <tcp_netif_ip_addr_changed+0x66>
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d013      	beq.n	800b6da <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b6b2:	4b0e      	ldr	r3, [pc, #56]	; (800b6ec <tcp_netif_ip_addr_changed+0x78>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	e00c      	b.n	800b6d4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d103      	bne.n	800b6ce <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	60fb      	str	r3, [r7, #12]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1ef      	bne.n	800b6ba <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b6da:	bf00      	nop
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	20006d20 	.word	0x20006d20
 800b6e8:	20006d2c 	.word	0x20006d2c
 800b6ec:	20006d28 	.word	0x20006d28

0800b6f0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d007      	beq.n	800b710 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff fb53 	bl	800adb0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b710:	bf00      	nop
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b718:	b590      	push	{r4, r7, lr}
 800b71a:	b08d      	sub	sp, #52	; 0x34
 800b71c:	af04      	add	r7, sp, #16
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d105      	bne.n	800b734 <tcp_input+0x1c>
 800b728:	4b9b      	ldr	r3, [pc, #620]	; (800b998 <tcp_input+0x280>)
 800b72a:	2283      	movs	r2, #131	; 0x83
 800b72c:	499b      	ldr	r1, [pc, #620]	; (800b99c <tcp_input+0x284>)
 800b72e:	489c      	ldr	r0, [pc, #624]	; (800b9a0 <tcp_input+0x288>)
 800b730:	f005 f964 	bl	80109fc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	4a9a      	ldr	r2, [pc, #616]	; (800b9a4 <tcp_input+0x28c>)
 800b73a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	895b      	ldrh	r3, [r3, #10]
 800b740:	2b13      	cmp	r3, #19
 800b742:	f240 83c2 	bls.w	800beca <tcp_input+0x7b2>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b746:	4b98      	ldr	r3, [pc, #608]	; (800b9a8 <tcp_input+0x290>)
 800b748:	695a      	ldr	r2, [r3, #20]
 800b74a:	4b97      	ldr	r3, [pc, #604]	; (800b9a8 <tcp_input+0x290>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4619      	mov	r1, r3
 800b750:	4610      	mov	r0, r2
 800b752:	f7fb fe25 	bl	80073a0 <ip4_addr_isbroadcast_u32>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f040 83bb 	bne.w	800bed4 <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b75e:	4b92      	ldr	r3, [pc, #584]	; (800b9a8 <tcp_input+0x290>)
 800b760:	695b      	ldr	r3, [r3, #20]
 800b762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b766:	2be0      	cmp	r3, #224	; 0xe0
 800b768:	f000 83b4 	beq.w	800bed4 <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b76c:	4b8d      	ldr	r3, [pc, #564]	; (800b9a4 <tcp_input+0x28c>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	899b      	ldrh	r3, [r3, #12]
 800b772:	b29b      	uxth	r3, r3
 800b774:	4618      	mov	r0, r3
 800b776:	f7f8 fbb9 	bl	8003eec <lwip_htons>
 800b77a:	4603      	mov	r3, r0
 800b77c:	0b1b      	lsrs	r3, r3, #12
 800b77e:	b29b      	uxth	r3, r3
 800b780:	b2db      	uxtb	r3, r3
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b786:	7cbb      	ldrb	r3, [r7, #18]
 800b788:	2b13      	cmp	r3, #19
 800b78a:	f240 83a3 	bls.w	800bed4 <tcp_input+0x7bc>
 800b78e:	7cbb      	ldrb	r3, [r7, #18]
 800b790:	b29a      	uxth	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	891b      	ldrh	r3, [r3, #8]
 800b796:	429a      	cmp	r2, r3
 800b798:	f200 839c 	bhi.w	800bed4 <tcp_input+0x7bc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b79c:	7cbb      	ldrb	r3, [r7, #18]
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	3b14      	subs	r3, #20
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	4b81      	ldr	r3, [pc, #516]	; (800b9ac <tcp_input+0x294>)
 800b7a6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b7a8:	4b81      	ldr	r3, [pc, #516]	; (800b9b0 <tcp_input+0x298>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	895a      	ldrh	r2, [r3, #10]
 800b7b2:	7cbb      	ldrb	r3, [r7, #18]
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d309      	bcc.n	800b7ce <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b7ba:	4b7c      	ldr	r3, [pc, #496]	; (800b9ac <tcp_input+0x294>)
 800b7bc:	881a      	ldrh	r2, [r3, #0]
 800b7be:	4b7d      	ldr	r3, [pc, #500]	; (800b9b4 <tcp_input+0x29c>)
 800b7c0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b7c2:	7cbb      	ldrb	r3, [r7, #18]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7fd fe4c 	bl	8009464 <pbuf_remove_header>
 800b7cc:	e04e      	b.n	800b86c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d105      	bne.n	800b7e2 <tcp_input+0xca>
 800b7d6:	4b70      	ldr	r3, [pc, #448]	; (800b998 <tcp_input+0x280>)
 800b7d8:	22c2      	movs	r2, #194	; 0xc2
 800b7da:	4977      	ldr	r1, [pc, #476]	; (800b9b8 <tcp_input+0x2a0>)
 800b7dc:	4870      	ldr	r0, [pc, #448]	; (800b9a0 <tcp_input+0x288>)
 800b7de:	f005 f90d 	bl	80109fc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b7e2:	2114      	movs	r1, #20
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f7fd fe3d 	bl	8009464 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	895a      	ldrh	r2, [r3, #10]
 800b7ee:	4b71      	ldr	r3, [pc, #452]	; (800b9b4 <tcp_input+0x29c>)
 800b7f0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b7f2:	4b6e      	ldr	r3, [pc, #440]	; (800b9ac <tcp_input+0x294>)
 800b7f4:	881a      	ldrh	r2, [r3, #0]
 800b7f6:	4b6f      	ldr	r3, [pc, #444]	; (800b9b4 <tcp_input+0x29c>)
 800b7f8:	881b      	ldrh	r3, [r3, #0]
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b7fe:	4b6d      	ldr	r3, [pc, #436]	; (800b9b4 <tcp_input+0x29c>)
 800b800:	881b      	ldrh	r3, [r3, #0]
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f7fd fe2d 	bl	8009464 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	895b      	ldrh	r3, [r3, #10]
 800b810:	8a3a      	ldrh	r2, [r7, #16]
 800b812:	429a      	cmp	r2, r3
 800b814:	f200 835b 	bhi.w	800bece <tcp_input+0x7b6>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	4a64      	ldr	r2, [pc, #400]	; (800b9b0 <tcp_input+0x298>)
 800b820:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	8a3a      	ldrh	r2, [r7, #16]
 800b828:	4611      	mov	r1, r2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fd fe1a 	bl	8009464 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	891a      	ldrh	r2, [r3, #8]
 800b834:	8a3b      	ldrh	r3, [r7, #16]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	b29a      	uxth	r2, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	895b      	ldrh	r3, [r3, #10]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d005      	beq.n	800b852 <tcp_input+0x13a>
 800b846:	4b54      	ldr	r3, [pc, #336]	; (800b998 <tcp_input+0x280>)
 800b848:	22df      	movs	r2, #223	; 0xdf
 800b84a:	495c      	ldr	r1, [pc, #368]	; (800b9bc <tcp_input+0x2a4>)
 800b84c:	4854      	ldr	r0, [pc, #336]	; (800b9a0 <tcp_input+0x288>)
 800b84e:	f005 f8d5 	bl	80109fc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	891a      	ldrh	r2, [r3, #8]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	891b      	ldrh	r3, [r3, #8]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d005      	beq.n	800b86c <tcp_input+0x154>
 800b860:	4b4d      	ldr	r3, [pc, #308]	; (800b998 <tcp_input+0x280>)
 800b862:	22e0      	movs	r2, #224	; 0xe0
 800b864:	4956      	ldr	r1, [pc, #344]	; (800b9c0 <tcp_input+0x2a8>)
 800b866:	484e      	ldr	r0, [pc, #312]	; (800b9a0 <tcp_input+0x288>)
 800b868:	f005 f8c8 	bl	80109fc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b86c:	4b4d      	ldr	r3, [pc, #308]	; (800b9a4 <tcp_input+0x28c>)
 800b86e:	681c      	ldr	r4, [r3, #0]
 800b870:	4b4c      	ldr	r3, [pc, #304]	; (800b9a4 <tcp_input+0x28c>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	881b      	ldrh	r3, [r3, #0]
 800b876:	b29b      	uxth	r3, r3
 800b878:	4618      	mov	r0, r3
 800b87a:	f7f8 fb37 	bl	8003eec <lwip_htons>
 800b87e:	4603      	mov	r3, r0
 800b880:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b882:	4b48      	ldr	r3, [pc, #288]	; (800b9a4 <tcp_input+0x28c>)
 800b884:	681c      	ldr	r4, [r3, #0]
 800b886:	4b47      	ldr	r3, [pc, #284]	; (800b9a4 <tcp_input+0x28c>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	885b      	ldrh	r3, [r3, #2]
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	4618      	mov	r0, r3
 800b890:	f7f8 fb2c 	bl	8003eec <lwip_htons>
 800b894:	4603      	mov	r3, r0
 800b896:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b898:	4b42      	ldr	r3, [pc, #264]	; (800b9a4 <tcp_input+0x28c>)
 800b89a:	681c      	ldr	r4, [r3, #0]
 800b89c:	4b41      	ldr	r3, [pc, #260]	; (800b9a4 <tcp_input+0x28c>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7f8 fb37 	bl	8003f16 <lwip_htonl>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	6063      	str	r3, [r4, #4]
 800b8ac:	6863      	ldr	r3, [r4, #4]
 800b8ae:	4a45      	ldr	r2, [pc, #276]	; (800b9c4 <tcp_input+0x2ac>)
 800b8b0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b8b2:	4b3c      	ldr	r3, [pc, #240]	; (800b9a4 <tcp_input+0x28c>)
 800b8b4:	681c      	ldr	r4, [r3, #0]
 800b8b6:	4b3b      	ldr	r3, [pc, #236]	; (800b9a4 <tcp_input+0x28c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7f8 fb2a 	bl	8003f16 <lwip_htonl>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	60a3      	str	r3, [r4, #8]
 800b8c6:	68a3      	ldr	r3, [r4, #8]
 800b8c8:	4a3f      	ldr	r2, [pc, #252]	; (800b9c8 <tcp_input+0x2b0>)
 800b8ca:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b8cc:	4b35      	ldr	r3, [pc, #212]	; (800b9a4 <tcp_input+0x28c>)
 800b8ce:	681c      	ldr	r4, [r3, #0]
 800b8d0:	4b34      	ldr	r3, [pc, #208]	; (800b9a4 <tcp_input+0x28c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	89db      	ldrh	r3, [r3, #14]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7f8 fb07 	bl	8003eec <lwip_htons>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b8e2:	4b30      	ldr	r3, [pc, #192]	; (800b9a4 <tcp_input+0x28c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	899b      	ldrh	r3, [r3, #12]
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7f8 fafe 	bl	8003eec <lwip_htons>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8f8:	b2da      	uxtb	r2, r3
 800b8fa:	4b34      	ldr	r3, [pc, #208]	; (800b9cc <tcp_input+0x2b4>)
 800b8fc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	891a      	ldrh	r2, [r3, #8]
 800b902:	4b33      	ldr	r3, [pc, #204]	; (800b9d0 <tcp_input+0x2b8>)
 800b904:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b906:	4b31      	ldr	r3, [pc, #196]	; (800b9cc <tcp_input+0x2b4>)
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	f003 0303 	and.w	r3, r3, #3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00c      	beq.n	800b92c <tcp_input+0x214>
    tcplen++;
 800b912:	4b2f      	ldr	r3, [pc, #188]	; (800b9d0 <tcp_input+0x2b8>)
 800b914:	881b      	ldrh	r3, [r3, #0]
 800b916:	3301      	adds	r3, #1
 800b918:	b29a      	uxth	r2, r3
 800b91a:	4b2d      	ldr	r3, [pc, #180]	; (800b9d0 <tcp_input+0x2b8>)
 800b91c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	891a      	ldrh	r2, [r3, #8]
 800b922:	4b2b      	ldr	r3, [pc, #172]	; (800b9d0 <tcp_input+0x2b8>)
 800b924:	881b      	ldrh	r3, [r3, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	f200 82d3 	bhi.w	800bed2 <tcp_input+0x7ba>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b92c:	2300      	movs	r3, #0
 800b92e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b930:	4b28      	ldr	r3, [pc, #160]	; (800b9d4 <tcp_input+0x2bc>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	61fb      	str	r3, [r7, #28]
 800b936:	e09d      	b.n	800ba74 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	7d1b      	ldrb	r3, [r3, #20]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d105      	bne.n	800b94c <tcp_input+0x234>
 800b940:	4b15      	ldr	r3, [pc, #84]	; (800b998 <tcp_input+0x280>)
 800b942:	22fb      	movs	r2, #251	; 0xfb
 800b944:	4924      	ldr	r1, [pc, #144]	; (800b9d8 <tcp_input+0x2c0>)
 800b946:	4816      	ldr	r0, [pc, #88]	; (800b9a0 <tcp_input+0x288>)
 800b948:	f005 f858 	bl	80109fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	7d1b      	ldrb	r3, [r3, #20]
 800b950:	2b0a      	cmp	r3, #10
 800b952:	d105      	bne.n	800b960 <tcp_input+0x248>
 800b954:	4b10      	ldr	r3, [pc, #64]	; (800b998 <tcp_input+0x280>)
 800b956:	22fc      	movs	r2, #252	; 0xfc
 800b958:	4920      	ldr	r1, [pc, #128]	; (800b9dc <tcp_input+0x2c4>)
 800b95a:	4811      	ldr	r0, [pc, #68]	; (800b9a0 <tcp_input+0x288>)
 800b95c:	f005 f84e 	bl	80109fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	7d1b      	ldrb	r3, [r3, #20]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d105      	bne.n	800b974 <tcp_input+0x25c>
 800b968:	4b0b      	ldr	r3, [pc, #44]	; (800b998 <tcp_input+0x280>)
 800b96a:	22fd      	movs	r2, #253	; 0xfd
 800b96c:	491c      	ldr	r1, [pc, #112]	; (800b9e0 <tcp_input+0x2c8>)
 800b96e:	480c      	ldr	r0, [pc, #48]	; (800b9a0 <tcp_input+0x288>)
 800b970:	f005 f844 	bl	80109fc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	7a1b      	ldrb	r3, [r3, #8]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d033      	beq.n	800b9e4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	7a1a      	ldrb	r2, [r3, #8]
 800b980:	4b09      	ldr	r3, [pc, #36]	; (800b9a8 <tcp_input+0x290>)
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b988:	3301      	adds	r3, #1
 800b98a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d029      	beq.n	800b9e4 <tcp_input+0x2cc>
      prev = pcb;
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	61bb      	str	r3, [r7, #24]
      continue;
 800b994:	e06b      	b.n	800ba6e <tcp_input+0x356>
 800b996:	bf00      	nop
 800b998:	080136ec 	.word	0x080136ec
 800b99c:	08013720 	.word	0x08013720
 800b9a0:	08013738 	.word	0x08013738
 800b9a4:	2000062c 	.word	0x2000062c
 800b9a8:	20003794 	.word	0x20003794
 800b9ac:	20000630 	.word	0x20000630
 800b9b0:	20000634 	.word	0x20000634
 800b9b4:	20000632 	.word	0x20000632
 800b9b8:	08013760 	.word	0x08013760
 800b9bc:	08013770 	.word	0x08013770
 800b9c0:	0801377c 	.word	0x0801377c
 800b9c4:	2000063c 	.word	0x2000063c
 800b9c8:	20000640 	.word	0x20000640
 800b9cc:	20000648 	.word	0x20000648
 800b9d0:	20000646 	.word	0x20000646
 800b9d4:	20006d20 	.word	0x20006d20
 800b9d8:	0801379c 	.word	0x0801379c
 800b9dc:	080137c4 	.word	0x080137c4
 800b9e0:	080137f0 	.word	0x080137f0
    }

    if (pcb->remote_port == tcphdr->src &&
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	8b1a      	ldrh	r2, [r3, #24]
 800b9e8:	4b94      	ldr	r3, [pc, #592]	; (800bc3c <tcp_input+0x524>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d13a      	bne.n	800ba6a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	8ada      	ldrh	r2, [r3, #22]
 800b9f8:	4b90      	ldr	r3, [pc, #576]	; (800bc3c <tcp_input+0x524>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	885b      	ldrh	r3, [r3, #2]
 800b9fe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d132      	bne.n	800ba6a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	685a      	ldr	r2, [r3, #4]
 800ba08:	4b8d      	ldr	r3, [pc, #564]	; (800bc40 <tcp_input+0x528>)
 800ba0a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d12c      	bne.n	800ba6a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	4b8a      	ldr	r3, [pc, #552]	; (800bc40 <tcp_input+0x528>)
 800ba16:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d126      	bne.n	800ba6a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	68da      	ldr	r2, [r3, #12]
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d106      	bne.n	800ba34 <tcp_input+0x31c>
 800ba26:	4b87      	ldr	r3, [pc, #540]	; (800bc44 <tcp_input+0x52c>)
 800ba28:	f240 120d 	movw	r2, #269	; 0x10d
 800ba2c:	4986      	ldr	r1, [pc, #536]	; (800bc48 <tcp_input+0x530>)
 800ba2e:	4887      	ldr	r0, [pc, #540]	; (800bc4c <tcp_input+0x534>)
 800ba30:	f004 ffe4 	bl	80109fc <iprintf>
      if (prev != NULL) {
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00a      	beq.n	800ba50 <tcp_input+0x338>
        prev->next = pcb->next;
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	68da      	ldr	r2, [r3, #12]
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ba42:	4b83      	ldr	r3, [pc, #524]	; (800bc50 <tcp_input+0x538>)
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ba4a:	4a81      	ldr	r2, [pc, #516]	; (800bc50 <tcp_input+0x538>)
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	68da      	ldr	r2, [r3, #12]
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d111      	bne.n	800ba7e <tcp_input+0x366>
 800ba5a:	4b7a      	ldr	r3, [pc, #488]	; (800bc44 <tcp_input+0x52c>)
 800ba5c:	f240 1215 	movw	r2, #277	; 0x115
 800ba60:	497c      	ldr	r1, [pc, #496]	; (800bc54 <tcp_input+0x53c>)
 800ba62:	487a      	ldr	r0, [pc, #488]	; (800bc4c <tcp_input+0x534>)
 800ba64:	f004 ffca 	bl	80109fc <iprintf>
      break;
 800ba68:	e009      	b.n	800ba7e <tcp_input+0x366>
    }
    prev = pcb;
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba6e:	69fb      	ldr	r3, [r7, #28]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	61fb      	str	r3, [r7, #28]
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f47f af5e 	bne.w	800b938 <tcp_input+0x220>
 800ba7c:	e000      	b.n	800ba80 <tcp_input+0x368>
      break;
 800ba7e:	bf00      	nop
  }

  if (pcb == NULL) {
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f040 8095 	bne.w	800bbb2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba88:	4b73      	ldr	r3, [pc, #460]	; (800bc58 <tcp_input+0x540>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	61fb      	str	r3, [r7, #28]
 800ba8e:	e03f      	b.n	800bb10 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	7d1b      	ldrb	r3, [r3, #20]
 800ba94:	2b0a      	cmp	r3, #10
 800ba96:	d006      	beq.n	800baa6 <tcp_input+0x38e>
 800ba98:	4b6a      	ldr	r3, [pc, #424]	; (800bc44 <tcp_input+0x52c>)
 800ba9a:	f240 121f 	movw	r2, #287	; 0x11f
 800ba9e:	496f      	ldr	r1, [pc, #444]	; (800bc5c <tcp_input+0x544>)
 800baa0:	486a      	ldr	r0, [pc, #424]	; (800bc4c <tcp_input+0x534>)
 800baa2:	f004 ffab 	bl	80109fc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	7a1b      	ldrb	r3, [r3, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d009      	beq.n	800bac2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	7a1a      	ldrb	r2, [r3, #8]
 800bab2:	4b63      	ldr	r3, [pc, #396]	; (800bc40 <tcp_input+0x528>)
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800baba:	3301      	adds	r3, #1
 800babc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800babe:	429a      	cmp	r2, r3
 800bac0:	d122      	bne.n	800bb08 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	8b1a      	ldrh	r2, [r3, #24]
 800bac6:	4b5d      	ldr	r3, [pc, #372]	; (800bc3c <tcp_input+0x524>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	881b      	ldrh	r3, [r3, #0]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	429a      	cmp	r2, r3
 800bad0:	d11b      	bne.n	800bb0a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	8ada      	ldrh	r2, [r3, #22]
 800bad6:	4b59      	ldr	r3, [pc, #356]	; (800bc3c <tcp_input+0x524>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	885b      	ldrh	r3, [r3, #2]
 800badc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bade:	429a      	cmp	r2, r3
 800bae0:	d113      	bne.n	800bb0a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	685a      	ldr	r2, [r3, #4]
 800bae6:	4b56      	ldr	r3, [pc, #344]	; (800bc40 <tcp_input+0x528>)
 800bae8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800baea:	429a      	cmp	r2, r3
 800baec:	d10d      	bne.n	800bb0a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	4b53      	ldr	r3, [pc, #332]	; (800bc40 <tcp_input+0x528>)
 800baf4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d107      	bne.n	800bb0a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bafa:	69f8      	ldr	r0, [r7, #28]
 800bafc:	f000 fb4e 	bl	800c19c <tcp_timewait_input>
        }
        pbuf_free(p);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7fd fd35 	bl	8009570 <pbuf_free>
        return;
 800bb06:	e1ea      	b.n	800bede <tcp_input+0x7c6>
        continue;
 800bb08:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	61fb      	str	r3, [r7, #28]
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1bc      	bne.n	800ba90 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb1a:	4b51      	ldr	r3, [pc, #324]	; (800bc60 <tcp_input+0x548>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	617b      	str	r3, [r7, #20]
 800bb20:	e02a      	b.n	800bb78 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	7a1b      	ldrb	r3, [r3, #8]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00c      	beq.n	800bb44 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	7a1a      	ldrb	r2, [r3, #8]
 800bb2e:	4b44      	ldr	r3, [pc, #272]	; (800bc40 <tcp_input+0x528>)
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb36:	3301      	adds	r3, #1
 800bb38:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d002      	beq.n	800bb44 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	61bb      	str	r3, [r7, #24]
        continue;
 800bb42:	e016      	b.n	800bb72 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	8ada      	ldrh	r2, [r3, #22]
 800bb48:	4b3c      	ldr	r3, [pc, #240]	; (800bc3c <tcp_input+0x524>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	885b      	ldrh	r3, [r3, #2]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d10c      	bne.n	800bb6e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	4b39      	ldr	r3, [pc, #228]	; (800bc40 <tcp_input+0x528>)
 800bb5a:	695b      	ldr	r3, [r3, #20]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d00f      	beq.n	800bb80 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00d      	beq.n	800bb82 <tcp_input+0x46a>
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d009      	beq.n	800bb82 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	617b      	str	r3, [r7, #20]
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1d1      	bne.n	800bb22 <tcp_input+0x40a>
 800bb7e:	e000      	b.n	800bb82 <tcp_input+0x46a>
            break;
 800bb80:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d014      	beq.n	800bbb2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00a      	beq.n	800bba4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	68da      	ldr	r2, [r3, #12]
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bb96:	4b32      	ldr	r3, [pc, #200]	; (800bc60 <tcp_input+0x548>)
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bb9e:	4a30      	ldr	r2, [pc, #192]	; (800bc60 <tcp_input+0x548>)
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bba4:	6978      	ldr	r0, [r7, #20]
 800bba6:	f000 f9fb 	bl	800bfa0 <tcp_listen_input>
      }
      pbuf_free(p);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7fd fce0 	bl	8009570 <pbuf_free>
      return;
 800bbb0:	e195      	b.n	800bede <tcp_input+0x7c6>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 815e 	beq.w	800be76 <tcp_input+0x75e>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bbba:	4b2a      	ldr	r3, [pc, #168]	; (800bc64 <tcp_input+0x54c>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	891a      	ldrh	r2, [r3, #8]
 800bbc4:	4b27      	ldr	r3, [pc, #156]	; (800bc64 <tcp_input+0x54c>)
 800bbc6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bbc8:	4a26      	ldr	r2, [pc, #152]	; (800bc64 <tcp_input+0x54c>)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bbce:	4b1b      	ldr	r3, [pc, #108]	; (800bc3c <tcp_input+0x524>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a24      	ldr	r2, [pc, #144]	; (800bc64 <tcp_input+0x54c>)
 800bbd4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bbd6:	4b24      	ldr	r3, [pc, #144]	; (800bc68 <tcp_input+0x550>)
 800bbd8:	2200      	movs	r2, #0
 800bbda:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bbdc:	4b23      	ldr	r3, [pc, #140]	; (800bc6c <tcp_input+0x554>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bbe2:	4b23      	ldr	r3, [pc, #140]	; (800bc70 <tcp_input+0x558>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bbe8:	4b22      	ldr	r3, [pc, #136]	; (800bc74 <tcp_input+0x55c>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	f003 0308 	and.w	r3, r3, #8
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d006      	beq.n	800bc02 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	7b5b      	ldrb	r3, [r3, #13]
 800bbf8:	f043 0301 	orr.w	r3, r3, #1
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d038      	beq.n	800bc7c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bc0a:	69f8      	ldr	r0, [r7, #28]
 800bc0c:	f7ff f854 	bl	800acb8 <tcp_process_refused_data>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f113 0f0d 	cmn.w	r3, #13
 800bc16:	d007      	beq.n	800bc28 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d02d      	beq.n	800bc7c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bc20:	4b15      	ldr	r3, [pc, #84]	; (800bc78 <tcp_input+0x560>)
 800bc22:	881b      	ldrh	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d029      	beq.n	800bc7c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f040 8104 	bne.w	800be3a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800bc32:	69f8      	ldr	r0, [r7, #28]
 800bc34:	f003 fe34 	bl	800f8a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bc38:	e0ff      	b.n	800be3a <tcp_input+0x722>
 800bc3a:	bf00      	nop
 800bc3c:	2000062c 	.word	0x2000062c
 800bc40:	20003794 	.word	0x20003794
 800bc44:	080136ec 	.word	0x080136ec
 800bc48:	08013818 	.word	0x08013818
 800bc4c:	08013738 	.word	0x08013738
 800bc50:	20006d20 	.word	0x20006d20
 800bc54:	08013844 	.word	0x08013844
 800bc58:	20006d30 	.word	0x20006d30
 800bc5c:	08013870 	.word	0x08013870
 800bc60:	20006d28 	.word	0x20006d28
 800bc64:	2000061c 	.word	0x2000061c
 800bc68:	2000064c 	.word	0x2000064c
 800bc6c:	20000649 	.word	0x20000649
 800bc70:	20000644 	.word	0x20000644
 800bc74:	20000648 	.word	0x20000648
 800bc78:	20000646 	.word	0x20000646
      }
    }
    tcp_input_pcb = pcb;
 800bc7c:	4a99      	ldr	r2, [pc, #612]	; (800bee4 <tcp_input+0x7cc>)
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bc82:	69f8      	ldr	r0, [r7, #28]
 800bc84:	f000 fb06 	bl	800c294 <tcp_process>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800bc8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bc90:	f113 0f0d 	cmn.w	r3, #13
 800bc94:	f000 80dc 	beq.w	800be50 <tcp_input+0x738>
      if (recv_flags & TF_RESET) {
 800bc98:	4b93      	ldr	r3, [pc, #588]	; (800bee8 <tcp_input+0x7d0>)
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	f003 0308 	and.w	r3, r3, #8
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d015      	beq.n	800bcd0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d008      	beq.n	800bcc0 <tcp_input+0x5a8>
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcb4:	69fa      	ldr	r2, [r7, #28]
 800bcb6:	6912      	ldr	r2, [r2, #16]
 800bcb8:	f06f 010d 	mvn.w	r1, #13
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bcc0:	69f9      	ldr	r1, [r7, #28]
 800bcc2:	488a      	ldr	r0, [pc, #552]	; (800beec <tcp_input+0x7d4>)
 800bcc4:	f7ff fbb0 	bl	800b428 <tcp_pcb_remove>
        tcp_free(pcb);
 800bcc8:	69f8      	ldr	r0, [r7, #28]
 800bcca:	f7fd ff01 	bl	8009ad0 <tcp_free>
 800bcce:	e0bf      	b.n	800be50 <tcp_input+0x738>
      } else {
        err = ERR_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bcd4:	4b86      	ldr	r3, [pc, #536]	; (800bef0 <tcp_input+0x7d8>)
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d01d      	beq.n	800bd18 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bcdc:	4b84      	ldr	r3, [pc, #528]	; (800bef0 <tcp_input+0x7d8>)
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00a      	beq.n	800bd02 <tcp_input+0x5ea>
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcf2:	69fa      	ldr	r2, [r7, #28]
 800bcf4:	6910      	ldr	r0, [r2, #16]
 800bcf6:	89fa      	ldrh	r2, [r7, #14]
 800bcf8:	69f9      	ldr	r1, [r7, #28]
 800bcfa:	4798      	blx	r3
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	74fb      	strb	r3, [r7, #19]
 800bd00:	e001      	b.n	800bd06 <tcp_input+0x5ee>
 800bd02:	2300      	movs	r3, #0
 800bd04:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bd06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd0a:	f113 0f0d 	cmn.w	r3, #13
 800bd0e:	f000 8096 	beq.w	800be3e <tcp_input+0x726>
              goto aborted;
            }
          }
          recv_acked = 0;
 800bd12:	4b77      	ldr	r3, [pc, #476]	; (800bef0 <tcp_input+0x7d8>)
 800bd14:	2200      	movs	r2, #0
 800bd16:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bd18:	69f8      	ldr	r0, [r7, #28]
 800bd1a:	f000 f901 	bl	800bf20 <tcp_input_delayed_close>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f040 808e 	bne.w	800be42 <tcp_input+0x72a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bd26:	4b73      	ldr	r3, [pc, #460]	; (800bef4 <tcp_input+0x7dc>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d041      	beq.n	800bdb2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d006      	beq.n	800bd44 <tcp_input+0x62c>
 800bd36:	4b70      	ldr	r3, [pc, #448]	; (800bef8 <tcp_input+0x7e0>)
 800bd38:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bd3c:	496f      	ldr	r1, [pc, #444]	; (800befc <tcp_input+0x7e4>)
 800bd3e:	4870      	ldr	r0, [pc, #448]	; (800bf00 <tcp_input+0x7e8>)
 800bd40:	f004 fe5c 	bl	80109fc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	8b5b      	ldrh	r3, [r3, #26]
 800bd48:	f003 0310 	and.w	r3, r3, #16
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d008      	beq.n	800bd62 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bd50:	4b68      	ldr	r3, [pc, #416]	; (800bef4 <tcp_input+0x7dc>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fd fc0b 	bl	8009570 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800bd5a:	69f8      	ldr	r0, [r7, #28]
 800bd5c:	f7fe f998 	bl	800a090 <tcp_abort>
            goto aborted;
 800bd60:	e076      	b.n	800be50 <tcp_input+0x738>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00c      	beq.n	800bd86 <tcp_input+0x66e>
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	6918      	ldr	r0, [r3, #16]
 800bd76:	4b5f      	ldr	r3, [pc, #380]	; (800bef4 <tcp_input+0x7dc>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	69f9      	ldr	r1, [r7, #28]
 800bd7e:	47a0      	blx	r4
 800bd80:	4603      	mov	r3, r0
 800bd82:	74fb      	strb	r3, [r7, #19]
 800bd84:	e008      	b.n	800bd98 <tcp_input+0x680>
 800bd86:	4b5b      	ldr	r3, [pc, #364]	; (800bef4 <tcp_input+0x7dc>)
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	69f9      	ldr	r1, [r7, #28]
 800bd8e:	2000      	movs	r0, #0
 800bd90:	f7ff f884 	bl	800ae9c <tcp_recv_null>
 800bd94:	4603      	mov	r3, r0
 800bd96:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bd98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd9c:	f113 0f0d 	cmn.w	r3, #13
 800bda0:	d051      	beq.n	800be46 <tcp_input+0x72e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bda2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d003      	beq.n	800bdb2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bdaa:	4b52      	ldr	r3, [pc, #328]	; (800bef4 <tcp_input+0x7dc>)
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bdb2:	4b4d      	ldr	r3, [pc, #308]	; (800bee8 <tcp_input+0x7d0>)
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	f003 0320 	and.w	r3, r3, #32
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d030      	beq.n	800be20 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d009      	beq.n	800bdda <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdca:	69fa      	ldr	r2, [r7, #28]
 800bdcc:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800bdce:	7b52      	ldrb	r2, [r2, #13]
 800bdd0:	f042 0220 	orr.w	r2, r2, #32
 800bdd4:	b2d2      	uxtb	r2, r2
 800bdd6:	735a      	strb	r2, [r3, #13]
 800bdd8:	e022      	b.n	800be20 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bdda:	69fb      	ldr	r3, [r7, #28]
 800bddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdde:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bde2:	d005      	beq.n	800bdf0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bde8:	3301      	adds	r3, #1
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00b      	beq.n	800be12 <tcp_input+0x6fa>
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	6918      	ldr	r0, [r3, #16]
 800be04:	2300      	movs	r3, #0
 800be06:	2200      	movs	r2, #0
 800be08:	69f9      	ldr	r1, [r7, #28]
 800be0a:	47a0      	blx	r4
 800be0c:	4603      	mov	r3, r0
 800be0e:	74fb      	strb	r3, [r7, #19]
 800be10:	e001      	b.n	800be16 <tcp_input+0x6fe>
 800be12:	2300      	movs	r3, #0
 800be14:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800be16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be1a:	f113 0f0d 	cmn.w	r3, #13
 800be1e:	d014      	beq.n	800be4a <tcp_input+0x732>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800be20:	4b30      	ldr	r3, [pc, #192]	; (800bee4 <tcp_input+0x7cc>)
 800be22:	2200      	movs	r2, #0
 800be24:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800be26:	69f8      	ldr	r0, [r7, #28]
 800be28:	f000 f87a 	bl	800bf20 <tcp_input_delayed_close>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10d      	bne.n	800be4e <tcp_input+0x736>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800be32:	69f8      	ldr	r0, [r7, #28]
 800be34:	f002 ff16 	bl	800ec64 <tcp_output>
 800be38:	e00a      	b.n	800be50 <tcp_input+0x738>
        goto aborted;
 800be3a:	bf00      	nop
 800be3c:	e008      	b.n	800be50 <tcp_input+0x738>
              goto aborted;
 800be3e:	bf00      	nop
 800be40:	e006      	b.n	800be50 <tcp_input+0x738>
          goto aborted;
 800be42:	bf00      	nop
 800be44:	e004      	b.n	800be50 <tcp_input+0x738>
            goto aborted;
 800be46:	bf00      	nop
 800be48:	e002      	b.n	800be50 <tcp_input+0x738>
              goto aborted;
 800be4a:	bf00      	nop
 800be4c:	e000      	b.n	800be50 <tcp_input+0x738>
          goto aborted;
 800be4e:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800be50:	4b24      	ldr	r3, [pc, #144]	; (800bee4 <tcp_input+0x7cc>)
 800be52:	2200      	movs	r2, #0
 800be54:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800be56:	4b27      	ldr	r3, [pc, #156]	; (800bef4 <tcp_input+0x7dc>)
 800be58:	2200      	movs	r2, #0
 800be5a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800be5c:	4b29      	ldr	r3, [pc, #164]	; (800bf04 <tcp_input+0x7ec>)
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d03b      	beq.n	800bedc <tcp_input+0x7c4>
      pbuf_free(inseg.p);
 800be64:	4b27      	ldr	r3, [pc, #156]	; (800bf04 <tcp_input+0x7ec>)
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	4618      	mov	r0, r3
 800be6a:	f7fd fb81 	bl	8009570 <pbuf_free>
      inseg.p = NULL;
 800be6e:	4b25      	ldr	r3, [pc, #148]	; (800bf04 <tcp_input+0x7ec>)
 800be70:	2200      	movs	r2, #0
 800be72:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800be74:	e032      	b.n	800bedc <tcp_input+0x7c4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800be76:	4b24      	ldr	r3, [pc, #144]	; (800bf08 <tcp_input+0x7f0>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	899b      	ldrh	r3, [r3, #12]
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	4618      	mov	r0, r3
 800be80:	f7f8 f834 	bl	8003eec <lwip_htons>
 800be84:	4603      	mov	r3, r0
 800be86:	b2db      	uxtb	r3, r3
 800be88:	f003 0304 	and.w	r3, r3, #4
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d118      	bne.n	800bec2 <tcp_input+0x7aa>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be90:	4b1e      	ldr	r3, [pc, #120]	; (800bf0c <tcp_input+0x7f4>)
 800be92:	6819      	ldr	r1, [r3, #0]
 800be94:	4b1e      	ldr	r3, [pc, #120]	; (800bf10 <tcp_input+0x7f8>)
 800be96:	881b      	ldrh	r3, [r3, #0]
 800be98:	461a      	mov	r2, r3
 800be9a:	4b1e      	ldr	r3, [pc, #120]	; (800bf14 <tcp_input+0x7fc>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bea0:	4b19      	ldr	r3, [pc, #100]	; (800bf08 <tcp_input+0x7f0>)
 800bea2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bea4:	885b      	ldrh	r3, [r3, #2]
 800bea6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bea8:	4a17      	ldr	r2, [pc, #92]	; (800bf08 <tcp_input+0x7f0>)
 800beaa:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800beac:	8812      	ldrh	r2, [r2, #0]
 800beae:	b292      	uxth	r2, r2
 800beb0:	9202      	str	r2, [sp, #8]
 800beb2:	9301      	str	r3, [sp, #4]
 800beb4:	4b18      	ldr	r3, [pc, #96]	; (800bf18 <tcp_input+0x800>)
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	4b18      	ldr	r3, [pc, #96]	; (800bf1c <tcp_input+0x804>)
 800beba:	4602      	mov	r2, r0
 800bebc:	2000      	movs	r0, #0
 800bebe:	f003 fc9d 	bl	800f7fc <tcp_rst>
    pbuf_free(p);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f7fd fb54 	bl	8009570 <pbuf_free>
  return;
 800bec8:	e008      	b.n	800bedc <tcp_input+0x7c4>
    goto dropped;
 800beca:	bf00      	nop
 800becc:	e002      	b.n	800bed4 <tcp_input+0x7bc>
      goto dropped;
 800bece:	bf00      	nop
 800bed0:	e000      	b.n	800bed4 <tcp_input+0x7bc>
      goto dropped;
 800bed2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7fd fb4b 	bl	8009570 <pbuf_free>
 800beda:	e000      	b.n	800bede <tcp_input+0x7c6>
  return;
 800bedc:	bf00      	nop
}
 800bede:	3724      	adds	r7, #36	; 0x24
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd90      	pop	{r4, r7, pc}
 800bee4:	20006d34 	.word	0x20006d34
 800bee8:	20000649 	.word	0x20000649
 800beec:	20006d20 	.word	0x20006d20
 800bef0:	20000644 	.word	0x20000644
 800bef4:	2000064c 	.word	0x2000064c
 800bef8:	080136ec 	.word	0x080136ec
 800befc:	080138a0 	.word	0x080138a0
 800bf00:	08013738 	.word	0x08013738
 800bf04:	2000061c 	.word	0x2000061c
 800bf08:	2000062c 	.word	0x2000062c
 800bf0c:	20000640 	.word	0x20000640
 800bf10:	20000646 	.word	0x20000646
 800bf14:	2000063c 	.word	0x2000063c
 800bf18:	200037a4 	.word	0x200037a4
 800bf1c:	200037a8 	.word	0x200037a8

0800bf20 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d106      	bne.n	800bf3c <tcp_input_delayed_close+0x1c>
 800bf2e:	4b17      	ldr	r3, [pc, #92]	; (800bf8c <tcp_input_delayed_close+0x6c>)
 800bf30:	f240 225a 	movw	r2, #602	; 0x25a
 800bf34:	4916      	ldr	r1, [pc, #88]	; (800bf90 <tcp_input_delayed_close+0x70>)
 800bf36:	4817      	ldr	r0, [pc, #92]	; (800bf94 <tcp_input_delayed_close+0x74>)
 800bf38:	f004 fd60 	bl	80109fc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800bf3c:	4b16      	ldr	r3, [pc, #88]	; (800bf98 <tcp_input_delayed_close+0x78>)
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	f003 0310 	and.w	r3, r3, #16
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d01c      	beq.n	800bf82 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	8b5b      	ldrh	r3, [r3, #26]
 800bf4c:	f003 0310 	and.w	r3, r3, #16
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10d      	bne.n	800bf70 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d008      	beq.n	800bf70 <tcp_input_delayed_close+0x50>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	6912      	ldr	r2, [r2, #16]
 800bf68:	f06f 010e 	mvn.w	r1, #14
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bf70:	6879      	ldr	r1, [r7, #4]
 800bf72:	480a      	ldr	r0, [pc, #40]	; (800bf9c <tcp_input_delayed_close+0x7c>)
 800bf74:	f7ff fa58 	bl	800b428 <tcp_pcb_remove>
    tcp_free(pcb);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7fd fda9 	bl	8009ad0 <tcp_free>
    return 1;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e000      	b.n	800bf84 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	080136ec 	.word	0x080136ec
 800bf90:	080138bc 	.word	0x080138bc
 800bf94:	08013738 	.word	0x08013738
 800bf98:	20000649 	.word	0x20000649
 800bf9c:	20006d20 	.word	0x20006d20

0800bfa0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800bfa0:	b590      	push	{r4, r7, lr}
 800bfa2:	b08b      	sub	sp, #44	; 0x2c
 800bfa4:	af04      	add	r7, sp, #16
 800bfa6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800bfa8:	4b6f      	ldr	r3, [pc, #444]	; (800c168 <tcp_listen_input+0x1c8>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	f003 0304 	and.w	r3, r3, #4
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f040 80d3 	bne.w	800c15c <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d106      	bne.n	800bfca <tcp_listen_input+0x2a>
 800bfbc:	4b6b      	ldr	r3, [pc, #428]	; (800c16c <tcp_listen_input+0x1cc>)
 800bfbe:	f240 2281 	movw	r2, #641	; 0x281
 800bfc2:	496b      	ldr	r1, [pc, #428]	; (800c170 <tcp_listen_input+0x1d0>)
 800bfc4:	486b      	ldr	r0, [pc, #428]	; (800c174 <tcp_listen_input+0x1d4>)
 800bfc6:	f004 fd19 	bl	80109fc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800bfca:	4b67      	ldr	r3, [pc, #412]	; (800c168 <tcp_listen_input+0x1c8>)
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	f003 0310 	and.w	r3, r3, #16
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d019      	beq.n	800c00a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfd6:	4b68      	ldr	r3, [pc, #416]	; (800c178 <tcp_listen_input+0x1d8>)
 800bfd8:	6819      	ldr	r1, [r3, #0]
 800bfda:	4b68      	ldr	r3, [pc, #416]	; (800c17c <tcp_listen_input+0x1dc>)
 800bfdc:	881b      	ldrh	r3, [r3, #0]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	4b67      	ldr	r3, [pc, #412]	; (800c180 <tcp_listen_input+0x1e0>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bfe6:	4b67      	ldr	r3, [pc, #412]	; (800c184 <tcp_listen_input+0x1e4>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfea:	885b      	ldrh	r3, [r3, #2]
 800bfec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bfee:	4a65      	ldr	r2, [pc, #404]	; (800c184 <tcp_listen_input+0x1e4>)
 800bff0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bff2:	8812      	ldrh	r2, [r2, #0]
 800bff4:	b292      	uxth	r2, r2
 800bff6:	9202      	str	r2, [sp, #8]
 800bff8:	9301      	str	r3, [sp, #4]
 800bffa:	4b63      	ldr	r3, [pc, #396]	; (800c188 <tcp_listen_input+0x1e8>)
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	4b63      	ldr	r3, [pc, #396]	; (800c18c <tcp_listen_input+0x1ec>)
 800c000:	4602      	mov	r2, r0
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f003 fbfa 	bl	800f7fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c008:	e0aa      	b.n	800c160 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800c00a:	4b57      	ldr	r3, [pc, #348]	; (800c168 <tcp_listen_input+0x1c8>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	f003 0302 	and.w	r3, r3, #2
 800c012:	2b00      	cmp	r3, #0
 800c014:	f000 80a4 	beq.w	800c160 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	7d5b      	ldrb	r3, [r3, #21]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff f861 	bl	800b0e4 <tcp_alloc>
 800c022:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d111      	bne.n	800c04e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	699b      	ldr	r3, [r3, #24]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00a      	beq.n	800c048 <tcp_listen_input+0xa8>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	6910      	ldr	r0, [r2, #16]
 800c03a:	f04f 32ff 	mov.w	r2, #4294967295
 800c03e:	2100      	movs	r1, #0
 800c040:	4798      	blx	r3
 800c042:	4603      	mov	r3, r0
 800c044:	74fb      	strb	r3, [r7, #19]
      return;
 800c046:	e08c      	b.n	800c162 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c048:	23f0      	movs	r3, #240	; 0xf0
 800c04a:	74fb      	strb	r3, [r7, #19]
      return;
 800c04c:	e089      	b.n	800c162 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c04e:	4b50      	ldr	r3, [pc, #320]	; (800c190 <tcp_listen_input+0x1f0>)
 800c050:	695a      	ldr	r2, [r3, #20]
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c056:	4b4e      	ldr	r3, [pc, #312]	; (800c190 <tcp_listen_input+0x1f0>)
 800c058:	691a      	ldr	r2, [r3, #16]
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	8ada      	ldrh	r2, [r3, #22]
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c066:	4b47      	ldr	r3, [pc, #284]	; (800c184 <tcp_listen_input+0x1e4>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	2203      	movs	r2, #3
 800c076:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c078:	4b41      	ldr	r3, [pc, #260]	; (800c180 <tcp_listen_input+0x1e0>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	1c5a      	adds	r2, r3, #1
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c08a:	6978      	ldr	r0, [r7, #20]
 800c08c:	f7ff fa60 	bl	800b550 <tcp_next_iss>
 800c090:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c0aa:	4b35      	ldr	r3, [pc, #212]	; (800c180 <tcp_listen_input+0x1e0>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	1e5a      	subs	r2, r3, #1
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	691a      	ldr	r2, [r3, #16]
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	7a5b      	ldrb	r3, [r3, #9]
 800c0c6:	f003 030c 	and.w	r3, r3, #12
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	7a1a      	ldrb	r2, [r3, #8]
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c0d8:	4b2e      	ldr	r3, [pc, #184]	; (800c194 <tcp_listen_input+0x1f4>)
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	60da      	str	r2, [r3, #12]
 800c0e0:	4a2c      	ldr	r2, [pc, #176]	; (800c194 <tcp_listen_input+0x1f4>)
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	6013      	str	r3, [r2, #0]
 800c0e6:	f003 fd4d 	bl	800fb84 <tcp_timer_needed>
 800c0ea:	4b2b      	ldr	r3, [pc, #172]	; (800c198 <tcp_listen_input+0x1f8>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c0f0:	6978      	ldr	r0, [r7, #20]
 800c0f2:	f001 fd93 	bl	800dc1c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c0f6:	4b23      	ldr	r3, [pc, #140]	; (800c184 <tcp_listen_input+0x1e4>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	89db      	ldrh	r3, [r3, #14]
 800c0fc:	b29a      	uxth	r2, r3
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	3304      	adds	r3, #4
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fa fe95 	bl	8006e48 <ip4_route>
 800c11e:	4601      	mov	r1, r0
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	3304      	adds	r3, #4
 800c124:	461a      	mov	r2, r3
 800c126:	4620      	mov	r0, r4
 800c128:	f7ff fa38 	bl	800b59c <tcp_eff_send_mss_netif>
 800c12c:	4603      	mov	r3, r0
 800c12e:	461a      	mov	r2, r3
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c134:	2112      	movs	r1, #18
 800c136:	6978      	ldr	r0, [r7, #20]
 800c138:	f002 fca4 	bl	800ea84 <tcp_enqueue_flags>
 800c13c:	4603      	mov	r3, r0
 800c13e:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 800c140:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d004      	beq.n	800c152 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c148:	2100      	movs	r1, #0
 800c14a:	6978      	ldr	r0, [r7, #20]
 800c14c:	f7fd fee2 	bl	8009f14 <tcp_abandon>
      return;
 800c150:	e007      	b.n	800c162 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800c152:	6978      	ldr	r0, [r7, #20]
 800c154:	f002 fd86 	bl	800ec64 <tcp_output>
  return;
 800c158:	bf00      	nop
 800c15a:	e001      	b.n	800c160 <tcp_listen_input+0x1c0>
    return;
 800c15c:	bf00      	nop
 800c15e:	e000      	b.n	800c162 <tcp_listen_input+0x1c2>
  return;
 800c160:	bf00      	nop
}
 800c162:	371c      	adds	r7, #28
 800c164:	46bd      	mov	sp, r7
 800c166:	bd90      	pop	{r4, r7, pc}
 800c168:	20000648 	.word	0x20000648
 800c16c:	080136ec 	.word	0x080136ec
 800c170:	080138e4 	.word	0x080138e4
 800c174:	08013738 	.word	0x08013738
 800c178:	20000640 	.word	0x20000640
 800c17c:	20000646 	.word	0x20000646
 800c180:	2000063c 	.word	0x2000063c
 800c184:	2000062c 	.word	0x2000062c
 800c188:	200037a4 	.word	0x200037a4
 800c18c:	200037a8 	.word	0x200037a8
 800c190:	20003794 	.word	0x20003794
 800c194:	20006d20 	.word	0x20006d20
 800c198:	20006d1c 	.word	0x20006d1c

0800c19c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b086      	sub	sp, #24
 800c1a0:	af04      	add	r7, sp, #16
 800c1a2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c1a4:	4b30      	ldr	r3, [pc, #192]	; (800c268 <tcp_timewait_input+0xcc>)
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	f003 0304 	and.w	r3, r3, #4
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d154      	bne.n	800c25a <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d106      	bne.n	800c1c4 <tcp_timewait_input+0x28>
 800c1b6:	4b2d      	ldr	r3, [pc, #180]	; (800c26c <tcp_timewait_input+0xd0>)
 800c1b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c1bc:	492c      	ldr	r1, [pc, #176]	; (800c270 <tcp_timewait_input+0xd4>)
 800c1be:	482d      	ldr	r0, [pc, #180]	; (800c274 <tcp_timewait_input+0xd8>)
 800c1c0:	f004 fc1c 	bl	80109fc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c1c4:	4b28      	ldr	r3, [pc, #160]	; (800c268 <tcp_timewait_input+0xcc>)
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	f003 0302 	and.w	r3, r3, #2
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d02a      	beq.n	800c226 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c1d0:	4b29      	ldr	r3, [pc, #164]	; (800c278 <tcp_timewait_input+0xdc>)
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	db2d      	blt.n	800c23a <tcp_timewait_input+0x9e>
 800c1de:	4b26      	ldr	r3, [pc, #152]	; (800c278 <tcp_timewait_input+0xdc>)
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c1ea:	440b      	add	r3, r1
 800c1ec:	1ad3      	subs	r3, r2, r3
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	dc23      	bgt.n	800c23a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1f2:	4b22      	ldr	r3, [pc, #136]	; (800c27c <tcp_timewait_input+0xe0>)
 800c1f4:	6819      	ldr	r1, [r3, #0]
 800c1f6:	4b22      	ldr	r3, [pc, #136]	; (800c280 <tcp_timewait_input+0xe4>)
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	4b1e      	ldr	r3, [pc, #120]	; (800c278 <tcp_timewait_input+0xdc>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c202:	4b20      	ldr	r3, [pc, #128]	; (800c284 <tcp_timewait_input+0xe8>)
 800c204:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c206:	885b      	ldrh	r3, [r3, #2]
 800c208:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c20a:	4a1e      	ldr	r2, [pc, #120]	; (800c284 <tcp_timewait_input+0xe8>)
 800c20c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c20e:	8812      	ldrh	r2, [r2, #0]
 800c210:	b292      	uxth	r2, r2
 800c212:	9202      	str	r2, [sp, #8]
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	4b1c      	ldr	r3, [pc, #112]	; (800c288 <tcp_timewait_input+0xec>)
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	4b1c      	ldr	r3, [pc, #112]	; (800c28c <tcp_timewait_input+0xf0>)
 800c21c:	4602      	mov	r2, r0
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f003 faec 	bl	800f7fc <tcp_rst>
      return;
 800c224:	e01c      	b.n	800c260 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800c226:	4b10      	ldr	r3, [pc, #64]	; (800c268 <tcp_timewait_input+0xcc>)
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	f003 0301 	and.w	r3, r3, #1
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c232:	4b17      	ldr	r3, [pc, #92]	; (800c290 <tcp_timewait_input+0xf4>)
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c23a:	4b11      	ldr	r3, [pc, #68]	; (800c280 <tcp_timewait_input+0xe4>)
 800c23c:	881b      	ldrh	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00d      	beq.n	800c25e <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	8b5b      	ldrh	r3, [r3, #26]
 800c246:	f043 0302 	orr.w	r3, r3, #2
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f002 fd07 	bl	800ec64 <tcp_output>
  }
  return;
 800c256:	bf00      	nop
 800c258:	e001      	b.n	800c25e <tcp_timewait_input+0xc2>
    return;
 800c25a:	bf00      	nop
 800c25c:	e000      	b.n	800c260 <tcp_timewait_input+0xc4>
  return;
 800c25e:	bf00      	nop
}
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	20000648 	.word	0x20000648
 800c26c:	080136ec 	.word	0x080136ec
 800c270:	08013904 	.word	0x08013904
 800c274:	08013738 	.word	0x08013738
 800c278:	2000063c 	.word	0x2000063c
 800c27c:	20000640 	.word	0x20000640
 800c280:	20000646 	.word	0x20000646
 800c284:	2000062c 	.word	0x2000062c
 800c288:	200037a4 	.word	0x200037a4
 800c28c:	200037a8 	.word	0x200037a8
 800c290:	20006d24 	.word	0x20006d24

0800c294 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c294:	b590      	push	{r4, r7, lr}
 800c296:	b08d      	sub	sp, #52	; 0x34
 800c298:	af04      	add	r7, sp, #16
 800c29a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d106      	bne.n	800c2b8 <tcp_process+0x24>
 800c2aa:	4ba5      	ldr	r3, [pc, #660]	; (800c540 <tcp_process+0x2ac>)
 800c2ac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c2b0:	49a4      	ldr	r1, [pc, #656]	; (800c544 <tcp_process+0x2b0>)
 800c2b2:	48a5      	ldr	r0, [pc, #660]	; (800c548 <tcp_process+0x2b4>)
 800c2b4:	f004 fba2 	bl	80109fc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c2b8:	4ba4      	ldr	r3, [pc, #656]	; (800c54c <tcp_process+0x2b8>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	f003 0304 	and.w	r3, r3, #4
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d04e      	beq.n	800c362 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	7d1b      	ldrb	r3, [r3, #20]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	d108      	bne.n	800c2de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2d0:	4b9f      	ldr	r3, [pc, #636]	; (800c550 <tcp_process+0x2bc>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d123      	bne.n	800c320 <tcp_process+0x8c>
        acceptable = 1;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	76fb      	strb	r3, [r7, #27]
 800c2dc:	e020      	b.n	800c320 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2e2:	4b9c      	ldr	r3, [pc, #624]	; (800c554 <tcp_process+0x2c0>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d102      	bne.n	800c2f0 <tcp_process+0x5c>
        acceptable = 1;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	76fb      	strb	r3, [r7, #27]
 800c2ee:	e017      	b.n	800c320 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c2f0:	4b98      	ldr	r3, [pc, #608]	; (800c554 <tcp_process+0x2c0>)
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	db10      	blt.n	800c320 <tcp_process+0x8c>
 800c2fe:	4b95      	ldr	r3, [pc, #596]	; (800c554 <tcp_process+0x2c0>)
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c306:	6879      	ldr	r1, [r7, #4]
 800c308:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c30a:	440b      	add	r3, r1
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	dc06      	bgt.n	800c320 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	8b5b      	ldrh	r3, [r3, #26]
 800c316:	f043 0302 	orr.w	r3, r3, #2
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c320:	7efb      	ldrb	r3, [r7, #27]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d01b      	beq.n	800c35e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	7d1b      	ldrb	r3, [r3, #20]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d106      	bne.n	800c33c <tcp_process+0xa8>
 800c32e:	4b84      	ldr	r3, [pc, #528]	; (800c540 <tcp_process+0x2ac>)
 800c330:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c334:	4988      	ldr	r1, [pc, #544]	; (800c558 <tcp_process+0x2c4>)
 800c336:	4884      	ldr	r0, [pc, #528]	; (800c548 <tcp_process+0x2b4>)
 800c338:	f004 fb60 	bl	80109fc <iprintf>
      recv_flags |= TF_RESET;
 800c33c:	4b87      	ldr	r3, [pc, #540]	; (800c55c <tcp_process+0x2c8>)
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	f043 0308 	orr.w	r3, r3, #8
 800c344:	b2da      	uxtb	r2, r3
 800c346:	4b85      	ldr	r3, [pc, #532]	; (800c55c <tcp_process+0x2c8>)
 800c348:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	8b5b      	ldrh	r3, [r3, #26]
 800c34e:	f023 0301 	bic.w	r3, r3, #1
 800c352:	b29a      	uxth	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c358:	f06f 030d 	mvn.w	r3, #13
 800c35c:	e37a      	b.n	800ca54 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	e378      	b.n	800ca54 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c362:	4b7a      	ldr	r3, [pc, #488]	; (800c54c <tcp_process+0x2b8>)
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	f003 0302 	and.w	r3, r3, #2
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d010      	beq.n	800c390 <tcp_process+0xfc>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	7d1b      	ldrb	r3, [r3, #20]
 800c372:	2b02      	cmp	r3, #2
 800c374:	d00c      	beq.n	800c390 <tcp_process+0xfc>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7d1b      	ldrb	r3, [r3, #20]
 800c37a:	2b03      	cmp	r3, #3
 800c37c:	d008      	beq.n	800c390 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	8b5b      	ldrh	r3, [r3, #26]
 800c382:	f043 0302 	orr.w	r3, r3, #2
 800c386:	b29a      	uxth	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	e361      	b.n	800ca54 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	8b5b      	ldrh	r3, [r3, #26]
 800c394:	f003 0310 	and.w	r3, r3, #16
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d103      	bne.n	800c3a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c39c:	4b70      	ldr	r3, [pc, #448]	; (800c560 <tcp_process+0x2cc>)
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f001 fc31 	bl	800dc1c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	7d1b      	ldrb	r3, [r3, #20]
 800c3be:	3b02      	subs	r3, #2
 800c3c0:	2b07      	cmp	r3, #7
 800c3c2:	f200 8337 	bhi.w	800ca34 <tcp_process+0x7a0>
 800c3c6:	a201      	add	r2, pc, #4	; (adr r2, 800c3cc <tcp_process+0x138>)
 800c3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3cc:	0800c3ed 	.word	0x0800c3ed
 800c3d0:	0800c61d 	.word	0x0800c61d
 800c3d4:	0800c795 	.word	0x0800c795
 800c3d8:	0800c7bf 	.word	0x0800c7bf
 800c3dc:	0800c8e3 	.word	0x0800c8e3
 800c3e0:	0800c795 	.word	0x0800c795
 800c3e4:	0800c96f 	.word	0x0800c96f
 800c3e8:	0800c9ff 	.word	0x0800c9ff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c3ec:	4b57      	ldr	r3, [pc, #348]	; (800c54c <tcp_process+0x2b8>)
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	f003 0310 	and.w	r3, r3, #16
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f000 80e4 	beq.w	800c5c2 <tcp_process+0x32e>
 800c3fa:	4b54      	ldr	r3, [pc, #336]	; (800c54c <tcp_process+0x2b8>)
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	f003 0302 	and.w	r3, r3, #2
 800c402:	2b00      	cmp	r3, #0
 800c404:	f000 80dd 	beq.w	800c5c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c40c:	1c5a      	adds	r2, r3, #1
 800c40e:	4b50      	ldr	r3, [pc, #320]	; (800c550 <tcp_process+0x2bc>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	429a      	cmp	r2, r3
 800c414:	f040 80d5 	bne.w	800c5c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c418:	4b4e      	ldr	r3, [pc, #312]	; (800c554 <tcp_process+0x2c0>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	1c5a      	adds	r2, r3, #1
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c42a:	4b49      	ldr	r3, [pc, #292]	; (800c550 <tcp_process+0x2bc>)
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c432:	4b4c      	ldr	r3, [pc, #304]	; (800c564 <tcp_process+0x2d0>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	89db      	ldrh	r3, [r3, #14]
 800c438:	b29a      	uxth	r2, r3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c44c:	4b41      	ldr	r3, [pc, #260]	; (800c554 <tcp_process+0x2c0>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	1e5a      	subs	r2, r3, #1
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2204      	movs	r2, #4
 800c45a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3304      	adds	r3, #4
 800c464:	4618      	mov	r0, r3
 800c466:	f7fa fcef 	bl	8006e48 <ip4_route>
 800c46a:	4601      	mov	r1, r0
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	3304      	adds	r3, #4
 800c470:	461a      	mov	r2, r3
 800c472:	4620      	mov	r0, r4
 800c474:	f7ff f892 	bl	800b59c <tcp_eff_send_mss_netif>
 800c478:	4603      	mov	r3, r0
 800c47a:	461a      	mov	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c484:	009a      	lsls	r2, r3, #2
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c48a:	005b      	lsls	r3, r3, #1
 800c48c:	f241 111c 	movw	r1, #4380	; 0x111c
 800c490:	428b      	cmp	r3, r1
 800c492:	bf38      	it	cc
 800c494:	460b      	movcc	r3, r1
 800c496:	429a      	cmp	r2, r3
 800c498:	d204      	bcs.n	800c4a4 <tcp_process+0x210>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	e00d      	b.n	800c4c0 <tcp_process+0x22c>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4a8:	005b      	lsls	r3, r3, #1
 800c4aa:	f241 121c 	movw	r2, #4380	; 0x111c
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d904      	bls.n	800c4bc <tcp_process+0x228>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4b6:	005b      	lsls	r3, r3, #1
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	e001      	b.n	800c4c0 <tcp_process+0x22c>
 800c4bc:	f241 131c 	movw	r3, #4380	; 0x111c
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d106      	bne.n	800c4de <tcp_process+0x24a>
 800c4d0:	4b1b      	ldr	r3, [pc, #108]	; (800c540 <tcp_process+0x2ac>)
 800c4d2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c4d6:	4924      	ldr	r1, [pc, #144]	; (800c568 <tcp_process+0x2d4>)
 800c4d8:	481b      	ldr	r0, [pc, #108]	; (800c548 <tcp_process+0x2b4>)
 800c4da:	f004 fa8f 	bl	80109fc <iprintf>
        --pcb->snd_queuelen;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d111      	bne.n	800c51e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d106      	bne.n	800c514 <tcp_process+0x280>
 800c506:	4b0e      	ldr	r3, [pc, #56]	; (800c540 <tcp_process+0x2ac>)
 800c508:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c50c:	4917      	ldr	r1, [pc, #92]	; (800c56c <tcp_process+0x2d8>)
 800c50e:	480e      	ldr	r0, [pc, #56]	; (800c548 <tcp_process+0x2b4>)
 800c510:	f004 fa74 	bl	80109fc <iprintf>
          pcb->unsent = rseg->next;
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	66da      	str	r2, [r3, #108]	; 0x6c
 800c51c:	e003      	b.n	800c526 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c526:	69f8      	ldr	r0, [r7, #28]
 800c528:	f7fe fc56 	bl	800add8 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c530:	2b00      	cmp	r3, #0
 800c532:	d11d      	bne.n	800c570 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c53a:	861a      	strh	r2, [r3, #48]	; 0x30
 800c53c:	e01f      	b.n	800c57e <tcp_process+0x2ea>
 800c53e:	bf00      	nop
 800c540:	080136ec 	.word	0x080136ec
 800c544:	08013924 	.word	0x08013924
 800c548:	08013738 	.word	0x08013738
 800c54c:	20000648 	.word	0x20000648
 800c550:	20000640 	.word	0x20000640
 800c554:	2000063c 	.word	0x2000063c
 800c558:	08013940 	.word	0x08013940
 800c55c:	20000649 	.word	0x20000649
 800c560:	20006d24 	.word	0x20006d24
 800c564:	2000062c 	.word	0x2000062c
 800c568:	08013960 	.word	0x08013960
 800c56c:	08013978 	.word	0x08013978
        } else {
          pcb->rtime = 0;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00a      	beq.n	800c59e <tcp_process+0x30a>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	6910      	ldr	r0, [r2, #16]
 800c592:	2200      	movs	r2, #0
 800c594:	6879      	ldr	r1, [r7, #4]
 800c596:	4798      	blx	r3
 800c598:	4603      	mov	r3, r0
 800c59a:	76bb      	strb	r3, [r7, #26]
 800c59c:	e001      	b.n	800c5a2 <tcp_process+0x30e>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c5a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c5a6:	f113 0f0d 	cmn.w	r3, #13
 800c5aa:	d102      	bne.n	800c5b2 <tcp_process+0x31e>
          return ERR_ABRT;
 800c5ac:	f06f 030c 	mvn.w	r3, #12
 800c5b0:	e250      	b.n	800ca54 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	8b5b      	ldrh	r3, [r3, #26]
 800c5b6:	f043 0302 	orr.w	r3, r3, #2
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c5c0:	e23a      	b.n	800ca38 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c5c2:	4b9d      	ldr	r3, [pc, #628]	; (800c838 <tcp_process+0x5a4>)
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	f003 0310 	and.w	r3, r3, #16
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f000 8234 	beq.w	800ca38 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5d0:	4b9a      	ldr	r3, [pc, #616]	; (800c83c <tcp_process+0x5a8>)
 800c5d2:	6819      	ldr	r1, [r3, #0]
 800c5d4:	4b9a      	ldr	r3, [pc, #616]	; (800c840 <tcp_process+0x5ac>)
 800c5d6:	881b      	ldrh	r3, [r3, #0]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4b9a      	ldr	r3, [pc, #616]	; (800c844 <tcp_process+0x5b0>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5e0:	4b99      	ldr	r3, [pc, #612]	; (800c848 <tcp_process+0x5b4>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5e4:	885b      	ldrh	r3, [r3, #2]
 800c5e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5e8:	4a97      	ldr	r2, [pc, #604]	; (800c848 <tcp_process+0x5b4>)
 800c5ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5ec:	8812      	ldrh	r2, [r2, #0]
 800c5ee:	b292      	uxth	r2, r2
 800c5f0:	9202      	str	r2, [sp, #8]
 800c5f2:	9301      	str	r3, [sp, #4]
 800c5f4:	4b95      	ldr	r3, [pc, #596]	; (800c84c <tcp_process+0x5b8>)
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	4b95      	ldr	r3, [pc, #596]	; (800c850 <tcp_process+0x5bc>)
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f003 f8fd 	bl	800f7fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c608:	2b05      	cmp	r3, #5
 800c60a:	f200 8215 	bhi.w	800ca38 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f002 feb7 	bl	800f388 <tcp_rexmit_rto>
      break;
 800c61a:	e20d      	b.n	800ca38 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c61c:	4b86      	ldr	r3, [pc, #536]	; (800c838 <tcp_process+0x5a4>)
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	f003 0310 	and.w	r3, r3, #16
 800c624:	2b00      	cmp	r3, #0
 800c626:	f000 80a1 	beq.w	800c76c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c62a:	4b84      	ldr	r3, [pc, #528]	; (800c83c <tcp_process+0x5a8>)
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c632:	1ad3      	subs	r3, r2, r3
 800c634:	3b01      	subs	r3, #1
 800c636:	2b00      	cmp	r3, #0
 800c638:	db7e      	blt.n	800c738 <tcp_process+0x4a4>
 800c63a:	4b80      	ldr	r3, [pc, #512]	; (800c83c <tcp_process+0x5a8>)
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	2b00      	cmp	r3, #0
 800c646:	dc77      	bgt.n	800c738 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2204      	movs	r2, #4
 800c64c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c652:	2b00      	cmp	r3, #0
 800c654:	d102      	bne.n	800c65c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c656:	23fa      	movs	r3, #250	; 0xfa
 800c658:	76bb      	strb	r3, [r7, #26]
 800c65a:	e01d      	b.n	800c698 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c660:	699b      	ldr	r3, [r3, #24]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d106      	bne.n	800c674 <tcp_process+0x3e0>
 800c666:	4b7b      	ldr	r3, [pc, #492]	; (800c854 <tcp_process+0x5c0>)
 800c668:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c66c:	497a      	ldr	r1, [pc, #488]	; (800c858 <tcp_process+0x5c4>)
 800c66e:	487b      	ldr	r0, [pc, #492]	; (800c85c <tcp_process+0x5c8>)
 800c670:	f004 f9c4 	bl	80109fc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c678:	699b      	ldr	r3, [r3, #24]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00a      	beq.n	800c694 <tcp_process+0x400>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c682:	699b      	ldr	r3, [r3, #24]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	6910      	ldr	r0, [r2, #16]
 800c688:	2200      	movs	r2, #0
 800c68a:	6879      	ldr	r1, [r7, #4]
 800c68c:	4798      	blx	r3
 800c68e:	4603      	mov	r3, r0
 800c690:	76bb      	strb	r3, [r7, #26]
 800c692:	e001      	b.n	800c698 <tcp_process+0x404>
 800c694:	23f0      	movs	r3, #240	; 0xf0
 800c696:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c698:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00a      	beq.n	800c6b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c6a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c6a4:	f113 0f0d 	cmn.w	r3, #13
 800c6a8:	d002      	beq.n	800c6b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7fd fcf0 	bl	800a090 <tcp_abort>
            }
            return ERR_ABRT;
 800c6b0:	f06f 030c 	mvn.w	r3, #12
 800c6b4:	e1ce      	b.n	800ca54 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 fae0 	bl	800cc7c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c6bc:	4b68      	ldr	r3, [pc, #416]	; (800c860 <tcp_process+0x5cc>)
 800c6be:	881b      	ldrh	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d005      	beq.n	800c6d0 <tcp_process+0x43c>
            recv_acked--;
 800c6c4:	4b66      	ldr	r3, [pc, #408]	; (800c860 <tcp_process+0x5cc>)
 800c6c6:	881b      	ldrh	r3, [r3, #0]
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	4b64      	ldr	r3, [pc, #400]	; (800c860 <tcp_process+0x5cc>)
 800c6ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6d4:	009a      	lsls	r2, r3, #2
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6da:	005b      	lsls	r3, r3, #1
 800c6dc:	f241 111c 	movw	r1, #4380	; 0x111c
 800c6e0:	428b      	cmp	r3, r1
 800c6e2:	bf38      	it	cc
 800c6e4:	460b      	movcc	r3, r1
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d204      	bcs.n	800c6f4 <tcp_process+0x460>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	e00d      	b.n	800c710 <tcp_process+0x47c>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6f8:	005b      	lsls	r3, r3, #1
 800c6fa:	f241 121c 	movw	r2, #4380	; 0x111c
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d904      	bls.n	800c70c <tcp_process+0x478>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	b29b      	uxth	r3, r3
 800c70a:	e001      	b.n	800c710 <tcp_process+0x47c>
 800c70c:	f241 131c 	movw	r3, #4380	; 0x111c
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c716:	4b53      	ldr	r3, [pc, #332]	; (800c864 <tcp_process+0x5d0>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	f003 0320 	and.w	r3, r3, #32
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d037      	beq.n	800c792 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	8b5b      	ldrh	r3, [r3, #26]
 800c726:	f043 0302 	orr.w	r3, r3, #2
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2207      	movs	r2, #7
 800c734:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c736:	e02c      	b.n	800c792 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c738:	4b40      	ldr	r3, [pc, #256]	; (800c83c <tcp_process+0x5a8>)
 800c73a:	6819      	ldr	r1, [r3, #0]
 800c73c:	4b40      	ldr	r3, [pc, #256]	; (800c840 <tcp_process+0x5ac>)
 800c73e:	881b      	ldrh	r3, [r3, #0]
 800c740:	461a      	mov	r2, r3
 800c742:	4b40      	ldr	r3, [pc, #256]	; (800c844 <tcp_process+0x5b0>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c748:	4b3f      	ldr	r3, [pc, #252]	; (800c848 <tcp_process+0x5b4>)
 800c74a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c74c:	885b      	ldrh	r3, [r3, #2]
 800c74e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c750:	4a3d      	ldr	r2, [pc, #244]	; (800c848 <tcp_process+0x5b4>)
 800c752:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c754:	8812      	ldrh	r2, [r2, #0]
 800c756:	b292      	uxth	r2, r2
 800c758:	9202      	str	r2, [sp, #8]
 800c75a:	9301      	str	r3, [sp, #4]
 800c75c:	4b3b      	ldr	r3, [pc, #236]	; (800c84c <tcp_process+0x5b8>)
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	4b3b      	ldr	r3, [pc, #236]	; (800c850 <tcp_process+0x5bc>)
 800c762:	4602      	mov	r2, r0
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f003 f849 	bl	800f7fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c76a:	e167      	b.n	800ca3c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c76c:	4b32      	ldr	r3, [pc, #200]	; (800c838 <tcp_process+0x5a4>)
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	f003 0302 	and.w	r3, r3, #2
 800c774:	2b00      	cmp	r3, #0
 800c776:	f000 8161 	beq.w	800ca3c <tcp_process+0x7a8>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77e:	1e5a      	subs	r2, r3, #1
 800c780:	4b30      	ldr	r3, [pc, #192]	; (800c844 <tcp_process+0x5b0>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	429a      	cmp	r2, r3
 800c786:	f040 8159 	bne.w	800ca3c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f002 fe1e 	bl	800f3cc <tcp_rexmit>
      break;
 800c790:	e154      	b.n	800ca3c <tcp_process+0x7a8>
 800c792:	e153      	b.n	800ca3c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 fa71 	bl	800cc7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c79a:	4b32      	ldr	r3, [pc, #200]	; (800c864 <tcp_process+0x5d0>)
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	f003 0320 	and.w	r3, r3, #32
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f000 814c 	beq.w	800ca40 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	8b5b      	ldrh	r3, [r3, #26]
 800c7ac:	f043 0302 	orr.w	r3, r3, #2
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2207      	movs	r2, #7
 800c7ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c7bc:	e140      	b.n	800ca40 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 fa5c 	bl	800cc7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c7c4:	4b27      	ldr	r3, [pc, #156]	; (800c864 <tcp_process+0x5d0>)
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	f003 0320 	and.w	r3, r3, #32
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d071      	beq.n	800c8b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c7d0:	4b19      	ldr	r3, [pc, #100]	; (800c838 <tcp_process+0x5a4>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	f003 0310 	and.w	r3, r3, #16
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d060      	beq.n	800c89e <tcp_process+0x60a>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c7e0:	4b16      	ldr	r3, [pc, #88]	; (800c83c <tcp_process+0x5a8>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d15a      	bne.n	800c89e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d156      	bne.n	800c89e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	8b5b      	ldrh	r3, [r3, #26]
 800c7f4:	f043 0302 	orr.w	r3, r3, #2
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7fe fdc2 	bl	800b388 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c804:	4b18      	ldr	r3, [pc, #96]	; (800c868 <tcp_process+0x5d4>)
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d105      	bne.n	800c81a <tcp_process+0x586>
 800c80e:	4b16      	ldr	r3, [pc, #88]	; (800c868 <tcp_process+0x5d4>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	4a14      	ldr	r2, [pc, #80]	; (800c868 <tcp_process+0x5d4>)
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	e02e      	b.n	800c878 <tcp_process+0x5e4>
 800c81a:	4b13      	ldr	r3, [pc, #76]	; (800c868 <tcp_process+0x5d4>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	617b      	str	r3, [r7, #20]
 800c820:	e027      	b.n	800c872 <tcp_process+0x5de>
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	68da      	ldr	r2, [r3, #12]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d11f      	bne.n	800c86c <tcp_process+0x5d8>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	68da      	ldr	r2, [r3, #12]
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	60da      	str	r2, [r3, #12]
 800c834:	e020      	b.n	800c878 <tcp_process+0x5e4>
 800c836:	bf00      	nop
 800c838:	20000648 	.word	0x20000648
 800c83c:	20000640 	.word	0x20000640
 800c840:	20000646 	.word	0x20000646
 800c844:	2000063c 	.word	0x2000063c
 800c848:	2000062c 	.word	0x2000062c
 800c84c:	200037a4 	.word	0x200037a4
 800c850:	200037a8 	.word	0x200037a8
 800c854:	080136ec 	.word	0x080136ec
 800c858:	0801398c 	.word	0x0801398c
 800c85c:	08013738 	.word	0x08013738
 800c860:	20000644 	.word	0x20000644
 800c864:	20000649 	.word	0x20000649
 800c868:	20006d20 	.word	0x20006d20
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	617b      	str	r3, [r7, #20]
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1d4      	bne.n	800c822 <tcp_process+0x58e>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	60da      	str	r2, [r3, #12]
 800c87e:	4b77      	ldr	r3, [pc, #476]	; (800ca5c <tcp_process+0x7c8>)
 800c880:	2201      	movs	r2, #1
 800c882:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	220a      	movs	r2, #10
 800c888:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c88a:	4b75      	ldr	r3, [pc, #468]	; (800ca60 <tcp_process+0x7cc>)
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	60da      	str	r2, [r3, #12]
 800c892:	4a73      	ldr	r2, [pc, #460]	; (800ca60 <tcp_process+0x7cc>)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6013      	str	r3, [r2, #0]
 800c898:	f003 f974 	bl	800fb84 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c89c:	e0d2      	b.n	800ca44 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	8b5b      	ldrh	r3, [r3, #26]
 800c8a2:	f043 0302 	orr.w	r3, r3, #2
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2208      	movs	r2, #8
 800c8b0:	751a      	strb	r2, [r3, #20]
      break;
 800c8b2:	e0c7      	b.n	800ca44 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c8b4:	4b6b      	ldr	r3, [pc, #428]	; (800ca64 <tcp_process+0x7d0>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	f003 0310 	and.w	r3, r3, #16
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f000 80c1 	beq.w	800ca44 <tcp_process+0x7b0>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8c6:	4b68      	ldr	r3, [pc, #416]	; (800ca68 <tcp_process+0x7d4>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	f040 80ba 	bne.w	800ca44 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f040 80b5 	bne.w	800ca44 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2206      	movs	r2, #6
 800c8de:	751a      	strb	r2, [r3, #20]
      break;
 800c8e0:	e0b0      	b.n	800ca44 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f9ca 	bl	800cc7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c8e8:	4b60      	ldr	r3, [pc, #384]	; (800ca6c <tcp_process+0x7d8>)
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	f003 0320 	and.w	r3, r3, #32
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f000 80a9 	beq.w	800ca48 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	8b5b      	ldrh	r3, [r3, #26]
 800c8fa:	f043 0302 	orr.w	r3, r3, #2
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f7fe fd3f 	bl	800b388 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c90a:	4b59      	ldr	r3, [pc, #356]	; (800ca70 <tcp_process+0x7dc>)
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	429a      	cmp	r2, r3
 800c912:	d105      	bne.n	800c920 <tcp_process+0x68c>
 800c914:	4b56      	ldr	r3, [pc, #344]	; (800ca70 <tcp_process+0x7dc>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	4a55      	ldr	r2, [pc, #340]	; (800ca70 <tcp_process+0x7dc>)
 800c91c:	6013      	str	r3, [r2, #0]
 800c91e:	e013      	b.n	800c948 <tcp_process+0x6b4>
 800c920:	4b53      	ldr	r3, [pc, #332]	; (800ca70 <tcp_process+0x7dc>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	613b      	str	r3, [r7, #16]
 800c926:	e00c      	b.n	800c942 <tcp_process+0x6ae>
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	68da      	ldr	r2, [r3, #12]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d104      	bne.n	800c93c <tcp_process+0x6a8>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68da      	ldr	r2, [r3, #12]
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	60da      	str	r2, [r3, #12]
 800c93a:	e005      	b.n	800c948 <tcp_process+0x6b4>
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	613b      	str	r3, [r7, #16]
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d1ef      	bne.n	800c928 <tcp_process+0x694>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	60da      	str	r2, [r3, #12]
 800c94e:	4b43      	ldr	r3, [pc, #268]	; (800ca5c <tcp_process+0x7c8>)
 800c950:	2201      	movs	r2, #1
 800c952:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	220a      	movs	r2, #10
 800c958:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c95a:	4b41      	ldr	r3, [pc, #260]	; (800ca60 <tcp_process+0x7cc>)
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	60da      	str	r2, [r3, #12]
 800c962:	4a3f      	ldr	r2, [pc, #252]	; (800ca60 <tcp_process+0x7cc>)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6013      	str	r3, [r2, #0]
 800c968:	f003 f90c 	bl	800fb84 <tcp_timer_needed>
      }
      break;
 800c96c:	e06c      	b.n	800ca48 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f984 	bl	800cc7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c974:	4b3b      	ldr	r3, [pc, #236]	; (800ca64 <tcp_process+0x7d0>)
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	f003 0310 	and.w	r3, r3, #16
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d065      	beq.n	800ca4c <tcp_process+0x7b8>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c984:	4b38      	ldr	r3, [pc, #224]	; (800ca68 <tcp_process+0x7d4>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d15f      	bne.n	800ca4c <tcp_process+0x7b8>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c990:	2b00      	cmp	r3, #0
 800c992:	d15b      	bne.n	800ca4c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f7fe fcf7 	bl	800b388 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c99a:	4b35      	ldr	r3, [pc, #212]	; (800ca70 <tcp_process+0x7dc>)
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d105      	bne.n	800c9b0 <tcp_process+0x71c>
 800c9a4:	4b32      	ldr	r3, [pc, #200]	; (800ca70 <tcp_process+0x7dc>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	4a31      	ldr	r2, [pc, #196]	; (800ca70 <tcp_process+0x7dc>)
 800c9ac:	6013      	str	r3, [r2, #0]
 800c9ae:	e013      	b.n	800c9d8 <tcp_process+0x744>
 800c9b0:	4b2f      	ldr	r3, [pc, #188]	; (800ca70 <tcp_process+0x7dc>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	60fb      	str	r3, [r7, #12]
 800c9b6:	e00c      	b.n	800c9d2 <tcp_process+0x73e>
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	68da      	ldr	r2, [r3, #12]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d104      	bne.n	800c9cc <tcp_process+0x738>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	68da      	ldr	r2, [r3, #12]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	60da      	str	r2, [r3, #12]
 800c9ca:	e005      	b.n	800c9d8 <tcp_process+0x744>
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	60fb      	str	r3, [r7, #12]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1ef      	bne.n	800c9b8 <tcp_process+0x724>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	60da      	str	r2, [r3, #12]
 800c9de:	4b1f      	ldr	r3, [pc, #124]	; (800ca5c <tcp_process+0x7c8>)
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	220a      	movs	r2, #10
 800c9e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c9ea:	4b1d      	ldr	r3, [pc, #116]	; (800ca60 <tcp_process+0x7cc>)
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	60da      	str	r2, [r3, #12]
 800c9f2:	4a1b      	ldr	r2, [pc, #108]	; (800ca60 <tcp_process+0x7cc>)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6013      	str	r3, [r2, #0]
 800c9f8:	f003 f8c4 	bl	800fb84 <tcp_timer_needed>
      }
      break;
 800c9fc:	e026      	b.n	800ca4c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f93c 	bl	800cc7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ca04:	4b17      	ldr	r3, [pc, #92]	; (800ca64 <tcp_process+0x7d0>)
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	f003 0310 	and.w	r3, r3, #16
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d01f      	beq.n	800ca50 <tcp_process+0x7bc>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca14:	4b14      	ldr	r3, [pc, #80]	; (800ca68 <tcp_process+0x7d4>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d119      	bne.n	800ca50 <tcp_process+0x7bc>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d115      	bne.n	800ca50 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ca24:	4b11      	ldr	r3, [pc, #68]	; (800ca6c <tcp_process+0x7d8>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	f043 0310 	orr.w	r3, r3, #16
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	4b0f      	ldr	r3, [pc, #60]	; (800ca6c <tcp_process+0x7d8>)
 800ca30:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ca32:	e00d      	b.n	800ca50 <tcp_process+0x7bc>
    default:
      break;
 800ca34:	bf00      	nop
 800ca36:	e00c      	b.n	800ca52 <tcp_process+0x7be>
      break;
 800ca38:	bf00      	nop
 800ca3a:	e00a      	b.n	800ca52 <tcp_process+0x7be>
      break;
 800ca3c:	bf00      	nop
 800ca3e:	e008      	b.n	800ca52 <tcp_process+0x7be>
      break;
 800ca40:	bf00      	nop
 800ca42:	e006      	b.n	800ca52 <tcp_process+0x7be>
      break;
 800ca44:	bf00      	nop
 800ca46:	e004      	b.n	800ca52 <tcp_process+0x7be>
      break;
 800ca48:	bf00      	nop
 800ca4a:	e002      	b.n	800ca52 <tcp_process+0x7be>
      break;
 800ca4c:	bf00      	nop
 800ca4e:	e000      	b.n	800ca52 <tcp_process+0x7be>
      break;
 800ca50:	bf00      	nop
  }
  return ERR_OK;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3724      	adds	r7, #36	; 0x24
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd90      	pop	{r4, r7, pc}
 800ca5c:	20006d1c 	.word	0x20006d1c
 800ca60:	20006d30 	.word	0x20006d30
 800ca64:	20000648 	.word	0x20000648
 800ca68:	20000640 	.word	0x20000640
 800ca6c:	20000649 	.word	0x20000649
 800ca70:	20006d20 	.word	0x20006d20

0800ca74 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ca74:	b5b0      	push	{r4, r5, r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d106      	bne.n	800ca92 <tcp_oos_insert_segment+0x1e>
 800ca84:	4b3b      	ldr	r3, [pc, #236]	; (800cb74 <tcp_oos_insert_segment+0x100>)
 800ca86:	f240 421f 	movw	r2, #1055	; 0x41f
 800ca8a:	493b      	ldr	r1, [pc, #236]	; (800cb78 <tcp_oos_insert_segment+0x104>)
 800ca8c:	483b      	ldr	r0, [pc, #236]	; (800cb7c <tcp_oos_insert_segment+0x108>)
 800ca8e:	f003 ffb5 	bl	80109fc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	899b      	ldrh	r3, [r3, #12]
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7f7 fa26 	bl	8003eec <lwip_htons>
 800caa0:	4603      	mov	r3, r0
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	f003 0301 	and.w	r3, r3, #1
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d027      	beq.n	800cafc <tcp_oos_insert_segment+0x88>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800caac:	6838      	ldr	r0, [r7, #0]
 800caae:	f7fe f97f 	bl	800adb0 <tcp_segs_free>
    next = NULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	603b      	str	r3, [r7, #0]
 800cab6:	e055      	b.n	800cb64 <tcp_oos_insert_segment+0xf0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	899b      	ldrh	r3, [r3, #12]
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7f7 fa13 	bl	8003eec <lwip_htons>
 800cac6:	4603      	mov	r3, r0
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d00c      	beq.n	800caec <tcp_oos_insert_segment+0x78>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	68dc      	ldr	r4, [r3, #12]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	899b      	ldrh	r3, [r3, #12]
 800cadc:	b29d      	uxth	r5, r3
 800cade:	2001      	movs	r0, #1
 800cae0:	f7f7 fa04 	bl	8003eec <lwip_htons>
 800cae4:	4603      	mov	r3, r0
 800cae6:	432b      	orrs	r3, r5
 800cae8:	b29b      	uxth	r3, r3
 800caea:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f7fe f96e 	bl	800add8 <tcp_seg_free>
    while (next &&
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00e      	beq.n	800cb20 <tcp_oos_insert_segment+0xac>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	891b      	ldrh	r3, [r3, #8]
 800cb06:	461a      	mov	r2, r3
 800cb08:	4b1d      	ldr	r3, [pc, #116]	; (800cb80 <tcp_oos_insert_segment+0x10c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	441a      	add	r2, r3
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	6839      	ldr	r1, [r7, #0]
 800cb16:	8909      	ldrh	r1, [r1, #8]
 800cb18:	440b      	add	r3, r1
 800cb1a:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	dacb      	bge.n	800cab8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d01e      	beq.n	800cb64 <tcp_oos_insert_segment+0xf0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	891b      	ldrh	r3, [r3, #8]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	4b14      	ldr	r3, [pc, #80]	; (800cb80 <tcp_oos_insert_segment+0x10c>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	441a      	add	r2, r3
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	dd12      	ble.n	800cb64 <tcp_oos_insert_segment+0xf0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	4b0e      	ldr	r3, [pc, #56]	; (800cb80 <tcp_oos_insert_segment+0x10c>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	b29a      	uxth	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	685a      	ldr	r2, [r3, #4]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	891b      	ldrh	r3, [r3, #8]
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	4610      	mov	r0, r2
 800cb60:	f7fc fb7e 	bl	8009260 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	683a      	ldr	r2, [r7, #0]
 800cb68:	601a      	str	r2, [r3, #0]
}
 800cb6a:	bf00      	nop
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bdb0      	pop	{r4, r5, r7, pc}
 800cb72:	bf00      	nop
 800cb74:	080136ec 	.word	0x080136ec
 800cb78:	080139ac 	.word	0x080139ac
 800cb7c:	08013738 	.word	0x08013738
 800cb80:	2000063c 	.word	0x2000063c

0800cb84 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cb84:	b5b0      	push	{r4, r5, r7, lr}
 800cb86:	b086      	sub	sp, #24
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
 800cb90:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cb92:	e03e      	b.n	800cc12 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fc fd6c 	bl	8009680 <pbuf_clen>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cbb2:	8a7a      	ldrh	r2, [r7, #18]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d906      	bls.n	800cbc6 <tcp_free_acked_segments+0x42>
 800cbb8:	4b2a      	ldr	r3, [pc, #168]	; (800cc64 <tcp_free_acked_segments+0xe0>)
 800cbba:	f240 4257 	movw	r2, #1111	; 0x457
 800cbbe:	492a      	ldr	r1, [pc, #168]	; (800cc68 <tcp_free_acked_segments+0xe4>)
 800cbc0:	482a      	ldr	r0, [pc, #168]	; (800cc6c <tcp_free_acked_segments+0xe8>)
 800cbc2:	f003 ff1b 	bl	80109fc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800cbcc:	8a7b      	ldrh	r3, [r7, #18]
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	891a      	ldrh	r2, [r3, #8]
 800cbdc:	4b24      	ldr	r3, [pc, #144]	; (800cc70 <tcp_free_acked_segments+0xec>)
 800cbde:	881b      	ldrh	r3, [r3, #0]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	4b22      	ldr	r3, [pc, #136]	; (800cc70 <tcp_free_acked_segments+0xec>)
 800cbe6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cbe8:	6978      	ldr	r0, [r7, #20]
 800cbea:	f7fe f8f5 	bl	800add8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00c      	beq.n	800cc12 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d109      	bne.n	800cc12 <tcp_free_acked_segments+0x8e>
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d106      	bne.n	800cc12 <tcp_free_acked_segments+0x8e>
 800cc04:	4b17      	ldr	r3, [pc, #92]	; (800cc64 <tcp_free_acked_segments+0xe0>)
 800cc06:	f240 4262 	movw	r2, #1122	; 0x462
 800cc0a:	491a      	ldr	r1, [pc, #104]	; (800cc74 <tcp_free_acked_segments+0xf0>)
 800cc0c:	4817      	ldr	r0, [pc, #92]	; (800cc6c <tcp_free_acked_segments+0xe8>)
 800cc0e:	f003 fef5 	bl	80109fc <iprintf>
  while (seg_list != NULL &&
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d020      	beq.n	800cc5a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7f7 f979 	bl	8003f16 <lwip_htonl>
 800cc24:	4604      	mov	r4, r0
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	891b      	ldrh	r3, [r3, #8]
 800cc2a:	461d      	mov	r5, r3
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	899b      	ldrh	r3, [r3, #12]
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7f7 f959 	bl	8003eec <lwip_htons>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	f003 0303 	and.w	r3, r3, #3
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d001      	beq.n	800cc4a <tcp_free_acked_segments+0xc6>
 800cc46:	2301      	movs	r3, #1
 800cc48:	e000      	b.n	800cc4c <tcp_free_acked_segments+0xc8>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	442b      	add	r3, r5
 800cc4e:	18e2      	adds	r2, r4, r3
 800cc50:	4b09      	ldr	r3, [pc, #36]	; (800cc78 <tcp_free_acked_segments+0xf4>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	dd9c      	ble.n	800cb94 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800cc5a:	68bb      	ldr	r3, [r7, #8]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3718      	adds	r7, #24
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bdb0      	pop	{r4, r5, r7, pc}
 800cc64:	080136ec 	.word	0x080136ec
 800cc68:	080139d4 	.word	0x080139d4
 800cc6c:	08013738 	.word	0x08013738
 800cc70:	20000644 	.word	0x20000644
 800cc74:	080139fc 	.word	0x080139fc
 800cc78:	20000640 	.word	0x20000640

0800cc7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800cc7c:	b5b0      	push	{r4, r5, r7, lr}
 800cc7e:	b094      	sub	sp, #80	; 0x50
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d106      	bne.n	800cc9c <tcp_receive+0x20>
 800cc8e:	4ba6      	ldr	r3, [pc, #664]	; (800cf28 <tcp_receive+0x2ac>)
 800cc90:	f240 427b 	movw	r2, #1147	; 0x47b
 800cc94:	49a5      	ldr	r1, [pc, #660]	; (800cf2c <tcp_receive+0x2b0>)
 800cc96:	48a6      	ldr	r0, [pc, #664]	; (800cf30 <tcp_receive+0x2b4>)
 800cc98:	f003 feb0 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	7d1b      	ldrb	r3, [r3, #20]
 800cca0:	2b03      	cmp	r3, #3
 800cca2:	d806      	bhi.n	800ccb2 <tcp_receive+0x36>
 800cca4:	4ba0      	ldr	r3, [pc, #640]	; (800cf28 <tcp_receive+0x2ac>)
 800cca6:	f240 427c 	movw	r2, #1148	; 0x47c
 800ccaa:	49a2      	ldr	r1, [pc, #648]	; (800cf34 <tcp_receive+0x2b8>)
 800ccac:	48a0      	ldr	r0, [pc, #640]	; (800cf30 <tcp_receive+0x2b4>)
 800ccae:	f003 fea5 	bl	80109fc <iprintf>

  if (flags & TCP_ACK) {
 800ccb2:	4ba1      	ldr	r3, [pc, #644]	; (800cf38 <tcp_receive+0x2bc>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	f003 0310 	and.w	r3, r3, #16
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f000 8269 	beq.w	800d192 <tcp_receive+0x516>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cccc:	4413      	add	r3, r2
 800ccce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccd4:	4b99      	ldr	r3, [pc, #612]	; (800cf3c <tcp_receive+0x2c0>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	1ad3      	subs	r3, r2, r3
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	db1b      	blt.n	800cd16 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cce2:	4b96      	ldr	r3, [pc, #600]	; (800cf3c <tcp_receive+0x2c0>)
 800cce4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d106      	bne.n	800ccf8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ccee:	4b94      	ldr	r3, [pc, #592]	; (800cf40 <tcp_receive+0x2c4>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	db0e      	blt.n	800cd16 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ccfc:	4b90      	ldr	r3, [pc, #576]	; (800cf40 <tcp_receive+0x2c4>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d125      	bne.n	800cd50 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cd04:	4b8f      	ldr	r3, [pc, #572]	; (800cf44 <tcp_receive+0x2c8>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	89db      	ldrh	r3, [r3, #14]
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d91c      	bls.n	800cd50 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cd16:	4b8b      	ldr	r3, [pc, #556]	; (800cf44 <tcp_receive+0x2c8>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	89db      	ldrh	r3, [r3, #14]
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d205      	bcs.n	800cd40 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800cd40:	4b7e      	ldr	r3, [pc, #504]	; (800cf3c <tcp_receive+0x2c0>)
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800cd48:	4b7d      	ldr	r3, [pc, #500]	; (800cf40 <tcp_receive+0x2c4>)
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cd50:	4b7b      	ldr	r3, [pc, #492]	; (800cf40 <tcp_receive+0x2c4>)
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	dc5d      	bgt.n	800ce1a <tcp_receive+0x19e>
      /* Clause 2 */
      if (tcplen == 0) {
 800cd5e:	4b7a      	ldr	r3, [pc, #488]	; (800cf48 <tcp_receive+0x2cc>)
 800cd60:	881b      	ldrh	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d150      	bne.n	800ce08 <tcp_receive+0x18c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800cd70:	441a      	add	r2, r3
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d147      	bne.n	800ce08 <tcp_receive+0x18c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	db42      	blt.n	800ce08 <tcp_receive+0x18c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd86:	4b6e      	ldr	r3, [pc, #440]	; (800cf40 <tcp_receive+0x2c4>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d13c      	bne.n	800ce08 <tcp_receive+0x18c>
              found_dupack = 1;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cd98:	3301      	adds	r3, #1
 800cd9a:	b2da      	uxtb	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d907      	bls.n	800cdb6 <tcp_receive+0x13a>
                ++pcb->dupacks;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cdac:	3301      	adds	r3, #1
 800cdae:	b2da      	uxtb	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cdbc:	2b03      	cmp	r3, #3
 800cdbe:	d91b      	bls.n	800cdf8 <tcp_receive+0x17c>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdca:	4413      	add	r3, r2
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d30a      	bcc.n	800cdee <tcp_receive+0x172>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cde2:	4413      	add	r3, r2
 800cde4:	b29a      	uxth	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cdec:	e004      	b.n	800cdf8 <tcp_receive+0x17c>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdf4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d902      	bls.n	800ce08 <tcp_receive+0x18c>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f002 fb4e 	bl	800f4a4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ce08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f040 8161 	bne.w	800d0d2 <tcp_receive+0x456>
        pcb->dupacks = 0;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ce18:	e15b      	b.n	800d0d2 <tcp_receive+0x456>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ce1a:	4b49      	ldr	r3, [pc, #292]	; (800cf40 <tcp_receive+0x2c4>)
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	3b01      	subs	r3, #1
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	f2c0 814e 	blt.w	800d0c8 <tcp_receive+0x44c>
 800ce2c:	4b44      	ldr	r3, [pc, #272]	; (800cf40 <tcp_receive+0x2c4>)
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f300 8146 	bgt.w	800d0c8 <tcp_receive+0x44c>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	8b5b      	ldrh	r3, [r3, #26]
 800ce40:	f003 0304 	and.w	r3, r3, #4
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d010      	beq.n	800ce6a <tcp_receive+0x1ee>
        tcp_clear_flags(pcb, TF_INFR);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	8b5b      	ldrh	r3, [r3, #26]
 800ce4c:	f023 0304 	bic.w	r3, r3, #4
 800ce50:	b29a      	uxth	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ce78:	10db      	asrs	r3, r3, #3
 800ce7a:	b21b      	sxth	r3, r3
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	4413      	add	r3, r2
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	b21a      	sxth	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ce92:	4b2b      	ldr	r3, [pc, #172]	; (800cf40 <tcp_receive+0x2c4>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	1ad3      	subs	r3, r2, r3
 800cea0:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ceaa:	4b25      	ldr	r3, [pc, #148]	; (800cf40 <tcp_receive+0x2c4>)
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	7d1b      	ldrb	r3, [r3, #20]
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	f240 8097 	bls.w	800cfea <tcp_receive+0x36e>
        if (pcb->cwnd < pcb->ssthresh) {
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d245      	bcs.n	800cf58 <tcp_receive+0x2dc>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	8b5b      	ldrh	r3, [r3, #26]
 800ced0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <tcp_receive+0x260>
 800ced8:	2301      	movs	r3, #1
 800ceda:	e000      	b.n	800cede <tcp_receive+0x262>
 800cedc:	2302      	movs	r3, #2
 800cede:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cee2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cee6:	b29a      	uxth	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ceec:	fb12 f303 	smulbb	r3, r2, r3
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cef4:	4293      	cmp	r3, r2
 800cef6:	bf28      	it	cs
 800cef8:	4613      	movcs	r3, r2
 800cefa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cf04:	4413      	add	r3, r2
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d31c      	bcc.n	800cf4c <tcp_receive+0x2d0>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cf1a:	4413      	add	r3, r2
 800cf1c:	b29a      	uxth	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cf24:	e061      	b.n	800cfea <tcp_receive+0x36e>
 800cf26:	bf00      	nop
 800cf28:	080136ec 	.word	0x080136ec
 800cf2c:	08013a1c 	.word	0x08013a1c
 800cf30:	08013738 	.word	0x08013738
 800cf34:	08013a38 	.word	0x08013a38
 800cf38:	20000648 	.word	0x20000648
 800cf3c:	2000063c 	.word	0x2000063c
 800cf40:	20000640 	.word	0x20000640
 800cf44:	2000062c 	.word	0x2000062c
 800cf48:	20000646 	.word	0x20000646
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cf56:	e048      	b.n	800cfea <tcp_receive+0x36e>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cf5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf60:	4413      	add	r3, r2
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d309      	bcc.n	800cf82 <tcp_receive+0x306>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cf74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf76:	4413      	add	r3, r2
 800cf78:	b29a      	uxth	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cf80:	e004      	b.n	800cf8c <tcp_receive+0x310>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d326      	bcc.n	800cfea <tcp_receive+0x36e>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cfa8:	1ad3      	subs	r3, r2, r3
 800cfaa:	b29a      	uxth	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfbc:	4413      	add	r3, r2
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d30a      	bcc.n	800cfe0 <tcp_receive+0x364>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfd4:	4413      	add	r3, r2
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cfde:	e004      	b.n	800cfea <tcp_receive+0x36e>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfe6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cff2:	4a98      	ldr	r2, [pc, #608]	; (800d254 <tcp_receive+0x5d8>)
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7ff fdc5 	bl	800cb84 <tcp_free_acked_segments>
 800cffa:	4602      	mov	r2, r0
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d008:	4a93      	ldr	r2, [pc, #588]	; (800d258 <tcp_receive+0x5dc>)
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7ff fdba 	bl	800cb84 <tcp_free_acked_segments>
 800d010:	4602      	mov	r2, r0
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d104      	bne.n	800d028 <tcp_receive+0x3ac>
        pcb->rtime = -1;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d024:	861a      	strh	r2, [r3, #48]	; 0x30
 800d026:	e002      	b.n	800d02e <tcp_receive+0x3b2>
      } else {
        pcb->rtime = 0;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d103      	bne.n	800d044 <tcp_receive+0x3c8>
        pcb->unsent_oversize = 0;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d04a:	4b84      	ldr	r3, [pc, #528]	; (800d25c <tcp_receive+0x5e0>)
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	4413      	add	r3, r2
 800d050:	b29a      	uxth	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	8b5b      	ldrh	r3, [r3, #26]
 800d05c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d060:	2b00      	cmp	r3, #0
 800d062:	d035      	beq.n	800d0d0 <tcp_receive+0x454>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d118      	bne.n	800d09e <tcp_receive+0x422>
          if ((pcb->unsent == NULL) ||
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00c      	beq.n	800d08e <tcp_receive+0x412>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	4618      	mov	r0, r3
 800d082:	f7f6 ff48 	bl	8003f16 <lwip_htonl>
 800d086:	4603      	mov	r3, r0
 800d088:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	dc20      	bgt.n	800d0d0 <tcp_receive+0x454>
            tcp_clear_flags(pcb, TF_RTO);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	8b5b      	ldrh	r3, [r3, #26]
 800d092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d096:	b29a      	uxth	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d09c:	e018      	b.n	800d0d0 <tcp_receive+0x454>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7f6 ff33 	bl	8003f16 <lwip_htonl>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	1ae3      	subs	r3, r4, r3
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	dc0b      	bgt.n	800d0d0 <tcp_receive+0x454>
          tcp_clear_flags(pcb, TF_RTO);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	8b5b      	ldrh	r3, [r3, #26]
 800d0bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d0c6:	e003      	b.n	800d0d0 <tcp_receive+0x454>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f002 fbe9 	bl	800f8a0 <tcp_send_empty_ack>
 800d0ce:	e000      	b.n	800d0d2 <tcp_receive+0x456>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d0d0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d05b      	beq.n	800d192 <tcp_receive+0x516>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0de:	4b60      	ldr	r3, [pc, #384]	; (800d260 <tcp_receive+0x5e4>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	1ad3      	subs	r3, r2, r3
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	da54      	bge.n	800d192 <tcp_receive+0x516>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d0e8:	4b5e      	ldr	r3, [pc, #376]	; (800d264 <tcp_receive+0x5e8>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d0fc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d106:	10db      	asrs	r3, r3, #3
 800d108:	b21b      	sxth	r3, r3
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	1ad3      	subs	r3, r2, r3
 800d10e:	b29b      	uxth	r3, r3
 800d110:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d120:	4413      	add	r3, r2
 800d122:	b29b      	uxth	r3, r3
 800d124:	b21a      	sxth	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d12a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d12e:	2b00      	cmp	r3, #0
 800d130:	da05      	bge.n	800d13e <tcp_receive+0x4c2>
        m = (s16_t) - m;
 800d132:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d136:	425b      	negs	r3, r3
 800d138:	b29b      	uxth	r3, r3
 800d13a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d13e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d148:	109b      	asrs	r3, r3, #2
 800d14a:	b21b      	sxth	r3, r3
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	1ad3      	subs	r3, r2, r3
 800d150:	b29b      	uxth	r3, r3
 800d152:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d15c:	b29a      	uxth	r2, r3
 800d15e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d162:	4413      	add	r3, r2
 800d164:	b29b      	uxth	r3, r3
 800d166:	b21a      	sxth	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d172:	10db      	asrs	r3, r3, #3
 800d174:	b21b      	sxth	r3, r3
 800d176:	b29a      	uxth	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d17e:	b29b      	uxth	r3, r3
 800d180:	4413      	add	r3, r2
 800d182:	b29b      	uxth	r3, r3
 800d184:	b21a      	sxth	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d192:	4b35      	ldr	r3, [pc, #212]	; (800d268 <tcp_receive+0x5ec>)
 800d194:	881b      	ldrh	r3, [r3, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	f000 84df 	beq.w	800db5a <tcp_receive+0xede>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	7d1b      	ldrb	r3, [r3, #20]
 800d1a0:	2b06      	cmp	r3, #6
 800d1a2:	f200 84da 	bhi.w	800db5a <tcp_receive+0xede>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1aa:	4b30      	ldr	r3, [pc, #192]	; (800d26c <tcp_receive+0x5f0>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	1ad3      	subs	r3, r2, r3
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	f2c0 808e 	blt.w	800d2d4 <tcp_receive+0x658>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1bc:	4b2a      	ldr	r3, [pc, #168]	; (800d268 <tcp_receive+0x5ec>)
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	4b2a      	ldr	r3, [pc, #168]	; (800d26c <tcp_receive+0x5f0>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	440b      	add	r3, r1
 800d1c8:	1ad3      	subs	r3, r2, r3
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f300 8081 	bgt.w	800d2d4 <tcp_receive+0x658>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d1d2:	4b27      	ldr	r3, [pc, #156]	; (800d270 <tcp_receive+0x5f4>)
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1dc:	4b23      	ldr	r3, [pc, #140]	; (800d26c <tcp_receive+0x5f0>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	1ad3      	subs	r3, r2, r3
 800d1e2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d1e4:	4b22      	ldr	r3, [pc, #136]	; (800d270 <tcp_receive+0x5f4>)
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d106      	bne.n	800d1fa <tcp_receive+0x57e>
 800d1ec:	4b21      	ldr	r3, [pc, #132]	; (800d274 <tcp_receive+0x5f8>)
 800d1ee:	f240 5294 	movw	r2, #1428	; 0x594
 800d1f2:	4921      	ldr	r1, [pc, #132]	; (800d278 <tcp_receive+0x5fc>)
 800d1f4:	4821      	ldr	r0, [pc, #132]	; (800d27c <tcp_receive+0x600>)
 800d1f6:	f003 fc01 	bl	80109fc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d200:	4293      	cmp	r3, r2
 800d202:	d906      	bls.n	800d212 <tcp_receive+0x596>
 800d204:	4b1b      	ldr	r3, [pc, #108]	; (800d274 <tcp_receive+0x5f8>)
 800d206:	f240 5295 	movw	r2, #1429	; 0x595
 800d20a:	491d      	ldr	r1, [pc, #116]	; (800d280 <tcp_receive+0x604>)
 800d20c:	481b      	ldr	r0, [pc, #108]	; (800d27c <tcp_receive+0x600>)
 800d20e:	f003 fbf5 	bl	80109fc <iprintf>
      off = (u16_t)off32;
 800d212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d214:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d218:	4b15      	ldr	r3, [pc, #84]	; (800d270 <tcp_receive+0x5f4>)
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	891b      	ldrh	r3, [r3, #8]
 800d21e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d222:	429a      	cmp	r2, r3
 800d224:	d906      	bls.n	800d234 <tcp_receive+0x5b8>
 800d226:	4b13      	ldr	r3, [pc, #76]	; (800d274 <tcp_receive+0x5f8>)
 800d228:	f240 5297 	movw	r2, #1431	; 0x597
 800d22c:	4915      	ldr	r1, [pc, #84]	; (800d284 <tcp_receive+0x608>)
 800d22e:	4813      	ldr	r0, [pc, #76]	; (800d27c <tcp_receive+0x600>)
 800d230:	f003 fbe4 	bl	80109fc <iprintf>
      inseg.len -= off;
 800d234:	4b0e      	ldr	r3, [pc, #56]	; (800d270 <tcp_receive+0x5f4>)
 800d236:	891a      	ldrh	r2, [r3, #8]
 800d238:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d23c:	1ad3      	subs	r3, r2, r3
 800d23e:	b29a      	uxth	r2, r3
 800d240:	4b0b      	ldr	r3, [pc, #44]	; (800d270 <tcp_receive+0x5f4>)
 800d242:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d244:	4b0a      	ldr	r3, [pc, #40]	; (800d270 <tcp_receive+0x5f4>)
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	891a      	ldrh	r2, [r3, #8]
 800d24a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d24e:	1ad3      	subs	r3, r2, r3
 800d250:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d252:	e029      	b.n	800d2a8 <tcp_receive+0x62c>
 800d254:	08013a54 	.word	0x08013a54
 800d258:	08013a5c 	.word	0x08013a5c
 800d25c:	20000644 	.word	0x20000644
 800d260:	20000640 	.word	0x20000640
 800d264:	20006d24 	.word	0x20006d24
 800d268:	20000646 	.word	0x20000646
 800d26c:	2000063c 	.word	0x2000063c
 800d270:	2000061c 	.word	0x2000061c
 800d274:	080136ec 	.word	0x080136ec
 800d278:	08013a64 	.word	0x08013a64
 800d27c:	08013738 	.word	0x08013738
 800d280:	08013a74 	.word	0x08013a74
 800d284:	08013a84 	.word	0x08013a84
        off -= p->len;
 800d288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d28a:	895b      	ldrh	r3, [r3, #10]
 800d28c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d298:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d29a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d29c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d29e:	2200      	movs	r2, #0
 800d2a0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d2a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d2a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2aa:	895b      	ldrh	r3, [r3, #10]
 800d2ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d8e9      	bhi.n	800d288 <tcp_receive+0x60c>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d2b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d2bc:	f7fc f8d2 	bl	8009464 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d2c0:	4b91      	ldr	r3, [pc, #580]	; (800d508 <tcp_receive+0x88c>)
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d2c8:	4990      	ldr	r1, [pc, #576]	; (800d50c <tcp_receive+0x890>)
 800d2ca:	600a      	str	r2, [r1, #0]
 800d2cc:	4a8f      	ldr	r2, [pc, #572]	; (800d50c <tcp_receive+0x890>)
 800d2ce:	6812      	ldr	r2, [r2, #0]
 800d2d0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d2d2:	e00d      	b.n	800d2f0 <tcp_receive+0x674>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d2d4:	4b8d      	ldr	r3, [pc, #564]	; (800d50c <tcp_receive+0x890>)
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	da06      	bge.n	800d2f0 <tcp_receive+0x674>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	8b5b      	ldrh	r3, [r3, #26]
 800d2e6:	f043 0302 	orr.w	r3, r3, #2
 800d2ea:	b29a      	uxth	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d2f0:	4b86      	ldr	r3, [pc, #536]	; (800d50c <tcp_receive+0x890>)
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f8:	1ad3      	subs	r3, r2, r3
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f2c0 8428 	blt.w	800db50 <tcp_receive+0xed4>
 800d300:	4b82      	ldr	r3, [pc, #520]	; (800d50c <tcp_receive+0x890>)
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d308:	6879      	ldr	r1, [r7, #4]
 800d30a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d30c:	440b      	add	r3, r1
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	3301      	adds	r3, #1
 800d312:	2b00      	cmp	r3, #0
 800d314:	f300 841c 	bgt.w	800db50 <tcp_receive+0xed4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d31c:	4b7b      	ldr	r3, [pc, #492]	; (800d50c <tcp_receive+0x890>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	429a      	cmp	r2, r3
 800d322:	f040 8298 	bne.w	800d856 <tcp_receive+0xbda>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d326:	4b78      	ldr	r3, [pc, #480]	; (800d508 <tcp_receive+0x88c>)
 800d328:	891c      	ldrh	r4, [r3, #8]
 800d32a:	4b77      	ldr	r3, [pc, #476]	; (800d508 <tcp_receive+0x88c>)
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	899b      	ldrh	r3, [r3, #12]
 800d330:	b29b      	uxth	r3, r3
 800d332:	4618      	mov	r0, r3
 800d334:	f7f6 fdda 	bl	8003eec <lwip_htons>
 800d338:	4603      	mov	r3, r0
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	f003 0303 	and.w	r3, r3, #3
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <tcp_receive+0x6cc>
 800d344:	2301      	movs	r3, #1
 800d346:	e000      	b.n	800d34a <tcp_receive+0x6ce>
 800d348:	2300      	movs	r3, #0
 800d34a:	4423      	add	r3, r4
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	4b70      	ldr	r3, [pc, #448]	; (800d510 <tcp_receive+0x894>)
 800d350:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d356:	4b6e      	ldr	r3, [pc, #440]	; (800d510 <tcp_receive+0x894>)
 800d358:	881b      	ldrh	r3, [r3, #0]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d275      	bcs.n	800d44a <tcp_receive+0x7ce>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d35e:	4b6a      	ldr	r3, [pc, #424]	; (800d508 <tcp_receive+0x88c>)
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	899b      	ldrh	r3, [r3, #12]
 800d364:	b29b      	uxth	r3, r3
 800d366:	4618      	mov	r0, r3
 800d368:	f7f6 fdc0 	bl	8003eec <lwip_htons>
 800d36c:	4603      	mov	r3, r0
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	f003 0301 	and.w	r3, r3, #1
 800d374:	2b00      	cmp	r3, #0
 800d376:	d01f      	beq.n	800d3b8 <tcp_receive+0x73c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d378:	4b63      	ldr	r3, [pc, #396]	; (800d508 <tcp_receive+0x88c>)
 800d37a:	68dc      	ldr	r4, [r3, #12]
 800d37c:	4b62      	ldr	r3, [pc, #392]	; (800d508 <tcp_receive+0x88c>)
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	899b      	ldrh	r3, [r3, #12]
 800d382:	b29b      	uxth	r3, r3
 800d384:	b21b      	sxth	r3, r3
 800d386:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d38a:	b21d      	sxth	r5, r3
 800d38c:	4b5e      	ldr	r3, [pc, #376]	; (800d508 <tcp_receive+0x88c>)
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	899b      	ldrh	r3, [r3, #12]
 800d392:	b29b      	uxth	r3, r3
 800d394:	4618      	mov	r0, r3
 800d396:	f7f6 fda9 	bl	8003eec <lwip_htons>
 800d39a:	4603      	mov	r3, r0
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7f6 fda0 	bl	8003eec <lwip_htons>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	b21b      	sxth	r3, r3
 800d3b0:	432b      	orrs	r3, r5
 800d3b2:	b21b      	sxth	r3, r3
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d3bc:	4b52      	ldr	r3, [pc, #328]	; (800d508 <tcp_receive+0x88c>)
 800d3be:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d3c0:	4b51      	ldr	r3, [pc, #324]	; (800d508 <tcp_receive+0x88c>)
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	899b      	ldrh	r3, [r3, #12]
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7f6 fd8f 	bl	8003eec <lwip_htons>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	f003 0302 	and.w	r3, r3, #2
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d005      	beq.n	800d3e6 <tcp_receive+0x76a>
            inseg.len -= 1;
 800d3da:	4b4b      	ldr	r3, [pc, #300]	; (800d508 <tcp_receive+0x88c>)
 800d3dc:	891b      	ldrh	r3, [r3, #8]
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	4b49      	ldr	r3, [pc, #292]	; (800d508 <tcp_receive+0x88c>)
 800d3e4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d3e6:	4b48      	ldr	r3, [pc, #288]	; (800d508 <tcp_receive+0x88c>)
 800d3e8:	685a      	ldr	r2, [r3, #4]
 800d3ea:	4b47      	ldr	r3, [pc, #284]	; (800d508 <tcp_receive+0x88c>)
 800d3ec:	891b      	ldrh	r3, [r3, #8]
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	4610      	mov	r0, r2
 800d3f2:	f7fb ff35 	bl	8009260 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d3f6:	4b44      	ldr	r3, [pc, #272]	; (800d508 <tcp_receive+0x88c>)
 800d3f8:	891c      	ldrh	r4, [r3, #8]
 800d3fa:	4b43      	ldr	r3, [pc, #268]	; (800d508 <tcp_receive+0x88c>)
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	899b      	ldrh	r3, [r3, #12]
 800d400:	b29b      	uxth	r3, r3
 800d402:	4618      	mov	r0, r3
 800d404:	f7f6 fd72 	bl	8003eec <lwip_htons>
 800d408:	4603      	mov	r3, r0
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	f003 0303 	and.w	r3, r3, #3
 800d410:	2b00      	cmp	r3, #0
 800d412:	d001      	beq.n	800d418 <tcp_receive+0x79c>
 800d414:	2301      	movs	r3, #1
 800d416:	e000      	b.n	800d41a <tcp_receive+0x79e>
 800d418:	2300      	movs	r3, #0
 800d41a:	4423      	add	r3, r4
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	4b3c      	ldr	r3, [pc, #240]	; (800d510 <tcp_receive+0x894>)
 800d420:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d422:	4b3b      	ldr	r3, [pc, #236]	; (800d510 <tcp_receive+0x894>)
 800d424:	881b      	ldrh	r3, [r3, #0]
 800d426:	461a      	mov	r2, r3
 800d428:	4b38      	ldr	r3, [pc, #224]	; (800d50c <tcp_receive+0x890>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	441a      	add	r2, r3
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d432:	6879      	ldr	r1, [r7, #4]
 800d434:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d436:	440b      	add	r3, r1
 800d438:	429a      	cmp	r2, r3
 800d43a:	d006      	beq.n	800d44a <tcp_receive+0x7ce>
 800d43c:	4b35      	ldr	r3, [pc, #212]	; (800d514 <tcp_receive+0x898>)
 800d43e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800d442:	4935      	ldr	r1, [pc, #212]	; (800d518 <tcp_receive+0x89c>)
 800d444:	4835      	ldr	r0, [pc, #212]	; (800d51c <tcp_receive+0x8a0>)
 800d446:	f003 fad9 	bl	80109fc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f000 80e5 	beq.w	800d61e <tcp_receive+0x9a2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d454:	4b2c      	ldr	r3, [pc, #176]	; (800d508 <tcp_receive+0x88c>)
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	899b      	ldrh	r3, [r3, #12]
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7f6 fd45 	bl	8003eec <lwip_htons>
 800d462:	4603      	mov	r3, r0
 800d464:	b2db      	uxtb	r3, r3
 800d466:	f003 0301 	and.w	r3, r3, #1
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d010      	beq.n	800d490 <tcp_receive+0x814>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d46e:	e00a      	b.n	800d486 <tcp_receive+0x80a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d474:	61fb      	str	r3, [r7, #28]
              pcb->ooseq = pcb->ooseq->next;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d480:	69f8      	ldr	r0, [r7, #28]
 800d482:	f7fd fca9 	bl	800add8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1f0      	bne.n	800d470 <tcp_receive+0x7f4>
 800d48e:	e0c6      	b.n	800d61e <tcp_receive+0x9a2>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d494:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d496:	e050      	b.n	800d53a <tcp_receive+0x8be>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	899b      	ldrh	r3, [r3, #12]
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7f6 fd23 	bl	8003eec <lwip_htons>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	f003 0301 	and.w	r3, r3, #1
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d03b      	beq.n	800d52a <tcp_receive+0x8ae>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d4b2:	4b15      	ldr	r3, [pc, #84]	; (800d508 <tcp_receive+0x88c>)
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	899b      	ldrh	r3, [r3, #12]
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7f6 fd16 	bl	8003eec <lwip_htons>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d12e      	bne.n	800d52a <tcp_receive+0x8ae>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d4cc:	4b0e      	ldr	r3, [pc, #56]	; (800d508 <tcp_receive+0x88c>)
 800d4ce:	68dc      	ldr	r4, [r3, #12]
 800d4d0:	4b0d      	ldr	r3, [pc, #52]	; (800d508 <tcp_receive+0x88c>)
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	899b      	ldrh	r3, [r3, #12]
 800d4d6:	b29d      	uxth	r5, r3
 800d4d8:	2001      	movs	r0, #1
 800d4da:	f7f6 fd07 	bl	8003eec <lwip_htons>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	432b      	orrs	r3, r5
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d4e6:	4b08      	ldr	r3, [pc, #32]	; (800d508 <tcp_receive+0x88c>)
 800d4e8:	891c      	ldrh	r4, [r3, #8]
 800d4ea:	4b07      	ldr	r3, [pc, #28]	; (800d508 <tcp_receive+0x88c>)
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	899b      	ldrh	r3, [r3, #12]
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7f6 fcfa 	bl	8003eec <lwip_htons>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	f003 0303 	and.w	r3, r3, #3
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00d      	beq.n	800d520 <tcp_receive+0x8a4>
 800d504:	2301      	movs	r3, #1
 800d506:	e00c      	b.n	800d522 <tcp_receive+0x8a6>
 800d508:	2000061c 	.word	0x2000061c
 800d50c:	2000063c 	.word	0x2000063c
 800d510:	20000646 	.word	0x20000646
 800d514:	080136ec 	.word	0x080136ec
 800d518:	08013a94 	.word	0x08013a94
 800d51c:	08013738 	.word	0x08013738
 800d520:	2300      	movs	r3, #0
 800d522:	4423      	add	r3, r4
 800d524:	b29a      	uxth	r2, r3
 800d526:	4b98      	ldr	r3, [pc, #608]	; (800d788 <tcp_receive+0xb0c>)
 800d528:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d52c:	61bb      	str	r3, [r7, #24]
              next = next->next;
 800d52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d534:	69b8      	ldr	r0, [r7, #24]
 800d536:	f7fd fc4f 	bl	800add8 <tcp_seg_free>
            while (next &&
 800d53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00e      	beq.n	800d55e <tcp_receive+0x8e2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d540:	4b91      	ldr	r3, [pc, #580]	; (800d788 <tcp_receive+0xb0c>)
 800d542:	881b      	ldrh	r3, [r3, #0]
 800d544:	461a      	mov	r2, r3
 800d546:	4b91      	ldr	r3, [pc, #580]	; (800d78c <tcp_receive+0xb10>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	441a      	add	r2, r3
 800d54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d554:	8909      	ldrh	r1, [r1, #8]
 800d556:	440b      	add	r3, r1
 800d558:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	da9c      	bge.n	800d498 <tcp_receive+0x81c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d560:	2b00      	cmp	r3, #0
 800d562:	d059      	beq.n	800d618 <tcp_receive+0x99c>
                TCP_SEQ_GT(seqno + tcplen,
 800d564:	4b88      	ldr	r3, [pc, #544]	; (800d788 <tcp_receive+0xb0c>)
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	461a      	mov	r2, r3
 800d56a:	4b88      	ldr	r3, [pc, #544]	; (800d78c <tcp_receive+0xb10>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	441a      	add	r2, r3
 800d570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d578:	2b00      	cmp	r3, #0
 800d57a:	dd4d      	ble.n	800d618 <tcp_receive+0x99c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	b29a      	uxth	r2, r3
 800d584:	4b81      	ldr	r3, [pc, #516]	; (800d78c <tcp_receive+0xb10>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	b29b      	uxth	r3, r3
 800d58a:	1ad3      	subs	r3, r2, r3
 800d58c:	b29a      	uxth	r2, r3
 800d58e:	4b80      	ldr	r3, [pc, #512]	; (800d790 <tcp_receive+0xb14>)
 800d590:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d592:	4b7f      	ldr	r3, [pc, #508]	; (800d790 <tcp_receive+0xb14>)
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	899b      	ldrh	r3, [r3, #12]
 800d598:	b29b      	uxth	r3, r3
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7f6 fca6 	bl	8003eec <lwip_htons>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	f003 0302 	and.w	r3, r3, #2
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d005      	beq.n	800d5b8 <tcp_receive+0x93c>
                inseg.len -= 1;
 800d5ac:	4b78      	ldr	r3, [pc, #480]	; (800d790 <tcp_receive+0xb14>)
 800d5ae:	891b      	ldrh	r3, [r3, #8]
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	4b76      	ldr	r3, [pc, #472]	; (800d790 <tcp_receive+0xb14>)
 800d5b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d5b8:	4b75      	ldr	r3, [pc, #468]	; (800d790 <tcp_receive+0xb14>)
 800d5ba:	685a      	ldr	r2, [r3, #4]
 800d5bc:	4b74      	ldr	r3, [pc, #464]	; (800d790 <tcp_receive+0xb14>)
 800d5be:	891b      	ldrh	r3, [r3, #8]
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	4610      	mov	r0, r2
 800d5c4:	f7fb fe4c 	bl	8009260 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d5c8:	4b71      	ldr	r3, [pc, #452]	; (800d790 <tcp_receive+0xb14>)
 800d5ca:	891c      	ldrh	r4, [r3, #8]
 800d5cc:	4b70      	ldr	r3, [pc, #448]	; (800d790 <tcp_receive+0xb14>)
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	899b      	ldrh	r3, [r3, #12]
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7f6 fc89 	bl	8003eec <lwip_htons>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	f003 0303 	and.w	r3, r3, #3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d001      	beq.n	800d5ea <tcp_receive+0x96e>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e000      	b.n	800d5ec <tcp_receive+0x970>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	4423      	add	r3, r4
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	4b65      	ldr	r3, [pc, #404]	; (800d788 <tcp_receive+0xb0c>)
 800d5f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d5f4:	4b64      	ldr	r3, [pc, #400]	; (800d788 <tcp_receive+0xb0c>)
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	4b64      	ldr	r3, [pc, #400]	; (800d78c <tcp_receive+0xb10>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	441a      	add	r2, r3
 800d600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	429a      	cmp	r2, r3
 800d608:	d006      	beq.n	800d618 <tcp_receive+0x99c>
 800d60a:	4b62      	ldr	r3, [pc, #392]	; (800d794 <tcp_receive+0xb18>)
 800d60c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800d610:	4961      	ldr	r1, [pc, #388]	; (800d798 <tcp_receive+0xb1c>)
 800d612:	4862      	ldr	r0, [pc, #392]	; (800d79c <tcp_receive+0xb20>)
 800d614:	f003 f9f2 	bl	80109fc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d61c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d61e:	4b5a      	ldr	r3, [pc, #360]	; (800d788 <tcp_receive+0xb0c>)
 800d620:	881b      	ldrh	r3, [r3, #0]
 800d622:	461a      	mov	r2, r3
 800d624:	4b59      	ldr	r3, [pc, #356]	; (800d78c <tcp_receive+0xb10>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	441a      	add	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d632:	4b55      	ldr	r3, [pc, #340]	; (800d788 <tcp_receive+0xb0c>)
 800d634:	881b      	ldrh	r3, [r3, #0]
 800d636:	429a      	cmp	r2, r3
 800d638:	d206      	bcs.n	800d648 <tcp_receive+0x9cc>
 800d63a:	4b56      	ldr	r3, [pc, #344]	; (800d794 <tcp_receive+0xb18>)
 800d63c:	f240 6207 	movw	r2, #1543	; 0x607
 800d640:	4957      	ldr	r1, [pc, #348]	; (800d7a0 <tcp_receive+0xb24>)
 800d642:	4856      	ldr	r0, [pc, #344]	; (800d79c <tcp_receive+0xb20>)
 800d644:	f003 f9da 	bl	80109fc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d64c:	4b4e      	ldr	r3, [pc, #312]	; (800d788 <tcp_receive+0xb0c>)
 800d64e:	881b      	ldrh	r3, [r3, #0]
 800d650:	1ad3      	subs	r3, r2, r3
 800d652:	b29a      	uxth	r2, r3
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f7fc fe99 	bl	800a390 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d65e:	4b4c      	ldr	r3, [pc, #304]	; (800d790 <tcp_receive+0xb14>)
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	891b      	ldrh	r3, [r3, #8]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d006      	beq.n	800d676 <tcp_receive+0x9fa>
          recv_data = inseg.p;
 800d668:	4b49      	ldr	r3, [pc, #292]	; (800d790 <tcp_receive+0xb14>)
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	4a4d      	ldr	r2, [pc, #308]	; (800d7a4 <tcp_receive+0xb28>)
 800d66e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d670:	4b47      	ldr	r3, [pc, #284]	; (800d790 <tcp_receive+0xb14>)
 800d672:	2200      	movs	r2, #0
 800d674:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d676:	4b46      	ldr	r3, [pc, #280]	; (800d790 <tcp_receive+0xb14>)
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	899b      	ldrh	r3, [r3, #12]
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	4618      	mov	r0, r3
 800d680:	f7f6 fc34 	bl	8003eec <lwip_htons>
 800d684:	4603      	mov	r3, r0
 800d686:	b2db      	uxtb	r3, r3
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f000 80b8 	beq.w	800d802 <tcp_receive+0xb86>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d692:	4b45      	ldr	r3, [pc, #276]	; (800d7a8 <tcp_receive+0xb2c>)
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	f043 0320 	orr.w	r3, r3, #32
 800d69a:	b2da      	uxtb	r2, r3
 800d69c:	4b42      	ldr	r3, [pc, #264]	; (800d7a8 <tcp_receive+0xb2c>)
 800d69e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d6a0:	e0af      	b.n	800d802 <tcp_receive+0xb86>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6a6:	617b      	str	r3, [r7, #20]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	4a36      	ldr	r2, [pc, #216]	; (800d78c <tcp_receive+0xb10>)
 800d6b2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	891b      	ldrh	r3, [r3, #8]
 800d6b8:	461c      	mov	r4, r3
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	899b      	ldrh	r3, [r3, #12]
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7f6 fc12 	bl	8003eec <lwip_htons>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	f003 0303 	and.w	r3, r3, #3
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d001      	beq.n	800d6d8 <tcp_receive+0xa5c>
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e000      	b.n	800d6da <tcp_receive+0xa5e>
 800d6d8:	2300      	movs	r3, #0
 800d6da:	4423      	add	r3, r4
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d6e0:	441a      	add	r2, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6ea:	461c      	mov	r4, r3
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	891b      	ldrh	r3, [r3, #8]
 800d6f0:	461d      	mov	r5, r3
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	899b      	ldrh	r3, [r3, #12]
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7f6 fbf6 	bl	8003eec <lwip_htons>
 800d700:	4603      	mov	r3, r0
 800d702:	b2db      	uxtb	r3, r3
 800d704:	f003 0303 	and.w	r3, r3, #3
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <tcp_receive+0xa94>
 800d70c:	2301      	movs	r3, #1
 800d70e:	e000      	b.n	800d712 <tcp_receive+0xa96>
 800d710:	2300      	movs	r3, #0
 800d712:	442b      	add	r3, r5
 800d714:	429c      	cmp	r4, r3
 800d716:	d206      	bcs.n	800d726 <tcp_receive+0xaaa>
 800d718:	4b1e      	ldr	r3, [pc, #120]	; (800d794 <tcp_receive+0xb18>)
 800d71a:	f240 622c 	movw	r2, #1580	; 0x62c
 800d71e:	4923      	ldr	r1, [pc, #140]	; (800d7ac <tcp_receive+0xb30>)
 800d720:	481e      	ldr	r0, [pc, #120]	; (800d79c <tcp_receive+0xb20>)
 800d722:	f003 f96b 	bl	80109fc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	891b      	ldrh	r3, [r3, #8]
 800d72a:	461c      	mov	r4, r3
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	899b      	ldrh	r3, [r3, #12]
 800d732:	b29b      	uxth	r3, r3
 800d734:	4618      	mov	r0, r3
 800d736:	f7f6 fbd9 	bl	8003eec <lwip_htons>
 800d73a:	4603      	mov	r3, r0
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	f003 0303 	and.w	r3, r3, #3
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <tcp_receive+0xace>
 800d746:	2301      	movs	r3, #1
 800d748:	e000      	b.n	800d74c <tcp_receive+0xad0>
 800d74a:	2300      	movs	r3, #0
 800d74c:	18e1      	adds	r1, r4, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d752:	b28b      	uxth	r3, r1
 800d754:	1ad3      	subs	r3, r2, r3
 800d756:	b29a      	uxth	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f7fc fe17 	bl	800a390 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	891b      	ldrh	r3, [r3, #8]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d028      	beq.n	800d7be <tcp_receive+0xb42>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d76c:	4b0d      	ldr	r3, [pc, #52]	; (800d7a4 <tcp_receive+0xb28>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d01d      	beq.n	800d7b0 <tcp_receive+0xb34>
              pbuf_cat(recv_data, cseg->p);
 800d774:	4b0b      	ldr	r3, [pc, #44]	; (800d7a4 <tcp_receive+0xb28>)
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	4619      	mov	r1, r3
 800d77e:	4610      	mov	r0, r2
 800d780:	f7fb ffb8 	bl	80096f4 <pbuf_cat>
 800d784:	e018      	b.n	800d7b8 <tcp_receive+0xb3c>
 800d786:	bf00      	nop
 800d788:	20000646 	.word	0x20000646
 800d78c:	2000063c 	.word	0x2000063c
 800d790:	2000061c 	.word	0x2000061c
 800d794:	080136ec 	.word	0x080136ec
 800d798:	08013acc 	.word	0x08013acc
 800d79c:	08013738 	.word	0x08013738
 800d7a0:	08013b08 	.word	0x08013b08
 800d7a4:	2000064c 	.word	0x2000064c
 800d7a8:	20000649 	.word	0x20000649
 800d7ac:	08013b28 	.word	0x08013b28
            } else {
              recv_data = cseg->p;
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	4a70      	ldr	r2, [pc, #448]	; (800d978 <tcp_receive+0xcfc>)
 800d7b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	899b      	ldrh	r3, [r3, #12]
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7f6 fb90 	bl	8003eec <lwip_htons>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	f003 0301 	and.w	r3, r3, #1
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00d      	beq.n	800d7f4 <tcp_receive+0xb78>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d7d8:	4b68      	ldr	r3, [pc, #416]	; (800d97c <tcp_receive+0xd00>)
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	f043 0320 	orr.w	r3, r3, #32
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	4b66      	ldr	r3, [pc, #408]	; (800d97c <tcp_receive+0xd00>)
 800d7e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	7d1b      	ldrb	r3, [r3, #20]
 800d7ea:	2b04      	cmp	r3, #4
 800d7ec:	d102      	bne.n	800d7f4 <tcp_receive+0xb78>
              pcb->state = CLOSE_WAIT;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2207      	movs	r2, #7
 800d7f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d7fc:	6978      	ldr	r0, [r7, #20]
 800d7fe:	f7fd faeb 	bl	800add8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d806:	2b00      	cmp	r3, #0
 800d808:	d008      	beq.n	800d81c <tcp_receive+0xba0>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	685a      	ldr	r2, [r3, #4]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d816:	429a      	cmp	r2, r3
 800d818:	f43f af43 	beq.w	800d6a2 <tcp_receive+0xa26>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	8b5b      	ldrh	r3, [r3, #26]
 800d820:	f003 0301 	and.w	r3, r3, #1
 800d824:	2b00      	cmp	r3, #0
 800d826:	d00e      	beq.n	800d846 <tcp_receive+0xbca>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	8b5b      	ldrh	r3, [r3, #26]
 800d82c:	f023 0301 	bic.w	r3, r3, #1
 800d830:	b29a      	uxth	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	835a      	strh	r2, [r3, #26]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	8b5b      	ldrh	r3, [r3, #26]
 800d83a:	f043 0302 	orr.w	r3, r3, #2
 800d83e:	b29a      	uxth	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d844:	e188      	b.n	800db58 <tcp_receive+0xedc>
        tcp_ack(pcb);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	8b5b      	ldrh	r3, [r3, #26]
 800d84a:	f043 0301 	orr.w	r3, r3, #1
 800d84e:	b29a      	uxth	r2, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d854:	e180      	b.n	800db58 <tcp_receive+0xedc>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d106      	bne.n	800d86c <tcp_receive+0xbf0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d85e:	4848      	ldr	r0, [pc, #288]	; (800d980 <tcp_receive+0xd04>)
 800d860:	f7fd faf0 	bl	800ae44 <tcp_seg_copy>
 800d864:	4602      	mov	r2, r0
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	675a      	str	r2, [r3, #116]	; 0x74
 800d86a:	e16d      	b.n	800db48 <tcp_receive+0xecc>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d86c:	2300      	movs	r3, #0
 800d86e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d874:	63bb      	str	r3, [r7, #56]	; 0x38
 800d876:	e157      	b.n	800db28 <tcp_receive+0xeac>
            if (seqno == next->tcphdr->seqno) {
 800d878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	685a      	ldr	r2, [r3, #4]
 800d87e:	4b41      	ldr	r3, [pc, #260]	; (800d984 <tcp_receive+0xd08>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	429a      	cmp	r2, r3
 800d884:	d11d      	bne.n	800d8c2 <tcp_receive+0xc46>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d886:	4b3e      	ldr	r3, [pc, #248]	; (800d980 <tcp_receive+0xd04>)
 800d888:	891a      	ldrh	r2, [r3, #8]
 800d88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88c:	891b      	ldrh	r3, [r3, #8]
 800d88e:	429a      	cmp	r2, r3
 800d890:	f240 814f 	bls.w	800db32 <tcp_receive+0xeb6>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d894:	483a      	ldr	r0, [pc, #232]	; (800d980 <tcp_receive+0xd04>)
 800d896:	f7fd fad5 	bl	800ae44 <tcp_seg_copy>
 800d89a:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f000 8149 	beq.w	800db36 <tcp_receive+0xeba>
                  if (prev != NULL) {
 800d8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d003      	beq.n	800d8b2 <tcp_receive+0xc36>
                    prev->next = cseg;
 800d8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ac:	68ba      	ldr	r2, [r7, #8]
 800d8ae:	601a      	str	r2, [r3, #0]
 800d8b0:	e002      	b.n	800d8b8 <tcp_receive+0xc3c>
                  } else {
                    pcb->ooseq = cseg;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d8b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d8ba:	68b8      	ldr	r0, [r7, #8]
 800d8bc:	f7ff f8da 	bl	800ca74 <tcp_oos_insert_segment>
                }
                break;
 800d8c0:	e139      	b.n	800db36 <tcp_receive+0xeba>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d117      	bne.n	800d8f8 <tcp_receive+0xc7c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d8c8:	4b2e      	ldr	r3, [pc, #184]	; (800d984 <tcp_receive+0xd08>)
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	da57      	bge.n	800d988 <tcp_receive+0xd0c>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d8d8:	4829      	ldr	r0, [pc, #164]	; (800d980 <tcp_receive+0xd04>)
 800d8da:	f7fd fab3 	bl	800ae44 <tcp_seg_copy>
 800d8de:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	f000 8129 	beq.w	800db3a <tcp_receive+0xebe>
                    pcb->ooseq = cseg;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	693a      	ldr	r2, [r7, #16]
 800d8ec:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d8ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d8f0:	6938      	ldr	r0, [r7, #16]
 800d8f2:	f7ff f8bf 	bl	800ca74 <tcp_oos_insert_segment>
                  }
                  break;
 800d8f6:	e120      	b.n	800db3a <tcp_receive+0xebe>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d8f8:	4b22      	ldr	r3, [pc, #136]	; (800d984 <tcp_receive+0xd08>)
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	3b01      	subs	r3, #1
 800d906:	2b00      	cmp	r3, #0
 800d908:	db3e      	blt.n	800d988 <tcp_receive+0xd0c>
 800d90a:	4b1e      	ldr	r3, [pc, #120]	; (800d984 <tcp_receive+0xd08>)
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	3301      	adds	r3, #1
 800d918:	2b00      	cmp	r3, #0
 800d91a:	dc35      	bgt.n	800d988 <tcp_receive+0xd0c>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d91c:	4818      	ldr	r0, [pc, #96]	; (800d980 <tcp_receive+0xd04>)
 800d91e:	f7fd fa91 	bl	800ae44 <tcp_seg_copy>
 800d922:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	f000 8109 	beq.w	800db3e <tcp_receive+0xec2>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d934:	8912      	ldrh	r2, [r2, #8]
 800d936:	441a      	add	r2, r3
 800d938:	4b12      	ldr	r3, [pc, #72]	; (800d984 <tcp_receive+0xd08>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	2b00      	cmp	r3, #0
 800d940:	dd12      	ble.n	800d968 <tcp_receive+0xcec>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d942:	4b10      	ldr	r3, [pc, #64]	; (800d984 <tcp_receive+0xd08>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	b29a      	uxth	r2, r3
 800d948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	b29b      	uxth	r3, r3
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	b29a      	uxth	r2, r3
 800d954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d956:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d95a:	685a      	ldr	r2, [r3, #4]
 800d95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d95e:	891b      	ldrh	r3, [r3, #8]
 800d960:	4619      	mov	r1, r3
 800d962:	4610      	mov	r0, r2
 800d964:	f7fb fc7c 	bl	8009260 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d96e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f7ff f87f 	bl	800ca74 <tcp_oos_insert_segment>
                  }
                  break;
 800d976:	e0e2      	b.n	800db3e <tcp_receive+0xec2>
 800d978:	2000064c 	.word	0x2000064c
 800d97c:	20000649 	.word	0x20000649
 800d980:	2000061c 	.word	0x2000061c
 800d984:	2000063c 	.word	0x2000063c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	f040 80c6 	bne.w	800db22 <tcp_receive+0xea6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d996:	4b80      	ldr	r3, [pc, #512]	; (800db98 <tcp_receive+0xf1c>)
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f340 80bd 	ble.w	800db22 <tcp_receive+0xea6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	899b      	ldrh	r3, [r3, #12]
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7f6 fa9b 	bl	8003eec <lwip_htons>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	f003 0301 	and.w	r3, r3, #1
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f040 80bf 	bne.w	800db42 <tcp_receive+0xec6>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d9c4:	4875      	ldr	r0, [pc, #468]	; (800db9c <tcp_receive+0xf20>)
 800d9c6:	f7fd fa3d 	bl	800ae44 <tcp_seg_copy>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f000 80b6 	beq.w	800db46 <tcp_receive+0xeca>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9e2:	8912      	ldrh	r2, [r2, #8]
 800d9e4:	441a      	add	r2, r3
 800d9e6:	4b6c      	ldr	r3, [pc, #432]	; (800db98 <tcp_receive+0xf1c>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	dd12      	ble.n	800da16 <tcp_receive+0xd9a>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d9f0:	4b69      	ldr	r3, [pc, #420]	; (800db98 <tcp_receive+0xf1c>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	1ad3      	subs	r3, r2, r3
 800da00:	b29a      	uxth	r2, r3
 800da02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da04:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800da06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da08:	685a      	ldr	r2, [r3, #4]
 800da0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0c:	891b      	ldrh	r3, [r3, #8]
 800da0e:	4619      	mov	r1, r3
 800da10:	4610      	mov	r0, r2
 800da12:	f7fb fc25 	bl	8009260 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800da16:	4b62      	ldr	r3, [pc, #392]	; (800dba0 <tcp_receive+0xf24>)
 800da18:	881b      	ldrh	r3, [r3, #0]
 800da1a:	461a      	mov	r2, r3
 800da1c:	4b5e      	ldr	r3, [pc, #376]	; (800db98 <tcp_receive+0xf1c>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	441a      	add	r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da26:	6879      	ldr	r1, [r7, #4]
 800da28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800da2a:	440b      	add	r3, r1
 800da2c:	1ad3      	subs	r3, r2, r3
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f340 8089 	ble.w	800db46 <tcp_receive+0xeca>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800da34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	899b      	ldrh	r3, [r3, #12]
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	4618      	mov	r0, r3
 800da40:	f7f6 fa54 	bl	8003eec <lwip_htons>
 800da44:	4603      	mov	r3, r0
 800da46:	b2db      	uxtb	r3, r3
 800da48:	f003 0301 	and.w	r3, r3, #1
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d022      	beq.n	800da96 <tcp_receive+0xe1a>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800da50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	68dc      	ldr	r4, [r3, #12]
 800da56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	68db      	ldr	r3, [r3, #12]
 800da5c:	899b      	ldrh	r3, [r3, #12]
 800da5e:	b29b      	uxth	r3, r3
 800da60:	b21b      	sxth	r3, r3
 800da62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800da66:	b21d      	sxth	r5, r3
 800da68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	899b      	ldrh	r3, [r3, #12]
 800da70:	b29b      	uxth	r3, r3
 800da72:	4618      	mov	r0, r3
 800da74:	f7f6 fa3a 	bl	8003eec <lwip_htons>
 800da78:	4603      	mov	r3, r0
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800da82:	b29b      	uxth	r3, r3
 800da84:	4618      	mov	r0, r3
 800da86:	f7f6 fa31 	bl	8003eec <lwip_htons>
 800da8a:	4603      	mov	r3, r0
 800da8c:	b21b      	sxth	r3, r3
 800da8e:	432b      	orrs	r3, r5
 800da90:	b21b      	sxth	r3, r3
 800da92:	b29b      	uxth	r3, r3
 800da94:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800da96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	687a      	ldr	r2, [r7, #4]
 800da9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800da9e:	b291      	uxth	r1, r2
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800daa4:	440a      	add	r2, r1
 800daa6:	b291      	uxth	r1, r2
 800daa8:	4a3b      	ldr	r2, [pc, #236]	; (800db98 <tcp_receive+0xf1c>)
 800daaa:	6812      	ldr	r2, [r2, #0]
 800daac:	b292      	uxth	r2, r2
 800daae:	1a8a      	subs	r2, r1, r2
 800dab0:	b292      	uxth	r2, r2
 800dab2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800dab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	685a      	ldr	r2, [r3, #4]
 800daba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	891b      	ldrh	r3, [r3, #8]
 800dac0:	4619      	mov	r1, r3
 800dac2:	4610      	mov	r0, r2
 800dac4:	f7fb fbcc 	bl	8009260 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800dac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	891c      	ldrh	r4, [r3, #8]
 800dace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	899b      	ldrh	r3, [r3, #12]
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	4618      	mov	r0, r3
 800dada:	f7f6 fa07 	bl	8003eec <lwip_htons>
 800dade:	4603      	mov	r3, r0
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	f003 0303 	and.w	r3, r3, #3
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d001      	beq.n	800daee <tcp_receive+0xe72>
 800daea:	2301      	movs	r3, #1
 800daec:	e000      	b.n	800daf0 <tcp_receive+0xe74>
 800daee:	2300      	movs	r3, #0
 800daf0:	4423      	add	r3, r4
 800daf2:	b29a      	uxth	r2, r3
 800daf4:	4b2a      	ldr	r3, [pc, #168]	; (800dba0 <tcp_receive+0xf24>)
 800daf6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800daf8:	4b29      	ldr	r3, [pc, #164]	; (800dba0 <tcp_receive+0xf24>)
 800dafa:	881b      	ldrh	r3, [r3, #0]
 800dafc:	461a      	mov	r2, r3
 800dafe:	4b26      	ldr	r3, [pc, #152]	; (800db98 <tcp_receive+0xf1c>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	441a      	add	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db08:	6879      	ldr	r1, [r7, #4]
 800db0a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800db0c:	440b      	add	r3, r1
 800db0e:	429a      	cmp	r2, r3
 800db10:	d019      	beq.n	800db46 <tcp_receive+0xeca>
 800db12:	4b24      	ldr	r3, [pc, #144]	; (800dba4 <tcp_receive+0xf28>)
 800db14:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800db18:	4923      	ldr	r1, [pc, #140]	; (800dba8 <tcp_receive+0xf2c>)
 800db1a:	4824      	ldr	r0, [pc, #144]	; (800dbac <tcp_receive+0xf30>)
 800db1c:	f002 ff6e 	bl	80109fc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800db20:	e011      	b.n	800db46 <tcp_receive+0xeca>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800db22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	63bb      	str	r3, [r7, #56]	; 0x38
 800db28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f47f aea4 	bne.w	800d878 <tcp_receive+0xbfc>
 800db30:	e00a      	b.n	800db48 <tcp_receive+0xecc>
                break;
 800db32:	bf00      	nop
 800db34:	e008      	b.n	800db48 <tcp_receive+0xecc>
                break;
 800db36:	bf00      	nop
 800db38:	e006      	b.n	800db48 <tcp_receive+0xecc>
                  break;
 800db3a:	bf00      	nop
 800db3c:	e004      	b.n	800db48 <tcp_receive+0xecc>
                  break;
 800db3e:	bf00      	nop
 800db40:	e002      	b.n	800db48 <tcp_receive+0xecc>
                  break;
 800db42:	bf00      	nop
 800db44:	e000      	b.n	800db48 <tcp_receive+0xecc>
                break;
 800db46:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f001 fea9 	bl	800f8a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800db4e:	e003      	b.n	800db58 <tcp_receive+0xedc>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f001 fea5 	bl	800f8a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800db56:	e01a      	b.n	800db8e <tcp_receive+0xf12>
 800db58:	e019      	b.n	800db8e <tcp_receive+0xf12>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800db5a:	4b0f      	ldr	r3, [pc, #60]	; (800db98 <tcp_receive+0xf1c>)
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db62:	1ad3      	subs	r3, r2, r3
 800db64:	2b00      	cmp	r3, #0
 800db66:	db0a      	blt.n	800db7e <tcp_receive+0xf02>
 800db68:	4b0b      	ldr	r3, [pc, #44]	; (800db98 <tcp_receive+0xf1c>)
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db70:	6879      	ldr	r1, [r7, #4]
 800db72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800db74:	440b      	add	r3, r1
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	3301      	adds	r3, #1
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	dd07      	ble.n	800db8e <tcp_receive+0xf12>
      tcp_ack_now(pcb);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	8b5b      	ldrh	r3, [r3, #26]
 800db82:	f043 0302 	orr.w	r3, r3, #2
 800db86:	b29a      	uxth	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800db8c:	e7ff      	b.n	800db8e <tcp_receive+0xf12>
 800db8e:	bf00      	nop
 800db90:	3750      	adds	r7, #80	; 0x50
 800db92:	46bd      	mov	sp, r7
 800db94:	bdb0      	pop	{r4, r5, r7, pc}
 800db96:	bf00      	nop
 800db98:	2000063c 	.word	0x2000063c
 800db9c:	2000061c 	.word	0x2000061c
 800dba0:	20000646 	.word	0x20000646
 800dba4:	080136ec 	.word	0x080136ec
 800dba8:	08013a94 	.word	0x08013a94
 800dbac:	08013738 	.word	0x08013738

0800dbb0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800dbb6:	4b15      	ldr	r3, [pc, #84]	; (800dc0c <tcp_get_next_optbyte+0x5c>)
 800dbb8:	881b      	ldrh	r3, [r3, #0]
 800dbba:	1c5a      	adds	r2, r3, #1
 800dbbc:	b291      	uxth	r1, r2
 800dbbe:	4a13      	ldr	r2, [pc, #76]	; (800dc0c <tcp_get_next_optbyte+0x5c>)
 800dbc0:	8011      	strh	r1, [r2, #0]
 800dbc2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dbc4:	4b12      	ldr	r3, [pc, #72]	; (800dc10 <tcp_get_next_optbyte+0x60>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d004      	beq.n	800dbd6 <tcp_get_next_optbyte+0x26>
 800dbcc:	4b11      	ldr	r3, [pc, #68]	; (800dc14 <tcp_get_next_optbyte+0x64>)
 800dbce:	881b      	ldrh	r3, [r3, #0]
 800dbd0:	88fa      	ldrh	r2, [r7, #6]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d208      	bcs.n	800dbe8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800dbd6:	4b10      	ldr	r3, [pc, #64]	; (800dc18 <tcp_get_next_optbyte+0x68>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	3314      	adds	r3, #20
 800dbdc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800dbde:	88fb      	ldrh	r3, [r7, #6]
 800dbe0:	683a      	ldr	r2, [r7, #0]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	e00b      	b.n	800dc00 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dbe8:	88fb      	ldrh	r3, [r7, #6]
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	4b09      	ldr	r3, [pc, #36]	; (800dc14 <tcp_get_next_optbyte+0x64>)
 800dbee:	881b      	ldrh	r3, [r3, #0]
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	1ad3      	subs	r3, r2, r3
 800dbf4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800dbf6:	4b06      	ldr	r3, [pc, #24]	; (800dc10 <tcp_get_next_optbyte+0x60>)
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	797b      	ldrb	r3, [r7, #5]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr
 800dc0c:	20000638 	.word	0x20000638
 800dc10:	20000634 	.word	0x20000634
 800dc14:	20000632 	.word	0x20000632
 800dc18:	2000062c 	.word	0x2000062c

0800dc1c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d106      	bne.n	800dc38 <tcp_parseopt+0x1c>
 800dc2a:	4b31      	ldr	r3, [pc, #196]	; (800dcf0 <tcp_parseopt+0xd4>)
 800dc2c:	f240 727d 	movw	r2, #1917	; 0x77d
 800dc30:	4930      	ldr	r1, [pc, #192]	; (800dcf4 <tcp_parseopt+0xd8>)
 800dc32:	4831      	ldr	r0, [pc, #196]	; (800dcf8 <tcp_parseopt+0xdc>)
 800dc34:	f002 fee2 	bl	80109fc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800dc38:	4b30      	ldr	r3, [pc, #192]	; (800dcfc <tcp_parseopt+0xe0>)
 800dc3a:	881b      	ldrh	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d053      	beq.n	800dce8 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dc40:	4b2f      	ldr	r3, [pc, #188]	; (800dd00 <tcp_parseopt+0xe4>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	801a      	strh	r2, [r3, #0]
 800dc46:	e043      	b.n	800dcd0 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800dc48:	f7ff ffb2 	bl	800dbb0 <tcp_get_next_optbyte>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d03c      	beq.n	800dcd0 <tcp_parseopt+0xb4>
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	d002      	beq.n	800dc60 <tcp_parseopt+0x44>
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d03f      	beq.n	800dcde <tcp_parseopt+0xc2>
 800dc5e:	e026      	b.n	800dcae <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dc60:	f7ff ffa6 	bl	800dbb0 <tcp_get_next_optbyte>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b04      	cmp	r3, #4
 800dc68:	d13b      	bne.n	800dce2 <tcp_parseopt+0xc6>
 800dc6a:	4b25      	ldr	r3, [pc, #148]	; (800dd00 <tcp_parseopt+0xe4>)
 800dc6c:	881b      	ldrh	r3, [r3, #0]
 800dc6e:	3302      	adds	r3, #2
 800dc70:	4a22      	ldr	r2, [pc, #136]	; (800dcfc <tcp_parseopt+0xe0>)
 800dc72:	8812      	ldrh	r2, [r2, #0]
 800dc74:	4293      	cmp	r3, r2
 800dc76:	dc34      	bgt.n	800dce2 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dc78:	f7ff ff9a 	bl	800dbb0 <tcp_get_next_optbyte>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	021b      	lsls	r3, r3, #8
 800dc82:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800dc84:	f7ff ff94 	bl	800dbb0 <tcp_get_next_optbyte>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	b29a      	uxth	r2, r3
 800dc8c:	89bb      	ldrh	r3, [r7, #12]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dc92:	89bb      	ldrh	r3, [r7, #12]
 800dc94:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dc98:	d804      	bhi.n	800dca4 <tcp_parseopt+0x88>
 800dc9a:	89bb      	ldrh	r3, [r7, #12]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d001      	beq.n	800dca4 <tcp_parseopt+0x88>
 800dca0:	89ba      	ldrh	r2, [r7, #12]
 800dca2:	e001      	b.n	800dca8 <tcp_parseopt+0x8c>
 800dca4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800dcac:	e010      	b.n	800dcd0 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800dcae:	f7ff ff7f 	bl	800dbb0 <tcp_get_next_optbyte>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800dcb6:	7afb      	ldrb	r3, [r7, #11]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d914      	bls.n	800dce6 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800dcbc:	7afb      	ldrb	r3, [r7, #11]
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	4b0f      	ldr	r3, [pc, #60]	; (800dd00 <tcp_parseopt+0xe4>)
 800dcc2:	881b      	ldrh	r3, [r3, #0]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	3b02      	subs	r3, #2
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	4b0c      	ldr	r3, [pc, #48]	; (800dd00 <tcp_parseopt+0xe4>)
 800dcce:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dcd0:	4b0b      	ldr	r3, [pc, #44]	; (800dd00 <tcp_parseopt+0xe4>)
 800dcd2:	881a      	ldrh	r2, [r3, #0]
 800dcd4:	4b09      	ldr	r3, [pc, #36]	; (800dcfc <tcp_parseopt+0xe0>)
 800dcd6:	881b      	ldrh	r3, [r3, #0]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d3b5      	bcc.n	800dc48 <tcp_parseopt+0x2c>
 800dcdc:	e004      	b.n	800dce8 <tcp_parseopt+0xcc>
          return;
 800dcde:	bf00      	nop
 800dce0:	e002      	b.n	800dce8 <tcp_parseopt+0xcc>
            return;
 800dce2:	bf00      	nop
 800dce4:	e000      	b.n	800dce8 <tcp_parseopt+0xcc>
            return;
 800dce6:	bf00      	nop
      }
    }
  }
}
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	080136ec 	.word	0x080136ec
 800dcf4:	08013b50 	.word	0x08013b50
 800dcf8:	08013738 	.word	0x08013738
 800dcfc:	20000630 	.word	0x20000630
 800dd00:	20000638 	.word	0x20000638

0800dd04 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800dd04:	b480      	push	{r7}
 800dd06:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800dd08:	4b05      	ldr	r3, [pc, #20]	; (800dd20 <tcp_trigger_input_pcb_close+0x1c>)
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	f043 0310 	orr.w	r3, r3, #16
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	4b03      	ldr	r3, [pc, #12]	; (800dd20 <tcp_trigger_input_pcb_close+0x1c>)
 800dd14:	701a      	strb	r2, [r3, #0]
}
 800dd16:	bf00      	nop
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr
 800dd20:	20000649 	.word	0x20000649

0800dd24 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00a      	beq.n	800dd4c <tcp_route+0x28>
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	7a1b      	ldrb	r3, [r3, #8]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d006      	beq.n	800dd4c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	7a1b      	ldrb	r3, [r3, #8]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7fb f8b6 	bl	8008eb4 <netif_get_by_index>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	e003      	b.n	800dd54 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f7f9 f87b 	bl	8006e48 <ip4_route>
 800dd52:	4603      	mov	r3, r0
  }
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3710      	adds	r7, #16
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800dd5c:	b590      	push	{r4, r7, lr}
 800dd5e:	b087      	sub	sp, #28
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	603b      	str	r3, [r7, #0]
 800dd68:	4613      	mov	r3, r2
 800dd6a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d105      	bne.n	800dd7e <tcp_create_segment+0x22>
 800dd72:	4b45      	ldr	r3, [pc, #276]	; (800de88 <tcp_create_segment+0x12c>)
 800dd74:	22a3      	movs	r2, #163	; 0xa3
 800dd76:	4945      	ldr	r1, [pc, #276]	; (800de8c <tcp_create_segment+0x130>)
 800dd78:	4845      	ldr	r0, [pc, #276]	; (800de90 <tcp_create_segment+0x134>)
 800dd7a:	f002 fe3f 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d105      	bne.n	800dd90 <tcp_create_segment+0x34>
 800dd84:	4b40      	ldr	r3, [pc, #256]	; (800de88 <tcp_create_segment+0x12c>)
 800dd86:	22a4      	movs	r2, #164	; 0xa4
 800dd88:	4942      	ldr	r1, [pc, #264]	; (800de94 <tcp_create_segment+0x138>)
 800dd8a:	4841      	ldr	r0, [pc, #260]	; (800de90 <tcp_create_segment+0x134>)
 800dd8c:	f002 fe36 	bl	80109fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dd90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dd94:	f003 0301 	and.w	r3, r3, #1
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d001      	beq.n	800dda0 <tcp_create_segment+0x44>
 800dd9c:	2304      	movs	r3, #4
 800dd9e:	e000      	b.n	800dda2 <tcp_create_segment+0x46>
 800dda0:	2300      	movs	r3, #0
 800dda2:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800dda4:	2003      	movs	r0, #3
 800dda6:	f7fa fd7f 	bl	80088a8 <memp_malloc>
 800ddaa:	6138      	str	r0, [r7, #16]
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d104      	bne.n	800ddbc <tcp_create_segment+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ddb2:	68b8      	ldr	r0, [r7, #8]
 800ddb4:	f7fb fbdc 	bl	8009570 <pbuf_free>
    return NULL;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	e061      	b.n	800de80 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ddc2:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	68ba      	ldr	r2, [r7, #8]
 800ddce:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	891a      	ldrh	r2, [r3, #8]
 800ddd4:	7dfb      	ldrb	r3, [r7, #23]
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d205      	bcs.n	800dde8 <tcp_create_segment+0x8c>
 800dddc:	4b2a      	ldr	r3, [pc, #168]	; (800de88 <tcp_create_segment+0x12c>)
 800ddde:	22b0      	movs	r2, #176	; 0xb0
 800dde0:	492d      	ldr	r1, [pc, #180]	; (800de98 <tcp_create_segment+0x13c>)
 800dde2:	482b      	ldr	r0, [pc, #172]	; (800de90 <tcp_create_segment+0x134>)
 800dde4:	f002 fe0a 	bl	80109fc <iprintf>
  seg->len = p->tot_len - optlen;
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	891a      	ldrh	r2, [r3, #8]
 800ddec:	7dfb      	ldrb	r3, [r7, #23]
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	1ad3      	subs	r3, r2, r3
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ddf8:	2114      	movs	r1, #20
 800ddfa:	68b8      	ldr	r0, [r7, #8]
 800ddfc:	f7fb fb22 	bl	8009444 <pbuf_add_header>
 800de00:	4603      	mov	r3, r0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d004      	beq.n	800de10 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800de06:	6938      	ldr	r0, [r7, #16]
 800de08:	f7fc ffe6 	bl	800add8 <tcp_seg_free>
    return NULL;
 800de0c:	2300      	movs	r3, #0
 800de0e:	e037      	b.n	800de80 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	685a      	ldr	r2, [r3, #4]
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	68dc      	ldr	r4, [r3, #12]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	8adb      	ldrh	r3, [r3, #22]
 800de22:	4618      	mov	r0, r3
 800de24:	f7f6 f862 	bl	8003eec <lwip_htons>
 800de28:	4603      	mov	r3, r0
 800de2a:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	68dc      	ldr	r4, [r3, #12]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	8b1b      	ldrh	r3, [r3, #24]
 800de34:	4618      	mov	r0, r3
 800de36:	f7f6 f859 	bl	8003eec <lwip_htons>
 800de3a:	4603      	mov	r3, r0
 800de3c:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	68dc      	ldr	r4, [r3, #12]
 800de42:	6838      	ldr	r0, [r7, #0]
 800de44:	f7f6 f867 	bl	8003f16 <lwip_htonl>
 800de48:	4603      	mov	r3, r0
 800de4a:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	68dc      	ldr	r4, [r3, #12]
 800de50:	7dfb      	ldrb	r3, [r7, #23]
 800de52:	089b      	lsrs	r3, r3, #2
 800de54:	b2db      	uxtb	r3, r3
 800de56:	b29b      	uxth	r3, r3
 800de58:	3305      	adds	r3, #5
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	031b      	lsls	r3, r3, #12
 800de5e:	b29a      	uxth	r2, r3
 800de60:	79fb      	ldrb	r3, [r7, #7]
 800de62:	b29b      	uxth	r3, r3
 800de64:	4313      	orrs	r3, r2
 800de66:	b29b      	uxth	r3, r3
 800de68:	4618      	mov	r0, r3
 800de6a:	f7f6 f83f 	bl	8003eec <lwip_htons>
 800de6e:	4603      	mov	r3, r0
 800de70:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	2200      	movs	r2, #0
 800de78:	749a      	strb	r2, [r3, #18]
 800de7a:	2200      	movs	r2, #0
 800de7c:	74da      	strb	r2, [r3, #19]
  return seg;
 800de7e:	693b      	ldr	r3, [r7, #16]
}
 800de80:	4618      	mov	r0, r3
 800de82:	371c      	adds	r7, #28
 800de84:	46bd      	mov	sp, r7
 800de86:	bd90      	pop	{r4, r7, pc}
 800de88:	08013b6c 	.word	0x08013b6c
 800de8c:	08013ba0 	.word	0x08013ba0
 800de90:	08013bc0 	.word	0x08013bc0
 800de94:	08013be8 	.word	0x08013be8
 800de98:	08013c0c 	.word	0x08013c0c

0800de9c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b086      	sub	sp, #24
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	607b      	str	r3, [r7, #4]
 800dea4:	4603      	mov	r3, r0
 800dea6:	73fb      	strb	r3, [r7, #15]
 800dea8:	460b      	mov	r3, r1
 800deaa:	81bb      	strh	r3, [r7, #12]
 800deac:	4613      	mov	r3, r2
 800deae:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800deb0:	89bb      	ldrh	r3, [r7, #12]
 800deb2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d105      	bne.n	800dec6 <tcp_pbuf_prealloc+0x2a>
 800deba:	4b30      	ldr	r3, [pc, #192]	; (800df7c <tcp_pbuf_prealloc+0xe0>)
 800debc:	22e8      	movs	r2, #232	; 0xe8
 800debe:	4930      	ldr	r1, [pc, #192]	; (800df80 <tcp_pbuf_prealloc+0xe4>)
 800dec0:	4830      	ldr	r0, [pc, #192]	; (800df84 <tcp_pbuf_prealloc+0xe8>)
 800dec2:	f002 fd9b 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d105      	bne.n	800ded8 <tcp_pbuf_prealloc+0x3c>
 800decc:	4b2b      	ldr	r3, [pc, #172]	; (800df7c <tcp_pbuf_prealloc+0xe0>)
 800dece:	22e9      	movs	r2, #233	; 0xe9
 800ded0:	492d      	ldr	r1, [pc, #180]	; (800df88 <tcp_pbuf_prealloc+0xec>)
 800ded2:	482c      	ldr	r0, [pc, #176]	; (800df84 <tcp_pbuf_prealloc+0xe8>)
 800ded4:	f002 fd92 	bl	80109fc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ded8:	89ba      	ldrh	r2, [r7, #12]
 800deda:	897b      	ldrh	r3, [r7, #10]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d221      	bcs.n	800df24 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800dee0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dee4:	f003 0302 	and.w	r3, r3, #2
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d111      	bne.n	800df10 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800deec:	6a3b      	ldr	r3, [r7, #32]
 800deee:	8b5b      	ldrh	r3, [r3, #26]
 800def0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800def4:	2b00      	cmp	r3, #0
 800def6:	d115      	bne.n	800df24 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800def8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800defc:	2b00      	cmp	r3, #0
 800defe:	d007      	beq.n	800df10 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800df00:	6a3b      	ldr	r3, [r7, #32]
 800df02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800df04:	2b00      	cmp	r3, #0
 800df06:	d103      	bne.n	800df10 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800df08:	6a3b      	ldr	r3, [r7, #32]
 800df0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d009      	beq.n	800df24 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800df10:	89bb      	ldrh	r3, [r7, #12]
 800df12:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800df16:	f023 0203 	bic.w	r2, r3, #3
 800df1a:	897b      	ldrh	r3, [r7, #10]
 800df1c:	4293      	cmp	r3, r2
 800df1e:	bf28      	it	cs
 800df20:	4613      	movcs	r3, r2
 800df22:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800df24:	8af9      	ldrh	r1, [r7, #22]
 800df26:	7bfb      	ldrb	r3, [r7, #15]
 800df28:	f44f 7220 	mov.w	r2, #640	; 0x280
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fb f83d 	bl	8008fac <pbuf_alloc>
 800df32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	e019      	b.n	800df72 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d006      	beq.n	800df54 <tcp_pbuf_prealloc+0xb8>
 800df46:	4b0d      	ldr	r3, [pc, #52]	; (800df7c <tcp_pbuf_prealloc+0xe0>)
 800df48:	f240 120b 	movw	r2, #267	; 0x10b
 800df4c:	490f      	ldr	r1, [pc, #60]	; (800df8c <tcp_pbuf_prealloc+0xf0>)
 800df4e:	480d      	ldr	r0, [pc, #52]	; (800df84 <tcp_pbuf_prealloc+0xe8>)
 800df50:	f002 fd54 	bl	80109fc <iprintf>
  *oversize = p->len - length;
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	895a      	ldrh	r2, [r3, #10]
 800df58:	89bb      	ldrh	r3, [r7, #12]
 800df5a:	1ad3      	subs	r3, r2, r3
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	89ba      	ldrh	r2, [r7, #12]
 800df66:	811a      	strh	r2, [r3, #8]
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	891a      	ldrh	r2, [r3, #8]
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	815a      	strh	r2, [r3, #10]
  return p;
 800df70:	693b      	ldr	r3, [r7, #16]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3718      	adds	r7, #24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	08013b6c 	.word	0x08013b6c
 800df80:	08013c24 	.word	0x08013c24
 800df84:	08013bc0 	.word	0x08013bc0
 800df88:	08013c48 	.word	0x08013c48
 800df8c:	08013c68 	.word	0x08013c68

0800df90 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	460b      	mov	r3, r1
 800df9a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d106      	bne.n	800dfb0 <tcp_write_checks+0x20>
 800dfa2:	4b33      	ldr	r3, [pc, #204]	; (800e070 <tcp_write_checks+0xe0>)
 800dfa4:	f240 1233 	movw	r2, #307	; 0x133
 800dfa8:	4932      	ldr	r1, [pc, #200]	; (800e074 <tcp_write_checks+0xe4>)
 800dfaa:	4833      	ldr	r0, [pc, #204]	; (800e078 <tcp_write_checks+0xe8>)
 800dfac:	f002 fd26 	bl	80109fc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	7d1b      	ldrb	r3, [r3, #20]
 800dfb4:	2b04      	cmp	r3, #4
 800dfb6:	d00e      	beq.n	800dfd6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800dfbc:	2b07      	cmp	r3, #7
 800dfbe:	d00a      	beq.n	800dfd6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d006      	beq.n	800dfd6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800dfcc:	2b03      	cmp	r3, #3
 800dfce:	d002      	beq.n	800dfd6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800dfd0:	f06f 030a 	mvn.w	r3, #10
 800dfd4:	e048      	b.n	800e068 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800dfd6:	887b      	ldrh	r3, [r7, #2]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d101      	bne.n	800dfe0 <tcp_write_checks+0x50>
    return ERR_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	e043      	b.n	800e068 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dfe6:	887a      	ldrh	r2, [r7, #2]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d909      	bls.n	800e000 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	8b5b      	ldrh	r3, [r3, #26]
 800dff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800dffa:	f04f 33ff 	mov.w	r3, #4294967295
 800dffe:	e033      	b.n	800e068 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e006:	2b08      	cmp	r3, #8
 800e008:	d909      	bls.n	800e01e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	8b5b      	ldrh	r3, [r3, #26]
 800e00e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e012:	b29a      	uxth	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800e018:	f04f 33ff 	mov.w	r3, #4294967295
 800e01c:	e024      	b.n	800e068 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e024:	2b00      	cmp	r3, #0
 800e026:	d00f      	beq.n	800e048 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d11a      	bne.n	800e066 <tcp_write_checks+0xd6>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e034:	2b00      	cmp	r3, #0
 800e036:	d116      	bne.n	800e066 <tcp_write_checks+0xd6>
 800e038:	4b0d      	ldr	r3, [pc, #52]	; (800e070 <tcp_write_checks+0xe0>)
 800e03a:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800e03e:	490f      	ldr	r1, [pc, #60]	; (800e07c <tcp_write_checks+0xec>)
 800e040:	480d      	ldr	r0, [pc, #52]	; (800e078 <tcp_write_checks+0xe8>)
 800e042:	f002 fcdb 	bl	80109fc <iprintf>
 800e046:	e00e      	b.n	800e066 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d103      	bne.n	800e058 <tcp_write_checks+0xc8>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e054:	2b00      	cmp	r3, #0
 800e056:	d006      	beq.n	800e066 <tcp_write_checks+0xd6>
 800e058:	4b05      	ldr	r3, [pc, #20]	; (800e070 <tcp_write_checks+0xe0>)
 800e05a:	f240 1259 	movw	r2, #345	; 0x159
 800e05e:	4908      	ldr	r1, [pc, #32]	; (800e080 <tcp_write_checks+0xf0>)
 800e060:	4805      	ldr	r0, [pc, #20]	; (800e078 <tcp_write_checks+0xe8>)
 800e062:	f002 fccb 	bl	80109fc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800e066:	2300      	movs	r3, #0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	08013b6c 	.word	0x08013b6c
 800e074:	08013c7c 	.word	0x08013c7c
 800e078:	08013bc0 	.word	0x08013bc0
 800e07c:	08013c9c 	.word	0x08013c9c
 800e080:	08013cd8 	.word	0x08013cd8

0800e084 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800e084:	b5b0      	push	{r4, r5, r7, lr}
 800e086:	b09a      	sub	sp, #104	; 0x68
 800e088:	af04      	add	r7, sp, #16
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	4611      	mov	r1, r2
 800e090:	461a      	mov	r2, r3
 800e092:	460b      	mov	r3, r1
 800e094:	80fb      	strh	r3, [r7, #6]
 800e096:	4613      	mov	r3, r2
 800e098:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800e09a:	2300      	movs	r3, #0
 800e09c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	653b      	str	r3, [r7, #80]	; 0x50
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d109      	bne.n	800e0e0 <tcp_write+0x5c>
 800e0cc:	4ba6      	ldr	r3, [pc, #664]	; (800e368 <tcp_write+0x2e4>)
 800e0ce:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800e0d2:	49a6      	ldr	r1, [pc, #664]	; (800e36c <tcp_write+0x2e8>)
 800e0d4:	48a6      	ldr	r0, [pc, #664]	; (800e370 <tcp_write+0x2ec>)
 800e0d6:	f002 fc91 	bl	80109fc <iprintf>
 800e0da:	f06f 030f 	mvn.w	r3, #15
 800e0de:	e32d      	b.n	800e73c <tcp_write+0x6b8>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e0e6:	085b      	lsrs	r3, r3, #1
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	bf28      	it	cs
 800e0f2:	4613      	movcs	r3, r2
 800e0f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800e0f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d102      	bne.n	800e102 <tcp_write+0x7e>
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e100:	e000      	b.n	800e104 <tcp_write+0x80>
 800e102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e104:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d109      	bne.n	800e120 <tcp_write+0x9c>
 800e10c:	4b96      	ldr	r3, [pc, #600]	; (800e368 <tcp_write+0x2e4>)
 800e10e:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800e112:	4998      	ldr	r1, [pc, #608]	; (800e374 <tcp_write+0x2f0>)
 800e114:	4896      	ldr	r0, [pc, #600]	; (800e370 <tcp_write+0x2ec>)
 800e116:	f002 fc71 	bl	80109fc <iprintf>
 800e11a:	f06f 030f 	mvn.w	r3, #15
 800e11e:	e30d      	b.n	800e73c <tcp_write+0x6b8>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800e120:	88fb      	ldrh	r3, [r7, #6]
 800e122:	4619      	mov	r1, r3
 800e124:	68f8      	ldr	r0, [r7, #12]
 800e126:	f7ff ff33 	bl	800df90 <tcp_write_checks>
 800e12a:	4603      	mov	r3, r0
 800e12c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800e130:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <tcp_write+0xba>
    return err;
 800e138:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e13c:	e2fe      	b.n	800e73c <tcp_write+0x6b8>
  }
  queuelen = pcb->snd_queuelen;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e144:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e148:	2300      	movs	r3, #0
 800e14a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e152:	2b00      	cmp	r3, #0
 800e154:	f000 80fa 	beq.w	800e34c <tcp_write+0x2c8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e15c:	653b      	str	r3, [r7, #80]	; 0x50
 800e15e:	e002      	b.n	800e166 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800e160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d1f8      	bne.n	800e160 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800e16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e170:	7a9b      	ldrb	r3, [r3, #10]
 800e172:	f003 0301 	and.w	r3, r3, #1
 800e176:	2b00      	cmp	r3, #0
 800e178:	d001      	beq.n	800e17e <tcp_write+0xfa>
 800e17a:	2304      	movs	r3, #4
 800e17c:	e000      	b.n	800e180 <tcp_write+0xfc>
 800e17e:	2300      	movs	r3, #0
 800e180:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800e182:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e186:	891b      	ldrh	r3, [r3, #8]
 800e188:	4619      	mov	r1, r3
 800e18a:	8c3b      	ldrh	r3, [r7, #32]
 800e18c:	440b      	add	r3, r1
 800e18e:	429a      	cmp	r2, r3
 800e190:	da06      	bge.n	800e1a0 <tcp_write+0x11c>
 800e192:	4b75      	ldr	r3, [pc, #468]	; (800e368 <tcp_write+0x2e4>)
 800e194:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e198:	4977      	ldr	r1, [pc, #476]	; (800e378 <tcp_write+0x2f4>)
 800e19a:	4875      	ldr	r0, [pc, #468]	; (800e370 <tcp_write+0x2ec>)
 800e19c:	f002 fc2e 	bl	80109fc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800e1a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1a2:	891a      	ldrh	r2, [r3, #8]
 800e1a4:	8c3b      	ldrh	r3, [r7, #32]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e1b6:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800e1b8:	8a7b      	ldrh	r3, [r7, #18]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d027      	beq.n	800e20e <tcp_write+0x18a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800e1be:	8a7b      	ldrh	r3, [r7, #18]
 800e1c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d206      	bcs.n	800e1d4 <tcp_write+0x150>
 800e1c6:	4b68      	ldr	r3, [pc, #416]	; (800e368 <tcp_write+0x2e4>)
 800e1c8:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800e1cc:	496b      	ldr	r1, [pc, #428]	; (800e37c <tcp_write+0x2f8>)
 800e1ce:	4868      	ldr	r0, [pc, #416]	; (800e370 <tcp_write+0x2ec>)
 800e1d0:	f002 fc14 	bl	80109fc <iprintf>
      seg = last_unsent;
 800e1d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800e1d8:	8a7b      	ldrh	r3, [r7, #18]
 800e1da:	88fa      	ldrh	r2, [r7, #6]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d901      	bls.n	800e1e4 <tcp_write+0x160>
 800e1e0:	8a7b      	ldrh	r3, [r7, #18]
 800e1e2:	e000      	b.n	800e1e6 <tcp_write+0x162>
 800e1e4:	88fb      	ldrh	r3, [r7, #6]
 800e1e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	bfa8      	it	ge
 800e1ec:	4613      	movge	r3, r2
 800e1ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800e1f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e1f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e1f6:	4413      	add	r3, r2
 800e1f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800e1fc:	8a7a      	ldrh	r2, [r7, #18]
 800e1fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	b29b      	uxth	r3, r3
 800e204:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800e206:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e208:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800e20e:	8a7b      	ldrh	r3, [r7, #18]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d00b      	beq.n	800e22c <tcp_write+0x1a8>
 800e214:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e218:	88fb      	ldrh	r3, [r7, #6]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d006      	beq.n	800e22c <tcp_write+0x1a8>
 800e21e:	4b52      	ldr	r3, [pc, #328]	; (800e368 <tcp_write+0x2e4>)
 800e220:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e224:	4956      	ldr	r1, [pc, #344]	; (800e380 <tcp_write+0x2fc>)
 800e226:	4852      	ldr	r0, [pc, #328]	; (800e370 <tcp_write+0x2ec>)
 800e228:	f002 fbe8 	bl	80109fc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800e22c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e230:	88fb      	ldrh	r3, [r7, #6]
 800e232:	429a      	cmp	r2, r3
 800e234:	f080 8167 	bcs.w	800e506 <tcp_write+0x482>
 800e238:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	f000 8163 	beq.w	800e506 <tcp_write+0x482>
 800e240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e242:	891b      	ldrh	r3, [r3, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	f000 815e 	beq.w	800e506 <tcp_write+0x482>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800e24a:	88fa      	ldrh	r2, [r7, #6]
 800e24c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e250:	1ad2      	subs	r2, r2, r3
 800e252:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e254:	4293      	cmp	r3, r2
 800e256:	bfa8      	it	ge
 800e258:	4613      	movge	r3, r2
 800e25a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800e25c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e25e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e260:	797b      	ldrb	r3, [r7, #5]
 800e262:	f003 0301 	and.w	r3, r3, #1
 800e266:	2b00      	cmp	r3, #0
 800e268:	d027      	beq.n	800e2ba <tcp_write+0x236>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800e26a:	f107 0012 	add.w	r0, r7, #18
 800e26e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e270:	8bf9      	ldrh	r1, [r7, #30]
 800e272:	2301      	movs	r3, #1
 800e274:	9302      	str	r3, [sp, #8]
 800e276:	797b      	ldrb	r3, [r7, #5]
 800e278:	9301      	str	r3, [sp, #4]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	9300      	str	r3, [sp, #0]
 800e27e:	4603      	mov	r3, r0
 800e280:	2000      	movs	r0, #0
 800e282:	f7ff fe0b 	bl	800de9c <tcp_pbuf_prealloc>
 800e286:	6578      	str	r0, [r7, #84]	; 0x54
 800e288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f000 8224 	beq.w	800e6d8 <tcp_write+0x654>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800e290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e292:	6858      	ldr	r0, [r3, #4]
 800e294:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	4413      	add	r3, r2
 800e29c:	8bfa      	ldrh	r2, [r7, #30]
 800e29e:	4619      	mov	r1, r3
 800e2a0:	f002 fb99 	bl	80109d6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800e2a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e2a6:	f7fb f9eb 	bl	8009680 <pbuf_clen>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e2b2:	4413      	add	r3, r2
 800e2b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e2b8:	e041      	b.n	800e33e <tcp_write+0x2ba>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800e2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	637b      	str	r3, [r7, #52]	; 0x34
 800e2c0:	e002      	b.n	800e2c8 <tcp_write+0x244>
 800e2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	637b      	str	r3, [r7, #52]	; 0x34
 800e2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1f8      	bne.n	800e2c2 <tcp_write+0x23e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d2:	7b1b      	ldrb	r3, [r3, #12]
 800e2d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d115      	bne.n	800e308 <tcp_write+0x284>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800e2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2e2:	8952      	ldrh	r2, [r2, #10]
 800e2e4:	441a      	add	r2, r3
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d10d      	bne.n	800e308 <tcp_write+0x284>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e2ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d006      	beq.n	800e302 <tcp_write+0x27e>
 800e2f4:	4b1c      	ldr	r3, [pc, #112]	; (800e368 <tcp_write+0x2e4>)
 800e2f6:	f240 2231 	movw	r2, #561	; 0x231
 800e2fa:	4922      	ldr	r1, [pc, #136]	; (800e384 <tcp_write+0x300>)
 800e2fc:	481c      	ldr	r0, [pc, #112]	; (800e370 <tcp_write+0x2ec>)
 800e2fe:	f002 fb7d 	bl	80109fc <iprintf>
          extendlen = seglen;
 800e302:	8bfb      	ldrh	r3, [r7, #30]
 800e304:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e306:	e01a      	b.n	800e33e <tcp_write+0x2ba>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800e308:	8bfb      	ldrh	r3, [r7, #30]
 800e30a:	2201      	movs	r2, #1
 800e30c:	4619      	mov	r1, r3
 800e30e:	2000      	movs	r0, #0
 800e310:	f7fa fe4c 	bl	8008fac <pbuf_alloc>
 800e314:	6578      	str	r0, [r7, #84]	; 0x54
 800e316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e318:	2b00      	cmp	r3, #0
 800e31a:	f000 81df 	beq.w	800e6dc <tcp_write+0x658>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800e31e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	441a      	add	r2, r3
 800e326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e328:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800e32a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e32c:	f7fb f9a8 	bl	8009680 <pbuf_clen>
 800e330:	4603      	mov	r3, r0
 800e332:	461a      	mov	r2, r3
 800e334:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e338:	4413      	add	r3, r2
 800e33a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800e33e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e342:	8bfb      	ldrh	r3, [r7, #30]
 800e344:	4413      	add	r3, r2
 800e346:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e34a:	e0dc      	b.n	800e506 <tcp_write+0x482>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e352:	2b00      	cmp	r3, #0
 800e354:	f000 80d7 	beq.w	800e506 <tcp_write+0x482>
 800e358:	4b03      	ldr	r3, [pc, #12]	; (800e368 <tcp_write+0x2e4>)
 800e35a:	f240 224b 	movw	r2, #587	; 0x24b
 800e35e:	490a      	ldr	r1, [pc, #40]	; (800e388 <tcp_write+0x304>)
 800e360:	4803      	ldr	r0, [pc, #12]	; (800e370 <tcp_write+0x2ec>)
 800e362:	f002 fb4b 	bl	80109fc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800e366:	e0ce      	b.n	800e506 <tcp_write+0x482>
 800e368:	08013b6c 	.word	0x08013b6c
 800e36c:	08013d0c 	.word	0x08013d0c
 800e370:	08013bc0 	.word	0x08013bc0
 800e374:	08013d24 	.word	0x08013d24
 800e378:	08013d58 	.word	0x08013d58
 800e37c:	08013d70 	.word	0x08013d70
 800e380:	08013d90 	.word	0x08013d90
 800e384:	08013db0 	.word	0x08013db0
 800e388:	08013ddc 	.word	0x08013ddc
    struct pbuf *p;
    u16_t left = len - pos;
 800e38c:	88fa      	ldrh	r2, [r7, #6]
 800e38e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e392:	1ad3      	subs	r3, r2, r3
 800e394:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800e396:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800e3a2:	8b7a      	ldrh	r2, [r7, #26]
 800e3a4:	8bbb      	ldrh	r3, [r7, #28]
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	bf28      	it	cs
 800e3aa:	4613      	movcs	r3, r2
 800e3ac:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e3ae:	797b      	ldrb	r3, [r7, #5]
 800e3b0:	f003 0301 	and.w	r3, r3, #1
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d036      	beq.n	800e426 <tcp_write+0x3a2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800e3b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	8b3b      	ldrh	r3, [r7, #24]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	b299      	uxth	r1, r3
 800e3c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	bf0c      	ite	eq
 800e3ca:	2301      	moveq	r3, #1
 800e3cc:	2300      	movne	r3, #0
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	f107 0012 	add.w	r0, r7, #18
 800e3d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3d6:	9302      	str	r3, [sp, #8]
 800e3d8:	797b      	ldrb	r3, [r7, #5]
 800e3da:	9301      	str	r3, [sp, #4]
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2036      	movs	r0, #54	; 0x36
 800e3e4:	f7ff fd5a 	bl	800de9c <tcp_pbuf_prealloc>
 800e3e8:	6338      	str	r0, [r7, #48]	; 0x30
 800e3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	f000 8177 	beq.w	800e6e0 <tcp_write+0x65c>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f4:	895b      	ldrh	r3, [r3, #10]
 800e3f6:	8b3a      	ldrh	r2, [r7, #24]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d906      	bls.n	800e40a <tcp_write+0x386>
 800e3fc:	4b8c      	ldr	r3, [pc, #560]	; (800e630 <tcp_write+0x5ac>)
 800e3fe:	f240 2267 	movw	r2, #615	; 0x267
 800e402:	498c      	ldr	r1, [pc, #560]	; (800e634 <tcp_write+0x5b0>)
 800e404:	488c      	ldr	r0, [pc, #560]	; (800e638 <tcp_write+0x5b4>)
 800e406:	f002 faf9 	bl	80109fc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800e40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40c:	685a      	ldr	r2, [r3, #4]
 800e40e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e412:	18d0      	adds	r0, r2, r3
 800e414:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e418:	68ba      	ldr	r2, [r7, #8]
 800e41a:	4413      	add	r3, r2
 800e41c:	8b3a      	ldrh	r2, [r7, #24]
 800e41e:	4619      	mov	r1, r3
 800e420:	f002 fad9 	bl	80109d6 <memcpy>
 800e424:	e02f      	b.n	800e486 <tcp_write+0x402>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800e426:	8a7b      	ldrh	r3, [r7, #18]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d006      	beq.n	800e43a <tcp_write+0x3b6>
 800e42c:	4b80      	ldr	r3, [pc, #512]	; (800e630 <tcp_write+0x5ac>)
 800e42e:	f240 2271 	movw	r2, #625	; 0x271
 800e432:	4982      	ldr	r1, [pc, #520]	; (800e63c <tcp_write+0x5b8>)
 800e434:	4880      	ldr	r0, [pc, #512]	; (800e638 <tcp_write+0x5b4>)
 800e436:	f002 fae1 	bl	80109fc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800e43a:	8b3b      	ldrh	r3, [r7, #24]
 800e43c:	2201      	movs	r2, #1
 800e43e:	4619      	mov	r1, r3
 800e440:	2036      	movs	r0, #54	; 0x36
 800e442:	f7fa fdb3 	bl	8008fac <pbuf_alloc>
 800e446:	6178      	str	r0, [r7, #20]
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	f000 814a 	beq.w	800e6e4 <tcp_write+0x660>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800e450:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e454:	68ba      	ldr	r2, [r7, #8]
 800e456:	441a      	add	r2, r3
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e45c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e460:	b29b      	uxth	r3, r3
 800e462:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e466:	4619      	mov	r1, r3
 800e468:	2036      	movs	r0, #54	; 0x36
 800e46a:	f7fa fd9f 	bl	8008fac <pbuf_alloc>
 800e46e:	6338      	str	r0, [r7, #48]	; 0x30
 800e470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e472:	2b00      	cmp	r3, #0
 800e474:	d103      	bne.n	800e47e <tcp_write+0x3fa>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800e476:	6978      	ldr	r0, [r7, #20]
 800e478:	f7fb f87a 	bl	8009570 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800e47c:	e135      	b.n	800e6ea <tcp_write+0x666>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800e47e:	6979      	ldr	r1, [r7, #20]
 800e480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e482:	f7fb f937 	bl	80096f4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800e486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e488:	f7fb f8fa 	bl	8009680 <pbuf_clen>
 800e48c:	4603      	mov	r3, r0
 800e48e:	461a      	mov	r2, r3
 800e490:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e494:	4413      	add	r3, r2
 800e496:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800e49a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e49e:	2b09      	cmp	r3, #9
 800e4a0:	d903      	bls.n	800e4aa <tcp_write+0x426>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800e4a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4a4:	f7fb f864 	bl	8009570 <pbuf_free>
      goto memerr;
 800e4a8:	e11f      	b.n	800e6ea <tcp_write+0x666>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e4ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e4b2:	441a      	add	r2, r3
 800e4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	4613      	mov	r3, r2
 800e4bc:	2200      	movs	r2, #0
 800e4be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	f7ff fc4b 	bl	800dd5c <tcp_create_segment>
 800e4c6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 810c 	beq.w	800e6e8 <tcp_write+0x664>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800e4d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d102      	bne.n	800e4dc <tcp_write+0x458>
      queue = seg;
 800e4d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4d8:	647b      	str	r3, [r7, #68]	; 0x44
 800e4da:	e00c      	b.n	800e4f6 <tcp_write+0x472>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800e4dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d106      	bne.n	800e4f0 <tcp_write+0x46c>
 800e4e2:	4b53      	ldr	r3, [pc, #332]	; (800e630 <tcp_write+0x5ac>)
 800e4e4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e4e8:	4955      	ldr	r1, [pc, #340]	; (800e640 <tcp_write+0x5bc>)
 800e4ea:	4853      	ldr	r0, [pc, #332]	; (800e638 <tcp_write+0x5b4>)
 800e4ec:	f002 fa86 	bl	80109fc <iprintf>
      prev_seg->next = seg;
 800e4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e4f4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800e4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4f8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800e4fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e4fe:	8b3b      	ldrh	r3, [r7, #24]
 800e500:	4413      	add	r3, r2
 800e502:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800e506:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e50a:	88fb      	ldrh	r3, [r7, #6]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	f4ff af3d 	bcc.w	800e38c <tcp_write+0x308>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800e512:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e514:	2b00      	cmp	r3, #0
 800e516:	d02c      	beq.n	800e572 <tcp_write+0x4ee>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800e518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e51e:	e01e      	b.n	800e55e <tcp_write+0x4da>
      p->tot_len += oversize_used;
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	891a      	ldrh	r2, [r3, #8]
 800e524:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e526:	4413      	add	r3, r2
 800e528:	b29a      	uxth	r2, r3
 800e52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800e52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d110      	bne.n	800e558 <tcp_write+0x4d4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e53c:	8952      	ldrh	r2, [r2, #10]
 800e53e:	4413      	add	r3, r2
 800e540:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e542:	68b9      	ldr	r1, [r7, #8]
 800e544:	4618      	mov	r0, r3
 800e546:	f002 fa46 	bl	80109d6 <memcpy>
        p->len += oversize_used;
 800e54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54c:	895a      	ldrh	r2, [r3, #10]
 800e54e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e550:	4413      	add	r3, r2
 800e552:	b29a      	uxth	r2, r3
 800e554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e556:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e560:	2b00      	cmp	r3, #0
 800e562:	d1dd      	bne.n	800e520 <tcp_write+0x49c>
      }
    }
    last_unsent->len += oversize_used;
 800e564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e566:	891a      	ldrh	r2, [r3, #8]
 800e568:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e56a:	4413      	add	r3, r2
 800e56c:	b29a      	uxth	r2, r3
 800e56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e570:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800e572:	8a7a      	ldrh	r2, [r7, #18]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800e57a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d018      	beq.n	800e5b2 <tcp_write+0x52e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e582:	2b00      	cmp	r3, #0
 800e584:	d106      	bne.n	800e594 <tcp_write+0x510>
 800e586:	4b2a      	ldr	r3, [pc, #168]	; (800e630 <tcp_write+0x5ac>)
 800e588:	f240 22e1 	movw	r2, #737	; 0x2e1
 800e58c:	492d      	ldr	r1, [pc, #180]	; (800e644 <tcp_write+0x5c0>)
 800e58e:	482a      	ldr	r0, [pc, #168]	; (800e638 <tcp_write+0x5b4>)
 800e590:	f002 fa34 	bl	80109fc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800e594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fb f8aa 	bl	80096f4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e5a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5a2:	891a      	ldrh	r2, [r3, #8]
 800e5a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5a6:	891b      	ldrh	r3, [r3, #8]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	b29a      	uxth	r2, r3
 800e5ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5ae:	811a      	strh	r2, [r3, #8]
 800e5b0:	e037      	b.n	800e622 <tcp_write+0x59e>
  } else if (extendlen > 0) {
 800e5b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d034      	beq.n	800e622 <tcp_write+0x59e>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e5b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d003      	beq.n	800e5c6 <tcp_write+0x542>
 800e5be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d106      	bne.n	800e5d4 <tcp_write+0x550>
 800e5c6:	4b1a      	ldr	r3, [pc, #104]	; (800e630 <tcp_write+0x5ac>)
 800e5c8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e5cc:	491e      	ldr	r1, [pc, #120]	; (800e648 <tcp_write+0x5c4>)
 800e5ce:	481a      	ldr	r0, [pc, #104]	; (800e638 <tcp_write+0x5b4>)
 800e5d0:	f002 fa14 	bl	80109fc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e5d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5da:	e009      	b.n	800e5f0 <tcp_write+0x56c>
      p->tot_len += extendlen;
 800e5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5de:	891a      	ldrh	r2, [r3, #8]
 800e5e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e5e2:	4413      	add	r3, r2
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d1f1      	bne.n	800e5dc <tcp_write+0x558>
    }
    p->tot_len += extendlen;
 800e5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fa:	891a      	ldrh	r2, [r3, #8]
 800e5fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e5fe:	4413      	add	r3, r2
 800e600:	b29a      	uxth	r2, r3
 800e602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e604:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e608:	895a      	ldrh	r2, [r3, #10]
 800e60a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e60c:	4413      	add	r3, r2
 800e60e:	b29a      	uxth	r2, r3
 800e610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e612:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e616:	891a      	ldrh	r2, [r3, #8]
 800e618:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e61a:	4413      	add	r3, r2
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e620:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e624:	2b00      	cmp	r3, #0
 800e626:	d111      	bne.n	800e64c <tcp_write+0x5c8>
    pcb->unsent = queue;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e62c:	66da      	str	r2, [r3, #108]	; 0x6c
 800e62e:	e010      	b.n	800e652 <tcp_write+0x5ce>
 800e630:	08013b6c 	.word	0x08013b6c
 800e634:	08013e0c 	.word	0x08013e0c
 800e638:	08013bc0 	.word	0x08013bc0
 800e63c:	08013e4c 	.word	0x08013e4c
 800e640:	08013e5c 	.word	0x08013e5c
 800e644:	08013e70 	.word	0x08013e70
 800e648:	08013ea8 	.word	0x08013ea8
  } else {
    last_unsent->next = queue;
 800e64c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e64e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e650:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e656:	88fb      	ldrh	r3, [r7, #6]
 800e658:	441a      	add	r2, r3
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e664:	88fb      	ldrh	r3, [r7, #6]
 800e666:	1ad3      	subs	r3, r2, r3
 800e668:	b29a      	uxth	r2, r3
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e676:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00e      	beq.n	800e6a2 <tcp_write+0x61e>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d10a      	bne.n	800e6a2 <tcp_write+0x61e>
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e690:	2b00      	cmp	r3, #0
 800e692:	d106      	bne.n	800e6a2 <tcp_write+0x61e>
 800e694:	4b2b      	ldr	r3, [pc, #172]	; (800e744 <tcp_write+0x6c0>)
 800e696:	f240 3213 	movw	r2, #787	; 0x313
 800e69a:	492b      	ldr	r1, [pc, #172]	; (800e748 <tcp_write+0x6c4>)
 800e69c:	482b      	ldr	r0, [pc, #172]	; (800e74c <tcp_write+0x6c8>)
 800e69e:	f002 f9ad 	bl	80109fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e6a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d015      	beq.n	800e6d4 <tcp_write+0x650>
 800e6a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d011      	beq.n	800e6d4 <tcp_write+0x650>
 800e6b0:	797b      	ldrb	r3, [r7, #5]
 800e6b2:	f003 0302 	and.w	r3, r3, #2
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10c      	bne.n	800e6d4 <tcp_write+0x650>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e6ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6bc:	68dc      	ldr	r4, [r3, #12]
 800e6be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	899b      	ldrh	r3, [r3, #12]
 800e6c4:	b29d      	uxth	r5, r3
 800e6c6:	2008      	movs	r0, #8
 800e6c8:	f7f5 fc10 	bl	8003eec <lwip_htons>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	432b      	orrs	r3, r5
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	e031      	b.n	800e73c <tcp_write+0x6b8>
          goto memerr;
 800e6d8:	bf00      	nop
 800e6da:	e006      	b.n	800e6ea <tcp_write+0x666>
            goto memerr;
 800e6dc:	bf00      	nop
 800e6de:	e004      	b.n	800e6ea <tcp_write+0x666>
        goto memerr;
 800e6e0:	bf00      	nop
 800e6e2:	e002      	b.n	800e6ea <tcp_write+0x666>
        goto memerr;
 800e6e4:	bf00      	nop
 800e6e6:	e000      	b.n	800e6ea <tcp_write+0x666>
      goto memerr;
 800e6e8:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	8b5b      	ldrh	r3, [r3, #26]
 800e6ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e6f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d002      	beq.n	800e704 <tcp_write+0x680>
    pbuf_free(concat_p);
 800e6fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e700:	f7fa ff36 	bl	8009570 <pbuf_free>
  }
  if (queue != NULL) {
 800e704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e706:	2b00      	cmp	r3, #0
 800e708:	d002      	beq.n	800e710 <tcp_write+0x68c>
    tcp_segs_free(queue);
 800e70a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e70c:	f7fc fb50 	bl	800adb0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00e      	beq.n	800e738 <tcp_write+0x6b4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d10a      	bne.n	800e738 <tcp_write+0x6b4>
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e726:	2b00      	cmp	r3, #0
 800e728:	d106      	bne.n	800e738 <tcp_write+0x6b4>
 800e72a:	4b06      	ldr	r3, [pc, #24]	; (800e744 <tcp_write+0x6c0>)
 800e72c:	f44f 724a 	mov.w	r2, #808	; 0x328
 800e730:	4905      	ldr	r1, [pc, #20]	; (800e748 <tcp_write+0x6c4>)
 800e732:	4806      	ldr	r0, [pc, #24]	; (800e74c <tcp_write+0x6c8>)
 800e734:	f002 f962 	bl	80109fc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3758      	adds	r7, #88	; 0x58
 800e740:	46bd      	mov	sp, r7
 800e742:	bdb0      	pop	{r4, r5, r7, pc}
 800e744:	08013b6c 	.word	0x08013b6c
 800e748:	08013ee0 	.word	0x08013ee0
 800e74c:	08013bc0 	.word	0x08013bc0

0800e750 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e750:	b5b0      	push	{r4, r5, r7, lr}
 800e752:	b08a      	sub	sp, #40	; 0x28
 800e754:	af02      	add	r7, sp, #8
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	460b      	mov	r3, r1
 800e75a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e75c:	2300      	movs	r3, #0
 800e75e:	61fb      	str	r3, [r7, #28]
 800e760:	2300      	movs	r3, #0
 800e762:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e764:	2300      	movs	r3, #0
 800e766:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d106      	bne.n	800e77c <tcp_split_unsent_seg+0x2c>
 800e76e:	4b96      	ldr	r3, [pc, #600]	; (800e9c8 <tcp_split_unsent_seg+0x278>)
 800e770:	f240 324b 	movw	r2, #843	; 0x34b
 800e774:	4995      	ldr	r1, [pc, #596]	; (800e9cc <tcp_split_unsent_seg+0x27c>)
 800e776:	4896      	ldr	r0, [pc, #600]	; (800e9d0 <tcp_split_unsent_seg+0x280>)
 800e778:	f002 f940 	bl	80109fc <iprintf>

  useg = pcb->unsent;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e780:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d102      	bne.n	800e78e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e788:	f04f 33ff 	mov.w	r3, #4294967295
 800e78c:	e118      	b.n	800e9c0 <tcp_split_unsent_seg+0x270>
  }

  if (split == 0) {
 800e78e:	887b      	ldrh	r3, [r7, #2]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d109      	bne.n	800e7a8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e794:	4b8c      	ldr	r3, [pc, #560]	; (800e9c8 <tcp_split_unsent_seg+0x278>)
 800e796:	f240 3253 	movw	r2, #851	; 0x353
 800e79a:	498e      	ldr	r1, [pc, #568]	; (800e9d4 <tcp_split_unsent_seg+0x284>)
 800e79c:	488c      	ldr	r0, [pc, #560]	; (800e9d0 <tcp_split_unsent_seg+0x280>)
 800e79e:	f002 f92d 	bl	80109fc <iprintf>
    return ERR_VAL;
 800e7a2:	f06f 0305 	mvn.w	r3, #5
 800e7a6:	e10b      	b.n	800e9c0 <tcp_split_unsent_seg+0x270>
  }

  if (useg->len <= split) {
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	891b      	ldrh	r3, [r3, #8]
 800e7ac:	887a      	ldrh	r2, [r7, #2]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d301      	bcc.n	800e7b6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	e104      	b.n	800e9c0 <tcp_split_unsent_seg+0x270>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7ba:	887a      	ldrh	r2, [r7, #2]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d906      	bls.n	800e7ce <tcp_split_unsent_seg+0x7e>
 800e7c0:	4b81      	ldr	r3, [pc, #516]	; (800e9c8 <tcp_split_unsent_seg+0x278>)
 800e7c2:	f240 325b 	movw	r2, #859	; 0x35b
 800e7c6:	4984      	ldr	r1, [pc, #528]	; (800e9d8 <tcp_split_unsent_seg+0x288>)
 800e7c8:	4881      	ldr	r0, [pc, #516]	; (800e9d0 <tcp_split_unsent_seg+0x280>)
 800e7ca:	f002 f917 	bl	80109fc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	891b      	ldrh	r3, [r3, #8]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d106      	bne.n	800e7e4 <tcp_split_unsent_seg+0x94>
 800e7d6:	4b7c      	ldr	r3, [pc, #496]	; (800e9c8 <tcp_split_unsent_seg+0x278>)
 800e7d8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e7dc:	497f      	ldr	r1, [pc, #508]	; (800e9dc <tcp_split_unsent_seg+0x28c>)
 800e7de:	487c      	ldr	r0, [pc, #496]	; (800e9d0 <tcp_split_unsent_seg+0x280>)
 800e7e0:	f002 f90c 	bl	80109fc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	7a9b      	ldrb	r3, [r3, #10]
 800e7e8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e7ea:	7bfb      	ldrb	r3, [r7, #15]
 800e7ec:	f003 0301 	and.w	r3, r3, #1
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d001      	beq.n	800e7f8 <tcp_split_unsent_seg+0xa8>
 800e7f4:	2304      	movs	r3, #4
 800e7f6:	e000      	b.n	800e7fa <tcp_split_unsent_seg+0xaa>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	891a      	ldrh	r2, [r3, #8]
 800e800:	887b      	ldrh	r3, [r7, #2]
 800e802:	1ad3      	subs	r3, r2, r3
 800e804:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e806:	7bbb      	ldrb	r3, [r7, #14]
 800e808:	b29a      	uxth	r2, r3
 800e80a:	89bb      	ldrh	r3, [r7, #12]
 800e80c:	4413      	add	r3, r2
 800e80e:	b29b      	uxth	r3, r3
 800e810:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e814:	4619      	mov	r1, r3
 800e816:	2036      	movs	r0, #54	; 0x36
 800e818:	f7fa fbc8 	bl	8008fac <pbuf_alloc>
 800e81c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	2b00      	cmp	r3, #0
 800e822:	f000 80b6 	beq.w	800e992 <tcp_split_unsent_seg+0x242>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	891a      	ldrh	r2, [r3, #8]
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	891b      	ldrh	r3, [r3, #8]
 800e830:	1ad3      	subs	r3, r2, r3
 800e832:	b29a      	uxth	r2, r3
 800e834:	887b      	ldrh	r3, [r7, #2]
 800e836:	4413      	add	r3, r2
 800e838:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	6858      	ldr	r0, [r3, #4]
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	685a      	ldr	r2, [r3, #4]
 800e842:	7bbb      	ldrb	r3, [r7, #14]
 800e844:	18d1      	adds	r1, r2, r3
 800e846:	897b      	ldrh	r3, [r7, #10]
 800e848:	89ba      	ldrh	r2, [r7, #12]
 800e84a:	f7fb f88b 	bl	8009964 <pbuf_copy_partial>
 800e84e:	4603      	mov	r3, r0
 800e850:	461a      	mov	r2, r3
 800e852:	89bb      	ldrh	r3, [r7, #12]
 800e854:	4293      	cmp	r3, r2
 800e856:	f040 809e 	bne.w	800e996 <tcp_split_unsent_seg+0x246>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	899b      	ldrh	r3, [r3, #12]
 800e860:	b29b      	uxth	r3, r3
 800e862:	4618      	mov	r0, r3
 800e864:	f7f5 fb42 	bl	8003eec <lwip_htons>
 800e868:	4603      	mov	r3, r0
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e870:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e872:	2300      	movs	r3, #0
 800e874:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e876:	7efb      	ldrb	r3, [r7, #27]
 800e878:	f003 0308 	and.w	r3, r3, #8
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d007      	beq.n	800e890 <tcp_split_unsent_seg+0x140>
    split_flags &= ~TCP_PSH;
 800e880:	7efb      	ldrb	r3, [r7, #27]
 800e882:	f023 0308 	bic.w	r3, r3, #8
 800e886:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e888:	7ebb      	ldrb	r3, [r7, #26]
 800e88a:	f043 0308 	orr.w	r3, r3, #8
 800e88e:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e890:	7efb      	ldrb	r3, [r7, #27]
 800e892:	f003 0301 	and.w	r3, r3, #1
 800e896:	2b00      	cmp	r3, #0
 800e898:	d007      	beq.n	800e8aa <tcp_split_unsent_seg+0x15a>
    split_flags &= ~TCP_FIN;
 800e89a:	7efb      	ldrb	r3, [r7, #27]
 800e89c:	f023 0301 	bic.w	r3, r3, #1
 800e8a0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e8a2:	7ebb      	ldrb	r3, [r7, #26]
 800e8a4:	f043 0301 	orr.w	r3, r3, #1
 800e8a8:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7f5 fb30 	bl	8003f16 <lwip_htonl>
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	887b      	ldrh	r3, [r7, #2]
 800e8ba:	18d1      	adds	r1, r2, r3
 800e8bc:	7eba      	ldrb	r2, [r7, #26]
 800e8be:	7bfb      	ldrb	r3, [r7, #15]
 800e8c0:	9300      	str	r3, [sp, #0]
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	6939      	ldr	r1, [r7, #16]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f7ff fa48 	bl	800dd5c <tcp_create_segment>
 800e8cc:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d062      	beq.n	800e99a <tcp_split_unsent_seg+0x24a>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7fa fed1 	bl	8009680 <pbuf_clen>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e8e8:	1a9b      	subs	r3, r3, r2
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	6858      	ldr	r0, [r3, #4]
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	891a      	ldrh	r2, [r3, #8]
 800e8fc:	89bb      	ldrh	r3, [r7, #12]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	b29b      	uxth	r3, r3
 800e902:	4619      	mov	r1, r3
 800e904:	f7fa fcac 	bl	8009260 <pbuf_realloc>
  useg->len -= remainder;
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	891a      	ldrh	r2, [r3, #8]
 800e90c:	89bb      	ldrh	r3, [r7, #12]
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	b29a      	uxth	r2, r3
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	68dc      	ldr	r4, [r3, #12]
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	899b      	ldrh	r3, [r3, #12]
 800e920:	b29d      	uxth	r5, r3
 800e922:	7efb      	ldrb	r3, [r7, #27]
 800e924:	b29b      	uxth	r3, r3
 800e926:	4618      	mov	r0, r3
 800e928:	f7f5 fae0 	bl	8003eec <lwip_htons>
 800e92c:	4603      	mov	r3, r0
 800e92e:	432b      	orrs	r3, r5
 800e930:	b29b      	uxth	r3, r3
 800e932:	81a3      	strh	r3, [r4, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	4618      	mov	r0, r3
 800e93a:	f7fa fea1 	bl	8009680 <pbuf_clen>
 800e93e:	4603      	mov	r3, r0
 800e940:	461a      	mov	r2, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e948:	4413      	add	r3, r2
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	4618      	mov	r0, r3
 800e958:	f7fa fe92 	bl	8009680 <pbuf_clen>
 800e95c:	4603      	mov	r3, r0
 800e95e:	461a      	mov	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e966:	4413      	add	r3, r2
 800e968:	b29a      	uxth	r2, r3
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	69fa      	ldr	r2, [r7, #28]
 800e97c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d103      	bne.n	800e98e <tcp_split_unsent_seg+0x23e>
    pcb->unsent_oversize = 0;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e98e:	2300      	movs	r3, #0
 800e990:	e016      	b.n	800e9c0 <tcp_split_unsent_seg+0x270>
    goto memerr;
 800e992:	bf00      	nop
 800e994:	e002      	b.n	800e99c <tcp_split_unsent_seg+0x24c>
    goto memerr;
 800e996:	bf00      	nop
 800e998:	e000      	b.n	800e99c <tcp_split_unsent_seg+0x24c>
    goto memerr;
 800e99a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d006      	beq.n	800e9b0 <tcp_split_unsent_seg+0x260>
 800e9a2:	4b09      	ldr	r3, [pc, #36]	; (800e9c8 <tcp_split_unsent_seg+0x278>)
 800e9a4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e9a8:	490d      	ldr	r1, [pc, #52]	; (800e9e0 <tcp_split_unsent_seg+0x290>)
 800e9aa:	4809      	ldr	r0, [pc, #36]	; (800e9d0 <tcp_split_unsent_seg+0x280>)
 800e9ac:	f002 f826 	bl	80109fc <iprintf>
  if (p != NULL) {
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d002      	beq.n	800e9bc <tcp_split_unsent_seg+0x26c>
    pbuf_free(p);
 800e9b6:	6938      	ldr	r0, [r7, #16]
 800e9b8:	f7fa fdda 	bl	8009570 <pbuf_free>
  }

  return ERR_MEM;
 800e9bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3720      	adds	r7, #32
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bdb0      	pop	{r4, r5, r7, pc}
 800e9c8:	08013b6c 	.word	0x08013b6c
 800e9cc:	08013f00 	.word	0x08013f00
 800e9d0:	08013bc0 	.word	0x08013bc0
 800e9d4:	08013f24 	.word	0x08013f24
 800e9d8:	08013f48 	.word	0x08013f48
 800e9dc:	08013f58 	.word	0x08013f58
 800e9e0:	08013f68 	.word	0x08013f68

0800e9e4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e9e4:	b5b0      	push	{r4, r5, r7, lr}
 800e9e6:	b084      	sub	sp, #16
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d106      	bne.n	800ea00 <tcp_send_fin+0x1c>
 800e9f2:	4b21      	ldr	r3, [pc, #132]	; (800ea78 <tcp_send_fin+0x94>)
 800e9f4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e9f8:	4920      	ldr	r1, [pc, #128]	; (800ea7c <tcp_send_fin+0x98>)
 800e9fa:	4821      	ldr	r0, [pc, #132]	; (800ea80 <tcp_send_fin+0x9c>)
 800e9fc:	f001 fffe 	bl	80109fc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d02d      	beq.n	800ea64 <tcp_send_fin+0x80>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea0c:	60fb      	str	r3, [r7, #12]
 800ea0e:	e002      	b.n	800ea16 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d1f8      	bne.n	800ea10 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	68db      	ldr	r3, [r3, #12]
 800ea22:	899b      	ldrh	r3, [r3, #12]
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7f5 fa60 	bl	8003eec <lwip_htons>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	f003 0307 	and.w	r3, r3, #7
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d115      	bne.n	800ea64 <tcp_send_fin+0x80>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	68dc      	ldr	r4, [r3, #12]
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	899b      	ldrh	r3, [r3, #12]
 800ea42:	b29d      	uxth	r5, r3
 800ea44:	2001      	movs	r0, #1
 800ea46:	f7f5 fa51 	bl	8003eec <lwip_htons>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	432b      	orrs	r3, r5
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	8b5b      	ldrh	r3, [r3, #26]
 800ea56:	f043 0320 	orr.w	r3, r3, #32
 800ea5a:	b29a      	uxth	r2, r3
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ea60:	2300      	movs	r3, #0
 800ea62:	e004      	b.n	800ea6e <tcp_send_fin+0x8a>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ea64:	2101      	movs	r1, #1
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f000 f80c 	bl	800ea84 <tcp_enqueue_flags>
 800ea6c:	4603      	mov	r3, r0
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bdb0      	pop	{r4, r5, r7, pc}
 800ea76:	bf00      	nop
 800ea78:	08013b6c 	.word	0x08013b6c
 800ea7c:	08013f74 	.word	0x08013f74
 800ea80:	08013bc0 	.word	0x08013bc0

0800ea84 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b08a      	sub	sp, #40	; 0x28
 800ea88:	af02      	add	r7, sp, #8
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ea90:	2300      	movs	r3, #0
 800ea92:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ea94:	2300      	movs	r3, #0
 800ea96:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ea98:	78fb      	ldrb	r3, [r7, #3]
 800ea9a:	f003 0303 	and.w	r3, r3, #3
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d106      	bne.n	800eab0 <tcp_enqueue_flags+0x2c>
 800eaa2:	4b68      	ldr	r3, [pc, #416]	; (800ec44 <tcp_enqueue_flags+0x1c0>)
 800eaa4:	f240 4212 	movw	r2, #1042	; 0x412
 800eaa8:	4967      	ldr	r1, [pc, #412]	; (800ec48 <tcp_enqueue_flags+0x1c4>)
 800eaaa:	4868      	ldr	r0, [pc, #416]	; (800ec4c <tcp_enqueue_flags+0x1c8>)
 800eaac:	f001 ffa6 	bl	80109fc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d106      	bne.n	800eac4 <tcp_enqueue_flags+0x40>
 800eab6:	4b63      	ldr	r3, [pc, #396]	; (800ec44 <tcp_enqueue_flags+0x1c0>)
 800eab8:	f240 4213 	movw	r2, #1043	; 0x413
 800eabc:	4964      	ldr	r1, [pc, #400]	; (800ec50 <tcp_enqueue_flags+0x1cc>)
 800eabe:	4863      	ldr	r0, [pc, #396]	; (800ec4c <tcp_enqueue_flags+0x1c8>)
 800eac0:	f001 ff9c 	bl	80109fc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800eac4:	78fb      	ldrb	r3, [r7, #3]
 800eac6:	f003 0302 	and.w	r3, r3, #2
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d001      	beq.n	800ead2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800eace:	2301      	movs	r3, #1
 800ead0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ead2:	7ffb      	ldrb	r3, [r7, #31]
 800ead4:	f003 0301 	and.w	r3, r3, #1
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d001      	beq.n	800eae0 <tcp_enqueue_flags+0x5c>
 800eadc:	2304      	movs	r3, #4
 800eade:	e000      	b.n	800eae2 <tcp_enqueue_flags+0x5e>
 800eae0:	2300      	movs	r3, #0
 800eae2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800eae4:	7dfb      	ldrb	r3, [r7, #23]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eaec:	4619      	mov	r1, r3
 800eaee:	2036      	movs	r0, #54	; 0x36
 800eaf0:	f7fa fa5c 	bl	8008fac <pbuf_alloc>
 800eaf4:	6138      	str	r0, [r7, #16]
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d109      	bne.n	800eb10 <tcp_enqueue_flags+0x8c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	8b5b      	ldrh	r3, [r3, #26]
 800eb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb04:	b29a      	uxth	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800eb0a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb0e:	e095      	b.n	800ec3c <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	895a      	ldrh	r2, [r3, #10]
 800eb14:	7dfb      	ldrb	r3, [r7, #23]
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d206      	bcs.n	800eb2a <tcp_enqueue_flags+0xa6>
 800eb1c:	4b49      	ldr	r3, [pc, #292]	; (800ec44 <tcp_enqueue_flags+0x1c0>)
 800eb1e:	f240 423a 	movw	r2, #1082	; 0x43a
 800eb22:	494c      	ldr	r1, [pc, #304]	; (800ec54 <tcp_enqueue_flags+0x1d0>)
 800eb24:	4849      	ldr	r0, [pc, #292]	; (800ec4c <tcp_enqueue_flags+0x1c8>)
 800eb26:	f001 ff69 	bl	80109fc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800eb2e:	78fa      	ldrb	r2, [r7, #3]
 800eb30:	7ffb      	ldrb	r3, [r7, #31]
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	460b      	mov	r3, r1
 800eb36:	6939      	ldr	r1, [r7, #16]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7ff f90f 	bl	800dd5c <tcp_create_segment>
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d109      	bne.n	800eb5a <tcp_enqueue_flags+0xd6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	8b5b      	ldrh	r3, [r3, #26]
 800eb4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800eb54:	f04f 33ff 	mov.w	r3, #4294967295
 800eb58:	e070      	b.n	800ec3c <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	f003 0303 	and.w	r3, r3, #3
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d006      	beq.n	800eb74 <tcp_enqueue_flags+0xf0>
 800eb66:	4b37      	ldr	r3, [pc, #220]	; (800ec44 <tcp_enqueue_flags+0x1c0>)
 800eb68:	f240 4242 	movw	r2, #1090	; 0x442
 800eb6c:	493a      	ldr	r1, [pc, #232]	; (800ec58 <tcp_enqueue_flags+0x1d4>)
 800eb6e:	4837      	ldr	r0, [pc, #220]	; (800ec4c <tcp_enqueue_flags+0x1c8>)
 800eb70:	f001 ff44 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	891b      	ldrh	r3, [r3, #8]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d006      	beq.n	800eb8a <tcp_enqueue_flags+0x106>
 800eb7c:	4b31      	ldr	r3, [pc, #196]	; (800ec44 <tcp_enqueue_flags+0x1c0>)
 800eb7e:	f240 4243 	movw	r2, #1091	; 0x443
 800eb82:	4936      	ldr	r1, [pc, #216]	; (800ec5c <tcp_enqueue_flags+0x1d8>)
 800eb84:	4831      	ldr	r0, [pc, #196]	; (800ec4c <tcp_enqueue_flags+0x1c8>)
 800eb86:	f001 ff39 	bl	80109fc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d103      	bne.n	800eb9a <tcp_enqueue_flags+0x116>
    pcb->unsent = seg;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	66da      	str	r2, [r3, #108]	; 0x6c
 800eb98:	e00d      	b.n	800ebb6 <tcp_enqueue_flags+0x132>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb9e:	61bb      	str	r3, [r7, #24]
 800eba0:	e002      	b.n	800eba8 <tcp_enqueue_flags+0x124>
 800eba2:	69bb      	ldr	r3, [r7, #24]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	61bb      	str	r3, [r7, #24]
 800eba8:	69bb      	ldr	r3, [r7, #24]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d1f8      	bne.n	800eba2 <tcp_enqueue_flags+0x11e>
    useg->next = seg;
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	68fa      	ldr	r2, [r7, #12]
 800ebb4:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ebbe:	78fb      	ldrb	r3, [r7, #3]
 800ebc0:	f003 0302 	and.w	r3, r3, #2
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d104      	bne.n	800ebd2 <tcp_enqueue_flags+0x14e>
 800ebc8:	78fb      	ldrb	r3, [r7, #3]
 800ebca:	f003 0301 	and.w	r3, r3, #1
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d004      	beq.n	800ebdc <tcp_enqueue_flags+0x158>
    pcb->snd_lbb++;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebd6:	1c5a      	adds	r2, r3, #1
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ebdc:	78fb      	ldrb	r3, [r7, #3]
 800ebde:	f003 0301 	and.w	r3, r3, #1
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d006      	beq.n	800ebf4 <tcp_enqueue_flags+0x170>
    tcp_set_flags(pcb, TF_FIN);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	8b5b      	ldrh	r3, [r3, #26]
 800ebea:	f043 0320 	orr.w	r3, r3, #32
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7fa fd41 	bl	8009680 <pbuf_clen>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	461a      	mov	r2, r3
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec08:	4413      	add	r3, r2
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d00e      	beq.n	800ec3a <tcp_enqueue_flags+0x1b6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d10a      	bne.n	800ec3a <tcp_enqueue_flags+0x1b6>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d106      	bne.n	800ec3a <tcp_enqueue_flags+0x1b6>
 800ec2c:	4b05      	ldr	r3, [pc, #20]	; (800ec44 <tcp_enqueue_flags+0x1c0>)
 800ec2e:	f240 4266 	movw	r2, #1126	; 0x466
 800ec32:	490b      	ldr	r1, [pc, #44]	; (800ec60 <tcp_enqueue_flags+0x1dc>)
 800ec34:	4805      	ldr	r0, [pc, #20]	; (800ec4c <tcp_enqueue_flags+0x1c8>)
 800ec36:	f001 fee1 	bl	80109fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ec3a:	2300      	movs	r3, #0
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3720      	adds	r7, #32
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	08013b6c 	.word	0x08013b6c
 800ec48:	08013f90 	.word	0x08013f90
 800ec4c:	08013bc0 	.word	0x08013bc0
 800ec50:	08013fe8 	.word	0x08013fe8
 800ec54:	08014008 	.word	0x08014008
 800ec58:	08014044 	.word	0x08014044
 800ec5c:	0801405c 	.word	0x0801405c
 800ec60:	08014088 	.word	0x08014088

0800ec64 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ec64:	b5b0      	push	{r4, r5, r7, lr}
 800ec66:	b08a      	sub	sp, #40	; 0x28
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d106      	bne.n	800ec80 <tcp_output+0x1c>
 800ec72:	4ba0      	ldr	r3, [pc, #640]	; (800eef4 <tcp_output+0x290>)
 800ec74:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ec78:	499f      	ldr	r1, [pc, #636]	; (800eef8 <tcp_output+0x294>)
 800ec7a:	48a0      	ldr	r0, [pc, #640]	; (800eefc <tcp_output+0x298>)
 800ec7c:	f001 febe 	bl	80109fc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	7d1b      	ldrb	r3, [r3, #20]
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d106      	bne.n	800ec96 <tcp_output+0x32>
 800ec88:	4b9a      	ldr	r3, [pc, #616]	; (800eef4 <tcp_output+0x290>)
 800ec8a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800ec8e:	499c      	ldr	r1, [pc, #624]	; (800ef00 <tcp_output+0x29c>)
 800ec90:	489a      	ldr	r0, [pc, #616]	; (800eefc <tcp_output+0x298>)
 800ec92:	f001 feb3 	bl	80109fc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ec96:	4b9b      	ldr	r3, [pc, #620]	; (800ef04 <tcp_output+0x2a0>)
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d101      	bne.n	800eca4 <tcp_output+0x40>
    return ERR_OK;
 800eca0:	2300      	movs	r3, #0
 800eca2:	e1d0      	b.n	800f046 <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d203      	bcs.n	800ecbc <tcp_output+0x58>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ecba:	e002      	b.n	800ecc2 <tcp_output+0x5e>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ecc2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecc8:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ecca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d10b      	bne.n	800ece8 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	8b5b      	ldrh	r3, [r3, #26]
 800ecd4:	f003 0302 	and.w	r3, r3, #2
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f000 81a9 	beq.w	800f030 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 fdde 	bl	800f8a0 <tcp_send_empty_ack>
 800ece4:	4603      	mov	r3, r0
 800ece6:	e1ae      	b.n	800f046 <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ece8:	6879      	ldr	r1, [r7, #4]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	3304      	adds	r3, #4
 800ecee:	461a      	mov	r2, r3
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f7ff f817 	bl	800dd24 <tcp_route>
 800ecf6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d102      	bne.n	800ed04 <tcp_output+0xa0>
    return ERR_RTE;
 800ecfe:	f06f 0303 	mvn.w	r3, #3
 800ed02:	e1a0      	b.n	800f046 <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d003      	beq.n	800ed12 <tcp_output+0xae>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d111      	bne.n	800ed36 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d002      	beq.n	800ed1e <tcp_output+0xba>
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	3304      	adds	r3, #4
 800ed1c:	e000      	b.n	800ed20 <tcp_output+0xbc>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d102      	bne.n	800ed2e <tcp_output+0xca>
      return ERR_RTE;
 800ed28:	f06f 0303 	mvn.w	r3, #3
 800ed2c:	e18b      	b.n	800f046 <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ed36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7f5 f8ea 	bl	8003f16 <lwip_htonl>
 800ed42:	4602      	mov	r2, r0
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed48:	1ad3      	subs	r3, r2, r3
 800ed4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed4c:	8912      	ldrh	r2, [r2, #8]
 800ed4e:	441a      	add	r2, r3
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d927      	bls.n	800eda6 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	69bb      	ldr	r3, [r7, #24]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d114      	bne.n	800ed8e <tcp_output+0x12a>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d110      	bne.n	800ed8e <tcp_output+0x12a>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d10b      	bne.n	800ed8e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2201      	movs	r2, #1
 800ed82:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	8b5b      	ldrh	r3, [r3, #26]
 800ed92:	f003 0302 	and.w	r3, r3, #2
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	f000 814c 	beq.w	800f034 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 fd7f 	bl	800f8a0 <tcp_send_empty_ack>
 800eda2:	4603      	mov	r3, r0
 800eda4:	e14f      	b.n	800f046 <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2200      	movs	r2, #0
 800edaa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edb2:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800edb4:	6a3b      	ldr	r3, [r7, #32]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	f000 811b 	beq.w	800eff2 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800edbc:	e002      	b.n	800edc4 <tcp_output+0x160>
 800edbe:	6a3b      	ldr	r3, [r7, #32]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	623b      	str	r3, [r7, #32]
 800edc4:	6a3b      	ldr	r3, [r7, #32]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1f8      	bne.n	800edbe <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800edcc:	e111      	b.n	800eff2 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800edce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	899b      	ldrh	r3, [r3, #12]
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7f5 f888 	bl	8003eec <lwip_htons>
 800eddc:	4603      	mov	r3, r0
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	f003 0304 	and.w	r3, r3, #4
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d006      	beq.n	800edf6 <tcp_output+0x192>
 800ede8:	4b42      	ldr	r3, [pc, #264]	; (800eef4 <tcp_output+0x290>)
 800edea:	f240 5237 	movw	r2, #1335	; 0x537
 800edee:	4946      	ldr	r1, [pc, #280]	; (800ef08 <tcp_output+0x2a4>)
 800edf0:	4842      	ldr	r0, [pc, #264]	; (800eefc <tcp_output+0x298>)
 800edf2:	f001 fe03 	bl	80109fc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d01f      	beq.n	800ee3e <tcp_output+0x1da>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	8b5b      	ldrh	r3, [r3, #26]
 800ee02:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d119      	bne.n	800ee3e <tcp_output+0x1da>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d00b      	beq.n	800ee2a <tcp_output+0x1c6>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d110      	bne.n	800ee3e <tcp_output+0x1da>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee20:	891a      	ldrh	r2, [r3, #8]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d209      	bcs.n	800ee3e <tcp_output+0x1da>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d004      	beq.n	800ee3e <tcp_output+0x1da>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee3a:	2b08      	cmp	r3, #8
 800ee3c:	d901      	bls.n	800ee42 <tcp_output+0x1de>
 800ee3e:	2301      	movs	r3, #1
 800ee40:	e000      	b.n	800ee44 <tcp_output+0x1e0>
 800ee42:	2300      	movs	r3, #0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d106      	bne.n	800ee56 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	8b5b      	ldrh	r3, [r3, #26]
 800ee4c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f000 80e3 	beq.w	800f01c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	7d1b      	ldrb	r3, [r3, #20]
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d00c      	beq.n	800ee78 <tcp_output+0x214>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee60:	68dc      	ldr	r4, [r3, #12]
 800ee62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee64:	68db      	ldr	r3, [r3, #12]
 800ee66:	899b      	ldrh	r3, [r3, #12]
 800ee68:	b29d      	uxth	r5, r3
 800ee6a:	2010      	movs	r0, #16
 800ee6c:	f7f5 f83e 	bl	8003eec <lwip_htons>
 800ee70:	4603      	mov	r3, r0
 800ee72:	432b      	orrs	r3, r5
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ee78:	697a      	ldr	r2, [r7, #20]
 800ee7a:	6879      	ldr	r1, [r7, #4]
 800ee7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee7e:	f000 f907 	bl	800f090 <tcp_output_segment>
 800ee82:	4603      	mov	r3, r0
 800ee84:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ee86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d009      	beq.n	800eea2 <tcp_output+0x23e>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	8b5b      	ldrh	r3, [r3, #26]
 800ee92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	835a      	strh	r2, [r3, #26]
      return err;
 800ee9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eea0:	e0d1      	b.n	800f046 <tcp_output+0x3e2>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800eea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	7d1b      	ldrb	r3, [r3, #20]
 800eeae:	2b02      	cmp	r3, #2
 800eeb0:	d006      	beq.n	800eec0 <tcp_output+0x25c>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	8b5b      	ldrh	r3, [r3, #26]
 800eeb6:	f023 0303 	bic.w	r3, r3, #3
 800eeba:	b29a      	uxth	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7f5 f825 	bl	8003f16 <lwip_htonl>
 800eecc:	4604      	mov	r4, r0
 800eece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed0:	891b      	ldrh	r3, [r3, #8]
 800eed2:	461d      	mov	r5, r3
 800eed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	899b      	ldrh	r3, [r3, #12]
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	4618      	mov	r0, r3
 800eede:	f7f5 f805 	bl	8003eec <lwip_htons>
 800eee2:	4603      	mov	r3, r0
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	f003 0303 	and.w	r3, r3, #3
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d00e      	beq.n	800ef0c <tcp_output+0x2a8>
 800eeee:	2301      	movs	r3, #1
 800eef0:	e00d      	b.n	800ef0e <tcp_output+0x2aa>
 800eef2:	bf00      	nop
 800eef4:	08013b6c 	.word	0x08013b6c
 800eef8:	080140b0 	.word	0x080140b0
 800eefc:	08013bc0 	.word	0x08013bc0
 800ef00:	080140c8 	.word	0x080140c8
 800ef04:	20006d34 	.word	0x20006d34
 800ef08:	080140f0 	.word	0x080140f0
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	442b      	add	r3, r5
 800ef10:	4423      	add	r3, r4
 800ef12:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	1ad3      	subs	r3, r2, r3
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	da02      	bge.n	800ef26 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	68ba      	ldr	r2, [r7, #8]
 800ef24:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ef26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef28:	891b      	ldrh	r3, [r3, #8]
 800ef2a:	461c      	mov	r4, r3
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	899b      	ldrh	r3, [r3, #12]
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7f4 ffd9 	bl	8003eec <lwip_htons>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	f003 0303 	and.w	r3, r3, #3
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d001      	beq.n	800ef4a <tcp_output+0x2e6>
 800ef46:	2301      	movs	r3, #1
 800ef48:	e000      	b.n	800ef4c <tcp_output+0x2e8>
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	4423      	add	r3, r4
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d049      	beq.n	800efe6 <tcp_output+0x382>
      seg->next = NULL;
 800ef52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef54:	2200      	movs	r2, #0
 800ef56:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d105      	bne.n	800ef6c <tcp_output+0x308>
        pcb->unacked = seg;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef64:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ef66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef68:	623b      	str	r3, [r7, #32]
 800ef6a:	e03f      	b.n	800efec <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7f4 ffcf 	bl	8003f16 <lwip_htonl>
 800ef78:	4604      	mov	r4, r0
 800ef7a:	6a3b      	ldr	r3, [r7, #32]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7f4 ffc8 	bl	8003f16 <lwip_htonl>
 800ef86:	4603      	mov	r3, r0
 800ef88:	1ae3      	subs	r3, r4, r3
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	da24      	bge.n	800efd8 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	3370      	adds	r3, #112	; 0x70
 800ef92:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ef94:	e002      	b.n	800ef9c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d011      	beq.n	800efc8 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	4618      	mov	r0, r3
 800efae:	f7f4 ffb2 	bl	8003f16 <lwip_htonl>
 800efb2:	4604      	mov	r4, r0
 800efb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	4618      	mov	r0, r3
 800efbc:	f7f4 ffab 	bl	8003f16 <lwip_htonl>
 800efc0:	4603      	mov	r3, r0
 800efc2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	dbe6      	blt.n	800ef96 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efd4:	601a      	str	r2, [r3, #0]
 800efd6:	e009      	b.n	800efec <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800efd8:	6a3b      	ldr	r3, [r7, #32]
 800efda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efdc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800efde:	6a3b      	ldr	r3, [r7, #32]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	623b      	str	r3, [r7, #32]
 800efe4:	e002      	b.n	800efec <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800efe6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efe8:	f7fb fef6 	bl	800add8 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eff0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800eff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d012      	beq.n	800f01e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800eff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	4618      	mov	r0, r3
 800f000:	f7f4 ff89 	bl	8003f16 <lwip_htonl>
 800f004:	4602      	mov	r2, r0
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f00e:	8912      	ldrh	r2, [r2, #8]
 800f010:	441a      	add	r2, r3
  while (seg != NULL &&
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	429a      	cmp	r2, r3
 800f016:	f67f aeda 	bls.w	800edce <tcp_output+0x16a>
 800f01a:	e000      	b.n	800f01e <tcp_output+0x3ba>
      break;
 800f01c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f022:	2b00      	cmp	r3, #0
 800f024:	d107      	bne.n	800f036 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2200      	movs	r2, #0
 800f02a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f02e:	e002      	b.n	800f036 <tcp_output+0x3d2>
    goto output_done;
 800f030:	bf00      	nop
 800f032:	e000      	b.n	800f036 <tcp_output+0x3d2>
    goto output_done;
 800f034:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	8b5b      	ldrh	r3, [r3, #26]
 800f03a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f03e:	b29a      	uxth	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f044:	2300      	movs	r3, #0
}
 800f046:	4618      	mov	r0, r3
 800f048:	3728      	adds	r7, #40	; 0x28
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bdb0      	pop	{r4, r5, r7, pc}
 800f04e:	bf00      	nop

0800f050 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d106      	bne.n	800f06c <tcp_output_segment_busy+0x1c>
 800f05e:	4b09      	ldr	r3, [pc, #36]	; (800f084 <tcp_output_segment_busy+0x34>)
 800f060:	f240 529a 	movw	r2, #1434	; 0x59a
 800f064:	4908      	ldr	r1, [pc, #32]	; (800f088 <tcp_output_segment_busy+0x38>)
 800f066:	4809      	ldr	r0, [pc, #36]	; (800f08c <tcp_output_segment_busy+0x3c>)
 800f068:	f001 fcc8 	bl	80109fc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	7b9b      	ldrb	r3, [r3, #14]
 800f072:	2b01      	cmp	r3, #1
 800f074:	d001      	beq.n	800f07a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f076:	2301      	movs	r3, #1
 800f078:	e000      	b.n	800f07c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f07a:	2300      	movs	r3, #0
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3708      	adds	r7, #8
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	08013b6c 	.word	0x08013b6c
 800f088:	08014108 	.word	0x08014108
 800f08c:	08013bc0 	.word	0x08013bc0

0800f090 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f090:	b5b0      	push	{r4, r5, r7, lr}
 800f092:	b08c      	sub	sp, #48	; 0x30
 800f094:	af04      	add	r7, sp, #16
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d106      	bne.n	800f0b0 <tcp_output_segment+0x20>
 800f0a2:	4b66      	ldr	r3, [pc, #408]	; (800f23c <tcp_output_segment+0x1ac>)
 800f0a4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f0a8:	4965      	ldr	r1, [pc, #404]	; (800f240 <tcp_output_segment+0x1b0>)
 800f0aa:	4866      	ldr	r0, [pc, #408]	; (800f244 <tcp_output_segment+0x1b4>)
 800f0ac:	f001 fca6 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d106      	bne.n	800f0c4 <tcp_output_segment+0x34>
 800f0b6:	4b61      	ldr	r3, [pc, #388]	; (800f23c <tcp_output_segment+0x1ac>)
 800f0b8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f0bc:	4962      	ldr	r1, [pc, #392]	; (800f248 <tcp_output_segment+0x1b8>)
 800f0be:	4861      	ldr	r0, [pc, #388]	; (800f244 <tcp_output_segment+0x1b4>)
 800f0c0:	f001 fc9c 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d106      	bne.n	800f0d8 <tcp_output_segment+0x48>
 800f0ca:	4b5c      	ldr	r3, [pc, #368]	; (800f23c <tcp_output_segment+0x1ac>)
 800f0cc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f0d0:	495e      	ldr	r1, [pc, #376]	; (800f24c <tcp_output_segment+0x1bc>)
 800f0d2:	485c      	ldr	r0, [pc, #368]	; (800f244 <tcp_output_segment+0x1b4>)
 800f0d4:	f001 fc92 	bl	80109fc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	f7ff ffb9 	bl	800f050 <tcp_output_segment_busy>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d001      	beq.n	800f0e8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	e0a4      	b.n	800f232 <tcp_output_segment+0x1a2>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	68dc      	ldr	r4, [r3, #12]
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7f4 ff10 	bl	8003f16 <lwip_htonl>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	68dc      	ldr	r4, [r3, #12]
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f102:	4618      	mov	r0, r3
 800f104:	f7f4 fef2 	bl	8003eec <lwip_htons>
 800f108:	4603      	mov	r3, r0
 800f10a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f110:	68ba      	ldr	r2, [r7, #8]
 800f112:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f114:	441a      	add	r2, r3
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	3314      	adds	r3, #20
 800f120:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	7a9b      	ldrb	r3, [r3, #10]
 800f126:	f003 0301 	and.w	r3, r3, #1
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d015      	beq.n	800f15a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	3304      	adds	r3, #4
 800f132:	461a      	mov	r2, r3
 800f134:	6879      	ldr	r1, [r7, #4]
 800f136:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f13a:	f7fc fa2f 	bl	800b59c <tcp_eff_send_mss_netif>
 800f13e:	4603      	mov	r3, r0
 800f140:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f142:	8b7b      	ldrh	r3, [r7, #26]
 800f144:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f148:	4618      	mov	r0, r3
 800f14a:	f7f4 fee4 	bl	8003f16 <lwip_htonl>
 800f14e:	4602      	mov	r2, r0
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	3304      	adds	r3, #4
 800f158:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f160:	2b00      	cmp	r3, #0
 800f162:	da02      	bge.n	800f16a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	2200      	movs	r2, #0
 800f168:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d10c      	bne.n	800f18c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f172:	4b37      	ldr	r3, [pc, #220]	; (800f250 <tcp_output_segment+0x1c0>)
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	4618      	mov	r0, r3
 800f182:	f7f4 fec8 	bl	8003f16 <lwip_htonl>
 800f186:	4602      	mov	r2, r0
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	461a      	mov	r2, r3
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	1ad3      	subs	r3, r2, r3
 800f19a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	68fa      	ldr	r2, [r7, #12]
 800f1a2:	6852      	ldr	r2, [r2, #4]
 800f1a4:	8951      	ldrh	r1, [r2, #10]
 800f1a6:	8b3a      	ldrh	r2, [r7, #24]
 800f1a8:	1a8a      	subs	r2, r1, r2
 800f1aa:	b292      	uxth	r2, r2
 800f1ac:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	68fa      	ldr	r2, [r7, #12]
 800f1b4:	6852      	ldr	r2, [r2, #4]
 800f1b6:	8911      	ldrh	r1, [r2, #8]
 800f1b8:	8b3a      	ldrh	r2, [r7, #24]
 800f1ba:	1a8a      	subs	r2, r1, r2
 800f1bc:	b292      	uxth	r2, r2
 800f1be:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	68fa      	ldr	r2, [r7, #12]
 800f1c6:	68d2      	ldr	r2, [r2, #12]
 800f1c8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	741a      	strb	r2, [r3, #16]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	f103 0214 	add.w	r2, r3, #20
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	7a9b      	ldrb	r3, [r3, #10]
 800f1e2:	f003 0301 	and.w	r3, r3, #1
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d001      	beq.n	800f1ee <tcp_output_segment+0x15e>
 800f1ea:	2304      	movs	r3, #4
 800f1ec:	e000      	b.n	800f1f0 <tcp_output_segment+0x160>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	441a      	add	r2, r3
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d006      	beq.n	800f206 <tcp_output_segment+0x176>
 800f1f8:	4b10      	ldr	r3, [pc, #64]	; (800f23c <tcp_output_segment+0x1ac>)
 800f1fa:	f240 621c 	movw	r2, #1564	; 0x61c
 800f1fe:	4915      	ldr	r1, [pc, #84]	; (800f254 <tcp_output_segment+0x1c4>)
 800f200:	4810      	ldr	r0, [pc, #64]	; (800f244 <tcp_output_segment+0x1b4>)
 800f202:	f001 fbfb 	bl	80109fc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6858      	ldr	r0, [r3, #4]
 800f20a:	68b9      	ldr	r1, [r7, #8]
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	1d1c      	adds	r4, r3, #4
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	7add      	ldrb	r5, [r3, #11]
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	7a9b      	ldrb	r3, [r3, #10]
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	9202      	str	r2, [sp, #8]
 800f21c:	2206      	movs	r2, #6
 800f21e:	9201      	str	r2, [sp, #4]
 800f220:	9300      	str	r3, [sp, #0]
 800f222:	462b      	mov	r3, r5
 800f224:	4622      	mov	r2, r4
 800f226:	f7f7 ffe3 	bl	80071f0 <ip4_output_if>
 800f22a:	4603      	mov	r3, r0
 800f22c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f22e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f232:	4618      	mov	r0, r3
 800f234:	3720      	adds	r7, #32
 800f236:	46bd      	mov	sp, r7
 800f238:	bdb0      	pop	{r4, r5, r7, pc}
 800f23a:	bf00      	nop
 800f23c:	08013b6c 	.word	0x08013b6c
 800f240:	08014130 	.word	0x08014130
 800f244:	08013bc0 	.word	0x08013bc0
 800f248:	08014150 	.word	0x08014150
 800f24c:	08014170 	.word	0x08014170
 800f250:	20006d24 	.word	0x20006d24
 800f254:	08014194 	.word	0x08014194

0800f258 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f258:	b5b0      	push	{r4, r5, r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d106      	bne.n	800f274 <tcp_rexmit_rto_prepare+0x1c>
 800f266:	4b31      	ldr	r3, [pc, #196]	; (800f32c <tcp_rexmit_rto_prepare+0xd4>)
 800f268:	f240 6263 	movw	r2, #1635	; 0x663
 800f26c:	4930      	ldr	r1, [pc, #192]	; (800f330 <tcp_rexmit_rto_prepare+0xd8>)
 800f26e:	4831      	ldr	r0, [pc, #196]	; (800f334 <tcp_rexmit_rto_prepare+0xdc>)
 800f270:	f001 fbc4 	bl	80109fc <iprintf>

  if (pcb->unacked == NULL) {
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d102      	bne.n	800f282 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f27c:	f06f 0305 	mvn.w	r3, #5
 800f280:	e050      	b.n	800f324 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f286:	60fb      	str	r3, [r7, #12]
 800f288:	e00b      	b.n	800f2a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	f7ff fee0 	bl	800f050 <tcp_output_segment_busy>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d002      	beq.n	800f29c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f296:	f06f 0305 	mvn.w	r3, #5
 800f29a:	e043      	b.n	800f324 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	60fb      	str	r3, [r7, #12]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1ef      	bne.n	800f28a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f7ff fed0 	bl	800f050 <tcp_output_segment_busy>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d002      	beq.n	800f2bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f2b6:	f06f 0305 	mvn.w	r3, #5
 800f2ba:	e033      	b.n	800f324 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	8b5b      	ldrh	r3, [r3, #26]
 800f2d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f2da:	b29a      	uxth	r2, r3
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7f4 fe15 	bl	8003f16 <lwip_htonl>
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	891b      	ldrh	r3, [r3, #8]
 800f2f2:	461d      	mov	r5, r3
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	899b      	ldrh	r3, [r3, #12]
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7f4 fdf5 	bl	8003eec <lwip_htons>
 800f302:	4603      	mov	r3, r0
 800f304:	b2db      	uxtb	r3, r3
 800f306:	f003 0303 	and.w	r3, r3, #3
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d001      	beq.n	800f312 <tcp_rexmit_rto_prepare+0xba>
 800f30e:	2301      	movs	r3, #1
 800f310:	e000      	b.n	800f314 <tcp_rexmit_rto_prepare+0xbc>
 800f312:	2300      	movs	r3, #0
 800f314:	442b      	add	r3, r5
 800f316:	18e2      	adds	r2, r4, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f322:	2300      	movs	r3, #0
}
 800f324:	4618      	mov	r0, r3
 800f326:	3710      	adds	r7, #16
 800f328:	46bd      	mov	sp, r7
 800f32a:	bdb0      	pop	{r4, r5, r7, pc}
 800f32c:	08013b6c 	.word	0x08013b6c
 800f330:	080141a8 	.word	0x080141a8
 800f334:	08013bc0 	.word	0x08013bc0

0800f338 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d106      	bne.n	800f354 <tcp_rexmit_rto_commit+0x1c>
 800f346:	4b0d      	ldr	r3, [pc, #52]	; (800f37c <tcp_rexmit_rto_commit+0x44>)
 800f348:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f34c:	490c      	ldr	r1, [pc, #48]	; (800f380 <tcp_rexmit_rto_commit+0x48>)
 800f34e:	480d      	ldr	r0, [pc, #52]	; (800f384 <tcp_rexmit_rto_commit+0x4c>)
 800f350:	f001 fb54 	bl	80109fc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f35a:	2bff      	cmp	r3, #255	; 0xff
 800f35c:	d007      	beq.n	800f36e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f364:	3301      	adds	r3, #1
 800f366:	b2da      	uxtb	r2, r3
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff fc78 	bl	800ec64 <tcp_output>
}
 800f374:	bf00      	nop
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	08013b6c 	.word	0x08013b6c
 800f380:	080141cc 	.word	0x080141cc
 800f384:	08013bc0 	.word	0x08013bc0

0800f388 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d106      	bne.n	800f3a4 <tcp_rexmit_rto+0x1c>
 800f396:	4b0a      	ldr	r3, [pc, #40]	; (800f3c0 <tcp_rexmit_rto+0x38>)
 800f398:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f39c:	4909      	ldr	r1, [pc, #36]	; (800f3c4 <tcp_rexmit_rto+0x3c>)
 800f39e:	480a      	ldr	r0, [pc, #40]	; (800f3c8 <tcp_rexmit_rto+0x40>)
 800f3a0:	f001 fb2c 	bl	80109fc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7ff ff57 	bl	800f258 <tcp_rexmit_rto_prepare>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d102      	bne.n	800f3b6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f7ff ffc1 	bl	800f338 <tcp_rexmit_rto_commit>
  }
}
 800f3b6:	bf00      	nop
 800f3b8:	3708      	adds	r7, #8
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	08013b6c 	.word	0x08013b6c
 800f3c4:	080141f0 	.word	0x080141f0
 800f3c8:	08013bc0 	.word	0x08013bc0

0800f3cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f3cc:	b590      	push	{r4, r7, lr}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d106      	bne.n	800f3e8 <tcp_rexmit+0x1c>
 800f3da:	4b2f      	ldr	r3, [pc, #188]	; (800f498 <tcp_rexmit+0xcc>)
 800f3dc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f3e0:	492e      	ldr	r1, [pc, #184]	; (800f49c <tcp_rexmit+0xd0>)
 800f3e2:	482f      	ldr	r0, [pc, #188]	; (800f4a0 <tcp_rexmit+0xd4>)
 800f3e4:	f001 fb0a 	bl	80109fc <iprintf>

  if (pcb->unacked == NULL) {
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d102      	bne.n	800f3f6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f3f0:	f06f 0305 	mvn.w	r3, #5
 800f3f4:	e04c      	b.n	800f490 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3fa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f3fc:	68b8      	ldr	r0, [r7, #8]
 800f3fe:	f7ff fe27 	bl	800f050 <tcp_output_segment_busy>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d002      	beq.n	800f40e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f408:	f06f 0305 	mvn.w	r3, #5
 800f40c:	e040      	b.n	800f490 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	336c      	adds	r3, #108	; 0x6c
 800f41a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f41c:	e002      	b.n	800f424 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d011      	beq.n	800f450 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	4618      	mov	r0, r3
 800f436:	f7f4 fd6e 	bl	8003f16 <lwip_htonl>
 800f43a:	4604      	mov	r4, r0
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	68db      	ldr	r3, [r3, #12]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	4618      	mov	r0, r3
 800f444:	f7f4 fd67 	bl	8003f16 <lwip_htonl>
 800f448:	4603      	mov	r3, r0
 800f44a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	dbe6      	blt.n	800f41e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	68ba      	ldr	r2, [r7, #8]
 800f45c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d103      	bne.n	800f46e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2200      	movs	r2, #0
 800f46a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f474:	2bff      	cmp	r3, #255	; 0xff
 800f476:	d007      	beq.n	800f488 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f47e:	3301      	adds	r3, #1
 800f480:	b2da      	uxtb	r2, r3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2200      	movs	r2, #0
 800f48c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f48e:	2300      	movs	r3, #0
}
 800f490:	4618      	mov	r0, r3
 800f492:	3714      	adds	r7, #20
 800f494:	46bd      	mov	sp, r7
 800f496:	bd90      	pop	{r4, r7, pc}
 800f498:	08013b6c 	.word	0x08013b6c
 800f49c:	0801420c 	.word	0x0801420c
 800f4a0:	08013bc0 	.word	0x08013bc0

0800f4a4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d106      	bne.n	800f4c0 <tcp_rexmit_fast+0x1c>
 800f4b2:	4b2f      	ldr	r3, [pc, #188]	; (800f570 <tcp_rexmit_fast+0xcc>)
 800f4b4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f4b8:	492e      	ldr	r1, [pc, #184]	; (800f574 <tcp_rexmit_fast+0xd0>)
 800f4ba:	482f      	ldr	r0, [pc, #188]	; (800f578 <tcp_rexmit_fast+0xd4>)
 800f4bc:	f001 fa9e 	bl	80109fc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d04f      	beq.n	800f568 <tcp_rexmit_fast+0xc4>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	8b5b      	ldrh	r3, [r3, #26]
 800f4cc:	f003 0304 	and.w	r3, r3, #4
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d149      	bne.n	800f568 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f7ff ff79 	bl	800f3cc <tcp_rexmit>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d143      	bne.n	800f568 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d208      	bcs.n	800f502 <tcp_rexmit_fast+0x5e>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	da00      	bge.n	800f4fc <tcp_rexmit_fast+0x58>
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	105b      	asrs	r3, r3, #1
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	e007      	b.n	800f512 <tcp_rexmit_fast+0x6e>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f508:	2b00      	cmp	r3, #0
 800f50a:	da00      	bge.n	800f50e <tcp_rexmit_fast+0x6a>
 800f50c:	3301      	adds	r3, #1
 800f50e:	105b      	asrs	r3, r3, #1
 800f510:	b29b      	uxth	r3, r3
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f51e:	461a      	mov	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f524:	005b      	lsls	r3, r3, #1
 800f526:	429a      	cmp	r2, r3
 800f528:	d206      	bcs.n	800f538 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f52e:	005b      	lsls	r3, r3, #1
 800f530:	b29a      	uxth	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f542:	4619      	mov	r1, r3
 800f544:	0049      	lsls	r1, r1, #1
 800f546:	440b      	add	r3, r1
 800f548:	b29b      	uxth	r3, r3
 800f54a:	4413      	add	r3, r2
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	8b5b      	ldrh	r3, [r3, #26]
 800f558:	f043 0304 	orr.w	r3, r3, #4
 800f55c:	b29a      	uxth	r2, r3
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2200      	movs	r2, #0
 800f566:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f568:	bf00      	nop
 800f56a:	3708      	adds	r7, #8
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	08013b6c 	.word	0x08013b6c
 800f574:	08014224 	.word	0x08014224
 800f578:	08013bc0 	.word	0x08013bc0

0800f57c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b086      	sub	sp, #24
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	607b      	str	r3, [r7, #4]
 800f586:	460b      	mov	r3, r1
 800f588:	817b      	strh	r3, [r7, #10]
 800f58a:	4613      	mov	r3, r2
 800f58c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f58e:	897a      	ldrh	r2, [r7, #10]
 800f590:	893b      	ldrh	r3, [r7, #8]
 800f592:	4413      	add	r3, r2
 800f594:	b29b      	uxth	r3, r3
 800f596:	3314      	adds	r3, #20
 800f598:	b29b      	uxth	r3, r3
 800f59a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f59e:	4619      	mov	r1, r3
 800f5a0:	2022      	movs	r0, #34	; 0x22
 800f5a2:	f7f9 fd03 	bl	8008fac <pbuf_alloc>
 800f5a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d04e      	beq.n	800f64c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	895b      	ldrh	r3, [r3, #10]
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	897b      	ldrh	r3, [r7, #10]
 800f5b6:	3314      	adds	r3, #20
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	da06      	bge.n	800f5ca <tcp_output_alloc_header_common+0x4e>
 800f5bc:	4b26      	ldr	r3, [pc, #152]	; (800f658 <tcp_output_alloc_header_common+0xdc>)
 800f5be:	f240 7224 	movw	r2, #1828	; 0x724
 800f5c2:	4926      	ldr	r1, [pc, #152]	; (800f65c <tcp_output_alloc_header_common+0xe0>)
 800f5c4:	4826      	ldr	r0, [pc, #152]	; (800f660 <tcp_output_alloc_header_common+0xe4>)
 800f5c6:	f001 fa19 	bl	80109fc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f5d0:	8c3b      	ldrh	r3, [r7, #32]
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7f4 fc8a 	bl	8003eec <lwip_htons>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	461a      	mov	r2, r3
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f5e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7f4 fc82 	bl	8003eec <lwip_htons>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	f7f4 fc8d 	bl	8003f16 <lwip_htonl>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f602:	897b      	ldrh	r3, [r7, #10]
 800f604:	089b      	lsrs	r3, r3, #2
 800f606:	b29b      	uxth	r3, r3
 800f608:	3305      	adds	r3, #5
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	031b      	lsls	r3, r3, #12
 800f60e:	b29a      	uxth	r2, r3
 800f610:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f614:	b29b      	uxth	r3, r3
 800f616:	4313      	orrs	r3, r2
 800f618:	b29b      	uxth	r3, r3
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7f4 fc66 	bl	8003eec <lwip_htons>
 800f620:	4603      	mov	r3, r0
 800f622:	461a      	mov	r2, r3
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f628:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7f4 fc5e 	bl	8003eec <lwip_htons>
 800f630:	4603      	mov	r3, r0
 800f632:	461a      	mov	r2, r3
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	2200      	movs	r2, #0
 800f63c:	741a      	strb	r2, [r3, #16]
 800f63e:	2200      	movs	r2, #0
 800f640:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	2200      	movs	r2, #0
 800f646:	749a      	strb	r2, [r3, #18]
 800f648:	2200      	movs	r2, #0
 800f64a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f64c:	697b      	ldr	r3, [r7, #20]
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3718      	adds	r7, #24
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	08013b6c 	.word	0x08013b6c
 800f65c:	08014244 	.word	0x08014244
 800f660:	08013bc0 	.word	0x08013bc0

0800f664 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f664:	b5b0      	push	{r4, r5, r7, lr}
 800f666:	b08a      	sub	sp, #40	; 0x28
 800f668:	af04      	add	r7, sp, #16
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	607b      	str	r3, [r7, #4]
 800f66e:	460b      	mov	r3, r1
 800f670:	817b      	strh	r3, [r7, #10]
 800f672:	4613      	mov	r3, r2
 800f674:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d106      	bne.n	800f68a <tcp_output_alloc_header+0x26>
 800f67c:	4b15      	ldr	r3, [pc, #84]	; (800f6d4 <tcp_output_alloc_header+0x70>)
 800f67e:	f240 7242 	movw	r2, #1858	; 0x742
 800f682:	4915      	ldr	r1, [pc, #84]	; (800f6d8 <tcp_output_alloc_header+0x74>)
 800f684:	4815      	ldr	r0, [pc, #84]	; (800f6dc <tcp_output_alloc_header+0x78>)
 800f686:	f001 f9b9 	bl	80109fc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	8adb      	ldrh	r3, [r3, #22]
 800f692:	68fa      	ldr	r2, [r7, #12]
 800f694:	8b12      	ldrh	r2, [r2, #24]
 800f696:	68f9      	ldr	r1, [r7, #12]
 800f698:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f69a:	893d      	ldrh	r5, [r7, #8]
 800f69c:	897c      	ldrh	r4, [r7, #10]
 800f69e:	9103      	str	r1, [sp, #12]
 800f6a0:	2110      	movs	r1, #16
 800f6a2:	9102      	str	r1, [sp, #8]
 800f6a4:	9201      	str	r2, [sp, #4]
 800f6a6:	9300      	str	r3, [sp, #0]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	462a      	mov	r2, r5
 800f6ac:	4621      	mov	r1, r4
 800f6ae:	f7ff ff65 	bl	800f57c <tcp_output_alloc_header_common>
 800f6b2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d006      	beq.n	800f6c8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6be:	68fa      	ldr	r2, [r7, #12]
 800f6c0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f6c2:	441a      	add	r2, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f6c8:	697b      	ldr	r3, [r7, #20]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3718      	adds	r7, #24
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bdb0      	pop	{r4, r5, r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	08013b6c 	.word	0x08013b6c
 800f6d8:	08014274 	.word	0x08014274
 800f6dc:	08013bc0 	.word	0x08013bc0

0800f6e0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b088      	sub	sp, #32
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	4611      	mov	r1, r2
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	71fb      	strb	r3, [r7, #7]
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d106      	bne.n	800f70e <tcp_output_fill_options+0x2e>
 800f700:	4b15      	ldr	r3, [pc, #84]	; (800f758 <tcp_output_fill_options+0x78>)
 800f702:	f240 7256 	movw	r2, #1878	; 0x756
 800f706:	4915      	ldr	r1, [pc, #84]	; (800f75c <tcp_output_fill_options+0x7c>)
 800f708:	4815      	ldr	r0, [pc, #84]	; (800f760 <tcp_output_fill_options+0x80>)
 800f70a:	f001 f977 	bl	80109fc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	3314      	adds	r3, #20
 800f718:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f71a:	69bb      	ldr	r3, [r7, #24]
 800f71c:	f103 0214 	add.w	r2, r3, #20
 800f720:	8bfb      	ldrh	r3, [r7, #30]
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	4619      	mov	r1, r3
 800f726:	79fb      	ldrb	r3, [r7, #7]
 800f728:	f003 0301 	and.w	r3, r3, #1
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d001      	beq.n	800f734 <tcp_output_fill_options+0x54>
 800f730:	2304      	movs	r3, #4
 800f732:	e000      	b.n	800f736 <tcp_output_fill_options+0x56>
 800f734:	2300      	movs	r3, #0
 800f736:	440b      	add	r3, r1
 800f738:	441a      	add	r2, r3
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d006      	beq.n	800f74e <tcp_output_fill_options+0x6e>
 800f740:	4b05      	ldr	r3, [pc, #20]	; (800f758 <tcp_output_fill_options+0x78>)
 800f742:	f240 7275 	movw	r2, #1909	; 0x775
 800f746:	4907      	ldr	r1, [pc, #28]	; (800f764 <tcp_output_fill_options+0x84>)
 800f748:	4805      	ldr	r0, [pc, #20]	; (800f760 <tcp_output_fill_options+0x80>)
 800f74a:	f001 f957 	bl	80109fc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f74e:	bf00      	nop
 800f750:	3720      	adds	r7, #32
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	08013b6c 	.word	0x08013b6c
 800f75c:	0801429c 	.word	0x0801429c
 800f760:	08013bc0 	.word	0x08013bc0
 800f764:	08014194 	.word	0x08014194

0800f768 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b08a      	sub	sp, #40	; 0x28
 800f76c:	af04      	add	r7, sp, #16
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	607a      	str	r2, [r7, #4]
 800f774:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d106      	bne.n	800f78a <tcp_output_control_segment+0x22>
 800f77c:	4b1c      	ldr	r3, [pc, #112]	; (800f7f0 <tcp_output_control_segment+0x88>)
 800f77e:	f240 7287 	movw	r2, #1927	; 0x787
 800f782:	491c      	ldr	r1, [pc, #112]	; (800f7f4 <tcp_output_control_segment+0x8c>)
 800f784:	481c      	ldr	r0, [pc, #112]	; (800f7f8 <tcp_output_control_segment+0x90>)
 800f786:	f001 f939 	bl	80109fc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f78a:	683a      	ldr	r2, [r7, #0]
 800f78c:	6879      	ldr	r1, [r7, #4]
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f7fe fac8 	bl	800dd24 <tcp_route>
 800f794:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d102      	bne.n	800f7a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f79c:	23fc      	movs	r3, #252	; 0xfc
 800f79e:	75fb      	strb	r3, [r7, #23]
 800f7a0:	e01c      	b.n	800f7dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d006      	beq.n	800f7b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	7adb      	ldrb	r3, [r3, #11]
 800f7ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	7a9b      	ldrb	r3, [r3, #10]
 800f7b2:	757b      	strb	r3, [r7, #21]
 800f7b4:	e003      	b.n	800f7be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f7b6:	23ff      	movs	r3, #255	; 0xff
 800f7b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f7be:	7dba      	ldrb	r2, [r7, #22]
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	9302      	str	r3, [sp, #8]
 800f7c4:	2306      	movs	r3, #6
 800f7c6:	9301      	str	r3, [sp, #4]
 800f7c8:	7d7b      	ldrb	r3, [r7, #21]
 800f7ca:	9300      	str	r3, [sp, #0]
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	683a      	ldr	r2, [r7, #0]
 800f7d0:	6879      	ldr	r1, [r7, #4]
 800f7d2:	68b8      	ldr	r0, [r7, #8]
 800f7d4:	f7f7 fd0c 	bl	80071f0 <ip4_output_if>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f7dc:	68b8      	ldr	r0, [r7, #8]
 800f7de:	f7f9 fec7 	bl	8009570 <pbuf_free>
  return err;
 800f7e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3718      	adds	r7, #24
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	08013b6c 	.word	0x08013b6c
 800f7f4:	080142c4 	.word	0x080142c4
 800f7f8:	08013bc0 	.word	0x08013bc0

0800f7fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f7fc:	b590      	push	{r4, r7, lr}
 800f7fe:	b08b      	sub	sp, #44	; 0x2c
 800f800:	af04      	add	r7, sp, #16
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
 800f808:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d106      	bne.n	800f81e <tcp_rst+0x22>
 800f810:	4b1f      	ldr	r3, [pc, #124]	; (800f890 <tcp_rst+0x94>)
 800f812:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f816:	491f      	ldr	r1, [pc, #124]	; (800f894 <tcp_rst+0x98>)
 800f818:	481f      	ldr	r0, [pc, #124]	; (800f898 <tcp_rst+0x9c>)
 800f81a:	f001 f8ef 	bl	80109fc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f820:	2b00      	cmp	r3, #0
 800f822:	d106      	bne.n	800f832 <tcp_rst+0x36>
 800f824:	4b1a      	ldr	r3, [pc, #104]	; (800f890 <tcp_rst+0x94>)
 800f826:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f82a:	491c      	ldr	r1, [pc, #112]	; (800f89c <tcp_rst+0xa0>)
 800f82c:	481a      	ldr	r0, [pc, #104]	; (800f898 <tcp_rst+0x9c>)
 800f82e:	f001 f8e5 	bl	80109fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f832:	2300      	movs	r3, #0
 800f834:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f836:	f246 0308 	movw	r3, #24584	; 0x6008
 800f83a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f83c:	7dfb      	ldrb	r3, [r7, #23]
 800f83e:	b29c      	uxth	r4, r3
 800f840:	68b8      	ldr	r0, [r7, #8]
 800f842:	f7f4 fb68 	bl	8003f16 <lwip_htonl>
 800f846:	4602      	mov	r2, r0
 800f848:	8abb      	ldrh	r3, [r7, #20]
 800f84a:	9303      	str	r3, [sp, #12]
 800f84c:	2314      	movs	r3, #20
 800f84e:	9302      	str	r3, [sp, #8]
 800f850:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f852:	9301      	str	r3, [sp, #4]
 800f854:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	4613      	mov	r3, r2
 800f85a:	2200      	movs	r2, #0
 800f85c:	4621      	mov	r1, r4
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f7ff fe8c 	bl	800f57c <tcp_output_alloc_header_common>
 800f864:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d00c      	beq.n	800f886 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f86c:	7dfb      	ldrb	r3, [r7, #23]
 800f86e:	2200      	movs	r2, #0
 800f870:	6939      	ldr	r1, [r7, #16]
 800f872:	68f8      	ldr	r0, [r7, #12]
 800f874:	f7ff ff34 	bl	800f6e0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87a:	683a      	ldr	r2, [r7, #0]
 800f87c:	6939      	ldr	r1, [r7, #16]
 800f87e:	68f8      	ldr	r0, [r7, #12]
 800f880:	f7ff ff72 	bl	800f768 <tcp_output_control_segment>
 800f884:	e000      	b.n	800f888 <tcp_rst+0x8c>
    return;
 800f886:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f888:	371c      	adds	r7, #28
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd90      	pop	{r4, r7, pc}
 800f88e:	bf00      	nop
 800f890:	08013b6c 	.word	0x08013b6c
 800f894:	080142f0 	.word	0x080142f0
 800f898:	08013bc0 	.word	0x08013bc0
 800f89c:	0801430c 	.word	0x0801430c

0800f8a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f8a0:	b590      	push	{r4, r7, lr}
 800f8a2:	b087      	sub	sp, #28
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d106      	bne.n	800f8c4 <tcp_send_empty_ack+0x24>
 800f8b6:	4b29      	ldr	r3, [pc, #164]	; (800f95c <tcp_send_empty_ack+0xbc>)
 800f8b8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f8bc:	4928      	ldr	r1, [pc, #160]	; (800f960 <tcp_send_empty_ack+0xc0>)
 800f8be:	4829      	ldr	r0, [pc, #164]	; (800f964 <tcp_send_empty_ack+0xc4>)
 800f8c0:	f001 f89c 	bl	80109fc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f8c4:	7dfb      	ldrb	r3, [r7, #23]
 800f8c6:	f003 0301 	and.w	r3, r3, #1
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d001      	beq.n	800f8d2 <tcp_send_empty_ack+0x32>
 800f8ce:	2304      	movs	r3, #4
 800f8d0:	e000      	b.n	800f8d4 <tcp_send_empty_ack+0x34>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f8d6:	7d7b      	ldrb	r3, [r7, #21]
 800f8d8:	b29c      	uxth	r4, r3
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7f4 fb19 	bl	8003f16 <lwip_htonl>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	4621      	mov	r1, r4
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f7ff feba 	bl	800f664 <tcp_output_alloc_header>
 800f8f0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d109      	bne.n	800f90c <tcp_send_empty_ack+0x6c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	8b5b      	ldrh	r3, [r3, #26]
 800f8fc:	f043 0303 	orr.w	r3, r3, #3
 800f900:	b29a      	uxth	r2, r3
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f906:	f06f 0301 	mvn.w	r3, #1
 800f90a:	e023      	b.n	800f954 <tcp_send_empty_ack+0xb4>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f90c:	7dbb      	ldrb	r3, [r7, #22]
 800f90e:	7dfa      	ldrb	r2, [r7, #23]
 800f910:	6939      	ldr	r1, [r7, #16]
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f7ff fee4 	bl	800f6e0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	3304      	adds	r3, #4
 800f91e:	6939      	ldr	r1, [r7, #16]
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7ff ff21 	bl	800f768 <tcp_output_control_segment>
 800f926:	4603      	mov	r3, r0
 800f928:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f92a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d007      	beq.n	800f942 <tcp_send_empty_ack+0xa2>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	8b5b      	ldrh	r3, [r3, #26]
 800f936:	f043 0303 	orr.w	r3, r3, #3
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	835a      	strh	r2, [r3, #26]
 800f940:	e006      	b.n	800f950 <tcp_send_empty_ack+0xb0>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	8b5b      	ldrh	r3, [r3, #26]
 800f946:	f023 0303 	bic.w	r3, r3, #3
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f954:	4618      	mov	r0, r3
 800f956:	371c      	adds	r7, #28
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd90      	pop	{r4, r7, pc}
 800f95c:	08013b6c 	.word	0x08013b6c
 800f960:	08014328 	.word	0x08014328
 800f964:	08013bc0 	.word	0x08013bc0

0800f968 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f968:	b590      	push	{r4, r7, lr}
 800f96a:	b087      	sub	sp, #28
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f970:	2300      	movs	r3, #0
 800f972:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d106      	bne.n	800f988 <tcp_keepalive+0x20>
 800f97a:	4b18      	ldr	r3, [pc, #96]	; (800f9dc <tcp_keepalive+0x74>)
 800f97c:	f640 0224 	movw	r2, #2084	; 0x824
 800f980:	4917      	ldr	r1, [pc, #92]	; (800f9e0 <tcp_keepalive+0x78>)
 800f982:	4818      	ldr	r0, [pc, #96]	; (800f9e4 <tcp_keepalive+0x7c>)
 800f984:	f001 f83a 	bl	80109fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f988:	7dfb      	ldrb	r3, [r7, #23]
 800f98a:	b29c      	uxth	r4, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f990:	3b01      	subs	r3, #1
 800f992:	4618      	mov	r0, r3
 800f994:	f7f4 fabf 	bl	8003f16 <lwip_htonl>
 800f998:	4603      	mov	r3, r0
 800f99a:	2200      	movs	r2, #0
 800f99c:	4621      	mov	r1, r4
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f7ff fe60 	bl	800f664 <tcp_output_alloc_header>
 800f9a4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d102      	bne.n	800f9b2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b0:	e010      	b.n	800f9d4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f9b2:	7dfb      	ldrb	r3, [r7, #23]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	6939      	ldr	r1, [r7, #16]
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7ff fe91 	bl	800f6e0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	3304      	adds	r3, #4
 800f9c4:	6939      	ldr	r1, [r7, #16]
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f7ff fece 	bl	800f768 <tcp_output_control_segment>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f9d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	371c      	adds	r7, #28
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd90      	pop	{r4, r7, pc}
 800f9dc:	08013b6c 	.word	0x08013b6c
 800f9e0:	08014348 	.word	0x08014348
 800f9e4:	08013bc0 	.word	0x08013bc0

0800f9e8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f9e8:	b590      	push	{r4, r7, lr}
 800f9ea:	b08b      	sub	sp, #44	; 0x2c
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d106      	bne.n	800fa0a <tcp_zero_window_probe+0x22>
 800f9fc:	4b4c      	ldr	r3, [pc, #304]	; (800fb30 <tcp_zero_window_probe+0x148>)
 800f9fe:	f640 024f 	movw	r2, #2127	; 0x84f
 800fa02:	494c      	ldr	r1, [pc, #304]	; (800fb34 <tcp_zero_window_probe+0x14c>)
 800fa04:	484c      	ldr	r0, [pc, #304]	; (800fb38 <tcp_zero_window_probe+0x150>)
 800fa06:	f000 fff9 	bl	80109fc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa0e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fa10:	6a3b      	ldr	r3, [r7, #32]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d101      	bne.n	800fa1a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fa16:	2300      	movs	r3, #0
 800fa18:	e086      	b.n	800fb28 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fa20:	2bff      	cmp	r3, #255	; 0xff
 800fa22:	d007      	beq.n	800fa34 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	b2da      	uxtb	r2, r3
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fa34:	6a3b      	ldr	r3, [r7, #32]
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	899b      	ldrh	r3, [r3, #12]
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7f4 fa55 	bl	8003eec <lwip_htons>
 800fa42:	4603      	mov	r3, r0
 800fa44:	b2db      	uxtb	r3, r3
 800fa46:	f003 0301 	and.w	r3, r3, #1
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d005      	beq.n	800fa5a <tcp_zero_window_probe+0x72>
 800fa4e:	6a3b      	ldr	r3, [r7, #32]
 800fa50:	891b      	ldrh	r3, [r3, #8]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d101      	bne.n	800fa5a <tcp_zero_window_probe+0x72>
 800fa56:	2301      	movs	r3, #1
 800fa58:	e000      	b.n	800fa5c <tcp_zero_window_probe+0x74>
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fa5e:	7ffb      	ldrb	r3, [r7, #31]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	bf0c      	ite	eq
 800fa64:	2301      	moveq	r3, #1
 800fa66:	2300      	movne	r3, #0
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fa6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa70:	b299      	uxth	r1, r3
 800fa72:	6a3b      	ldr	r3, [r7, #32]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	8bba      	ldrh	r2, [r7, #28]
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f7ff fdf2 	bl	800f664 <tcp_output_alloc_header>
 800fa80:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fa82:	69bb      	ldr	r3, [r7, #24]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d102      	bne.n	800fa8e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fa88:	f04f 33ff 	mov.w	r3, #4294967295
 800fa8c:	e04c      	b.n	800fb28 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fa94:	7ffb      	ldrb	r3, [r7, #31]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d011      	beq.n	800fabe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	899b      	ldrh	r3, [r3, #12]
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	b21b      	sxth	r3, r3
 800faa2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800faa6:	b21c      	sxth	r4, r3
 800faa8:	2011      	movs	r0, #17
 800faaa:	f7f4 fa1f 	bl	8003eec <lwip_htons>
 800faae:	4603      	mov	r3, r0
 800fab0:	b21b      	sxth	r3, r3
 800fab2:	4323      	orrs	r3, r4
 800fab4:	b21b      	sxth	r3, r3
 800fab6:	b29a      	uxth	r2, r3
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	819a      	strh	r2, [r3, #12]
 800fabc:	e010      	b.n	800fae0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fabe:	69bb      	ldr	r3, [r7, #24]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	3314      	adds	r3, #20
 800fac4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fac6:	6a3b      	ldr	r3, [r7, #32]
 800fac8:	6858      	ldr	r0, [r3, #4]
 800faca:	6a3b      	ldr	r3, [r7, #32]
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	891a      	ldrh	r2, [r3, #8]
 800fad0:	6a3b      	ldr	r3, [r7, #32]
 800fad2:	891b      	ldrh	r3, [r3, #8]
 800fad4:	1ad3      	subs	r3, r2, r3
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	2201      	movs	r2, #1
 800fada:	6939      	ldr	r1, [r7, #16]
 800fadc:	f7f9 ff42 	bl	8009964 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fae0:	6a3b      	ldr	r3, [r7, #32]
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7f4 fa15 	bl	8003f16 <lwip_htonl>
 800faec:	4603      	mov	r3, r0
 800faee:	3301      	adds	r3, #1
 800faf0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	1ad3      	subs	r3, r2, r3
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	da02      	bge.n	800fb04 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	68fa      	ldr	r2, [r7, #12]
 800fb02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fb04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb08:	2200      	movs	r2, #0
 800fb0a:	69b9      	ldr	r1, [r7, #24]
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f7ff fde7 	bl	800f6e0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fb12:	687a      	ldr	r2, [r7, #4]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	3304      	adds	r3, #4
 800fb18:	69b9      	ldr	r1, [r7, #24]
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7ff fe24 	bl	800f768 <tcp_output_control_segment>
 800fb20:	4603      	mov	r3, r0
 800fb22:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fb24:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	372c      	adds	r7, #44	; 0x2c
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd90      	pop	{r4, r7, pc}
 800fb30:	08013b6c 	.word	0x08013b6c
 800fb34:	08014364 	.word	0x08014364
 800fb38:	08013bc0 	.word	0x08013bc0

0800fb3c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fb44:	f7f9 fffc 	bl	8009b40 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fb48:	4b0a      	ldr	r3, [pc, #40]	; (800fb74 <tcpip_tcp_timer+0x38>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d103      	bne.n	800fb58 <tcpip_tcp_timer+0x1c>
 800fb50:	4b09      	ldr	r3, [pc, #36]	; (800fb78 <tcpip_tcp_timer+0x3c>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d005      	beq.n	800fb64 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fb58:	2200      	movs	r2, #0
 800fb5a:	4908      	ldr	r1, [pc, #32]	; (800fb7c <tcpip_tcp_timer+0x40>)
 800fb5c:	20fa      	movs	r0, #250	; 0xfa
 800fb5e:	f000 f8e5 	bl	800fd2c <sys_timeout>
 800fb62:	e002      	b.n	800fb6a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fb64:	4b06      	ldr	r3, [pc, #24]	; (800fb80 <tcpip_tcp_timer+0x44>)
 800fb66:	2200      	movs	r2, #0
 800fb68:	601a      	str	r2, [r3, #0]
  }
}
 800fb6a:	bf00      	nop
 800fb6c:	3708      	adds	r7, #8
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}
 800fb72:	bf00      	nop
 800fb74:	20006d20 	.word	0x20006d20
 800fb78:	20006d30 	.word	0x20006d30
 800fb7c:	0800fb3d 	.word	0x0800fb3d
 800fb80:	20000658 	.word	0x20000658

0800fb84 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fb88:	4b0a      	ldr	r3, [pc, #40]	; (800fbb4 <tcp_timer_needed+0x30>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d10f      	bne.n	800fbb0 <tcp_timer_needed+0x2c>
 800fb90:	4b09      	ldr	r3, [pc, #36]	; (800fbb8 <tcp_timer_needed+0x34>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d103      	bne.n	800fba0 <tcp_timer_needed+0x1c>
 800fb98:	4b08      	ldr	r3, [pc, #32]	; (800fbbc <tcp_timer_needed+0x38>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d007      	beq.n	800fbb0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fba0:	4b04      	ldr	r3, [pc, #16]	; (800fbb4 <tcp_timer_needed+0x30>)
 800fba2:	2201      	movs	r2, #1
 800fba4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fba6:	2200      	movs	r2, #0
 800fba8:	4905      	ldr	r1, [pc, #20]	; (800fbc0 <tcp_timer_needed+0x3c>)
 800fbaa:	20fa      	movs	r0, #250	; 0xfa
 800fbac:	f000 f8be 	bl	800fd2c <sys_timeout>
  }
}
 800fbb0:	bf00      	nop
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	20000658 	.word	0x20000658
 800fbb8:	20006d20 	.word	0x20006d20
 800fbbc:	20006d30 	.word	0x20006d30
 800fbc0:	0800fb3d 	.word	0x0800fb3d

0800fbc4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b086      	sub	sp, #24
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fbd0:	2006      	movs	r0, #6
 800fbd2:	f7f8 fe69 	bl	80088a8 <memp_malloc>
 800fbd6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d109      	bne.n	800fbf2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d149      	bne.n	800fc78 <sys_timeout_abs+0xb4>
 800fbe4:	4b26      	ldr	r3, [pc, #152]	; (800fc80 <sys_timeout_abs+0xbc>)
 800fbe6:	22be      	movs	r2, #190	; 0xbe
 800fbe8:	4926      	ldr	r1, [pc, #152]	; (800fc84 <sys_timeout_abs+0xc0>)
 800fbea:	4827      	ldr	r0, [pc, #156]	; (800fc88 <sys_timeout_abs+0xc4>)
 800fbec:	f000 ff06 	bl	80109fc <iprintf>
    return;
 800fbf0:	e042      	b.n	800fc78 <sys_timeout_abs+0xb4>
  }

  timeout->next = NULL;
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	68ba      	ldr	r2, [r7, #8]
 800fbfc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fc0a:	4b20      	ldr	r3, [pc, #128]	; (800fc8c <sys_timeout_abs+0xc8>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d103      	bne.n	800fc1a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fc12:	4a1e      	ldr	r2, [pc, #120]	; (800fc8c <sys_timeout_abs+0xc8>)
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	6013      	str	r3, [r2, #0]
    return;
 800fc18:	e02f      	b.n	800fc7a <sys_timeout_abs+0xb6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	685a      	ldr	r2, [r3, #4]
 800fc1e:	4b1b      	ldr	r3, [pc, #108]	; (800fc8c <sys_timeout_abs+0xc8>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	1ad3      	subs	r3, r2, r3
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	da07      	bge.n	800fc3a <sys_timeout_abs+0x76>
    timeout->next = next_timeout;
 800fc2a:	4b18      	ldr	r3, [pc, #96]	; (800fc8c <sys_timeout_abs+0xc8>)
 800fc2c:	681a      	ldr	r2, [r3, #0]
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fc32:	4a16      	ldr	r2, [pc, #88]	; (800fc8c <sys_timeout_abs+0xc8>)
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	6013      	str	r3, [r2, #0]
 800fc38:	e01f      	b.n	800fc7a <sys_timeout_abs+0xb6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fc3a:	4b14      	ldr	r3, [pc, #80]	; (800fc8c <sys_timeout_abs+0xc8>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	617b      	str	r3, [r7, #20]
 800fc40:	e016      	b.n	800fc70 <sys_timeout_abs+0xac>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d007      	beq.n	800fc5a <sys_timeout_abs+0x96>
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	685a      	ldr	r2, [r3, #4]
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	1ad3      	subs	r3, r2, r3
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	da07      	bge.n	800fc6a <sys_timeout_abs+0xa6>
        timeout->next = t->next;
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	681a      	ldr	r2, [r3, #0]
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	693a      	ldr	r2, [r7, #16]
 800fc66:	601a      	str	r2, [r3, #0]
        break;
 800fc68:	e007      	b.n	800fc7a <sys_timeout_abs+0xb6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	617b      	str	r3, [r7, #20]
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d1e5      	bne.n	800fc42 <sys_timeout_abs+0x7e>
 800fc76:	e000      	b.n	800fc7a <sys_timeout_abs+0xb6>
    return;
 800fc78:	bf00      	nop
      }
    }
  }
}
 800fc7a:	3718      	adds	r7, #24
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	08014388 	.word	0x08014388
 800fc84:	080143bc 	.word	0x080143bc
 800fc88:	080143fc 	.word	0x080143fc
 800fc8c:	20000650 	.word	0x20000650

0800fc90 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b086      	sub	sp, #24
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	4798      	blx	r3

  now = sys_now();
 800fca2:	f7f3 fa7f 	bl	80031a4 <sys_now>
 800fca6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	4b0d      	ldr	r3, [pc, #52]	; (800fce4 <lwip_cyclic_timer+0x54>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	1ad3      	subs	r3, r2, r3
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	da09      	bge.n	800fcd2 <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	4413      	add	r3, r2
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	4907      	ldr	r1, [pc, #28]	; (800fce8 <lwip_cyclic_timer+0x58>)
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7ff ff7a 	bl	800fbc4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800fcd0:	e004      	b.n	800fcdc <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	4904      	ldr	r1, [pc, #16]	; (800fce8 <lwip_cyclic_timer+0x58>)
 800fcd6:	68f8      	ldr	r0, [r7, #12]
 800fcd8:	f7ff ff74 	bl	800fbc4 <sys_timeout_abs>
}
 800fcdc:	bf00      	nop
 800fcde:	3718      	adds	r7, #24
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	20000654 	.word	0x20000654
 800fce8:	0800fc91 	.word	0x0800fc91

0800fcec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	607b      	str	r3, [r7, #4]
 800fcf6:	e00e      	b.n	800fd16 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800fcf8:	4a0a      	ldr	r2, [pc, #40]	; (800fd24 <sys_timeouts_init+0x38>)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	00db      	lsls	r3, r3, #3
 800fd04:	4a07      	ldr	r2, [pc, #28]	; (800fd24 <sys_timeouts_init+0x38>)
 800fd06:	4413      	add	r3, r2
 800fd08:	461a      	mov	r2, r3
 800fd0a:	4907      	ldr	r1, [pc, #28]	; (800fd28 <sys_timeouts_init+0x3c>)
 800fd0c:	f000 f80e 	bl	800fd2c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	3301      	adds	r3, #1
 800fd14:	607b      	str	r3, [r7, #4]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2b04      	cmp	r3, #4
 800fd1a:	d9ed      	bls.n	800fcf8 <sys_timeouts_init+0xc>
  }
}
 800fd1c:	bf00      	nop
 800fd1e:	3708      	adds	r7, #8
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}
 800fd24:	08014b6c 	.word	0x08014b6c
 800fd28:	0800fc91 	.word	0x0800fc91

0800fd2c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b086      	sub	sp, #24
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	60f8      	str	r0, [r7, #12]
 800fd34:	60b9      	str	r1, [r7, #8]
 800fd36:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd3e:	d306      	bcc.n	800fd4e <sys_timeout+0x22>
 800fd40:	4b0a      	ldr	r3, [pc, #40]	; (800fd6c <sys_timeout+0x40>)
 800fd42:	f240 1229 	movw	r2, #297	; 0x129
 800fd46:	490a      	ldr	r1, [pc, #40]	; (800fd70 <sys_timeout+0x44>)
 800fd48:	480a      	ldr	r0, [pc, #40]	; (800fd74 <sys_timeout+0x48>)
 800fd4a:	f000 fe57 	bl	80109fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800fd4e:	f7f3 fa29 	bl	80031a4 <sys_now>
 800fd52:	4602      	mov	r2, r0
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	4413      	add	r3, r2
 800fd58:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	68b9      	ldr	r1, [r7, #8]
 800fd5e:	6978      	ldr	r0, [r7, #20]
 800fd60:	f7ff ff30 	bl	800fbc4 <sys_timeout_abs>
#endif
}
 800fd64:	bf00      	nop
 800fd66:	3718      	adds	r7, #24
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}
 800fd6c:	08014388 	.word	0x08014388
 800fd70:	08014424 	.word	0x08014424
 800fd74:	080143fc 	.word	0x080143fc

0800fd78 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800fd7e:	f7f3 fa11 	bl	80031a4 <sys_now>
 800fd82:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800fd84:	4b18      	ldr	r3, [pc, #96]	; (800fde8 <sys_check_timeouts+0x70>)
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d001      	beq.n	800fd92 <sys_check_timeouts+0x1a>
 800fd8e:	f7f9 f8b7 	bl	8008f00 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800fd92:	4b16      	ldr	r3, [pc, #88]	; (800fdec <sys_check_timeouts+0x74>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d01e      	beq.n	800fddc <sys_check_timeouts+0x64>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	68fa      	ldr	r2, [r7, #12]
 800fda4:	1ad3      	subs	r3, r2, r3
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	db1a      	blt.n	800fde0 <sys_check_timeouts+0x68>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	4a0f      	ldr	r2, [pc, #60]	; (800fdec <sys_check_timeouts+0x74>)
 800fdb0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	4a0b      	ldr	r2, [pc, #44]	; (800fdf0 <sys_check_timeouts+0x78>)
 800fdc4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800fdc6:	68b9      	ldr	r1, [r7, #8]
 800fdc8:	2006      	movs	r0, #6
 800fdca:	f7f8 fdb9 	bl	8008940 <memp_free>
    if (handler != NULL) {
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d0d7      	beq.n	800fd84 <sys_check_timeouts+0xc>
      handler(arg);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6838      	ldr	r0, [r7, #0]
 800fdd8:	4798      	blx	r3
  do {
 800fdda:	e7d3      	b.n	800fd84 <sys_check_timeouts+0xc>
      return;
 800fddc:	bf00      	nop
 800fdde:	e000      	b.n	800fde2 <sys_check_timeouts+0x6a>
      return;
 800fde0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800fde2:	3710      	adds	r7, #16
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	20006d18 	.word	0x20006d18
 800fdec:	20000650 	.word	0x20000650
 800fdf0:	20000654 	.word	0x20000654

0800fdf4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fdf8:	f000 fe18 	bl	8010a2c <rand>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	4b01      	ldr	r3, [pc, #4]	; (800fe14 <udp_init+0x20>)
 800fe0e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fe10:	bf00      	nop
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	20000018 	.word	0x20000018

0800fe18 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800fe22:	4b17      	ldr	r3, [pc, #92]	; (800fe80 <udp_new_port+0x68>)
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	1c5a      	adds	r2, r3, #1
 800fe28:	b291      	uxth	r1, r2
 800fe2a:	4a15      	ldr	r2, [pc, #84]	; (800fe80 <udp_new_port+0x68>)
 800fe2c:	8011      	strh	r1, [r2, #0]
 800fe2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d103      	bne.n	800fe3e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800fe36:	4b12      	ldr	r3, [pc, #72]	; (800fe80 <udp_new_port+0x68>)
 800fe38:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800fe3c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe3e:	4b11      	ldr	r3, [pc, #68]	; (800fe84 <udp_new_port+0x6c>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	603b      	str	r3, [r7, #0]
 800fe44:	e011      	b.n	800fe6a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	8a5a      	ldrh	r2, [r3, #18]
 800fe4a:	4b0d      	ldr	r3, [pc, #52]	; (800fe80 <udp_new_port+0x68>)
 800fe4c:	881b      	ldrh	r3, [r3, #0]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d108      	bne.n	800fe64 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800fe52:	88fb      	ldrh	r3, [r7, #6]
 800fe54:	3301      	adds	r3, #1
 800fe56:	80fb      	strh	r3, [r7, #6]
 800fe58:	88fb      	ldrh	r3, [r7, #6]
 800fe5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe5e:	d3e0      	bcc.n	800fe22 <udp_new_port+0xa>
        return 0;
 800fe60:	2300      	movs	r3, #0
 800fe62:	e007      	b.n	800fe74 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	603b      	str	r3, [r7, #0]
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d1ea      	bne.n	800fe46 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800fe70:	4b03      	ldr	r3, [pc, #12]	; (800fe80 <udp_new_port+0x68>)
 800fe72:	881b      	ldrh	r3, [r3, #0]
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	370c      	adds	r7, #12
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr
 800fe80:	20000018 	.word	0x20000018
 800fe84:	20006d38 	.word	0x20006d38

0800fe88 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	4613      	mov	r3, r2
 800fe94:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d105      	bne.n	800fea8 <udp_input_local_match+0x20>
 800fe9c:	4b27      	ldr	r3, [pc, #156]	; (800ff3c <udp_input_local_match+0xb4>)
 800fe9e:	2287      	movs	r2, #135	; 0x87
 800fea0:	4927      	ldr	r1, [pc, #156]	; (800ff40 <udp_input_local_match+0xb8>)
 800fea2:	4828      	ldr	r0, [pc, #160]	; (800ff44 <udp_input_local_match+0xbc>)
 800fea4:	f000 fdaa 	bl	80109fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d105      	bne.n	800feba <udp_input_local_match+0x32>
 800feae:	4b23      	ldr	r3, [pc, #140]	; (800ff3c <udp_input_local_match+0xb4>)
 800feb0:	2288      	movs	r2, #136	; 0x88
 800feb2:	4925      	ldr	r1, [pc, #148]	; (800ff48 <udp_input_local_match+0xc0>)
 800feb4:	4823      	ldr	r0, [pc, #140]	; (800ff44 <udp_input_local_match+0xbc>)
 800feb6:	f000 fda1 	bl	80109fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	7a1b      	ldrb	r3, [r3, #8]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d00b      	beq.n	800feda <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	7a1a      	ldrb	r2, [r3, #8]
 800fec6:	4b21      	ldr	r3, [pc, #132]	; (800ff4c <udp_input_local_match+0xc4>)
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fece:	3301      	adds	r3, #1
 800fed0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d001      	beq.n	800feda <udp_input_local_match+0x52>
    return 0;
 800fed6:	2300      	movs	r3, #0
 800fed8:	e02b      	b.n	800ff32 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800feda:	79fb      	ldrb	r3, [r7, #7]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d018      	beq.n	800ff12 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d013      	beq.n	800ff0e <udp_input_local_match+0x86>
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00f      	beq.n	800ff0e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800feee:	4b17      	ldr	r3, [pc, #92]	; (800ff4c <udp_input_local_match+0xc4>)
 800fef0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fef6:	d00a      	beq.n	800ff0e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681a      	ldr	r2, [r3, #0]
 800fefc:	4b13      	ldr	r3, [pc, #76]	; (800ff4c <udp_input_local_match+0xc4>)
 800fefe:	695b      	ldr	r3, [r3, #20]
 800ff00:	405a      	eors	r2, r3
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	3308      	adds	r3, #8
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d110      	bne.n	800ff30 <udp_input_local_match+0xa8>
          return 1;
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e00f      	b.n	800ff32 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d009      	beq.n	800ff2c <udp_input_local_match+0xa4>
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d005      	beq.n	800ff2c <udp_input_local_match+0xa4>
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	4b09      	ldr	r3, [pc, #36]	; (800ff4c <udp_input_local_match+0xc4>)
 800ff26:	695b      	ldr	r3, [r3, #20]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d101      	bne.n	800ff30 <udp_input_local_match+0xa8>
        return 1;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	e000      	b.n	800ff32 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ff30:	2300      	movs	r3, #0
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3710      	adds	r7, #16
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	08014470 	.word	0x08014470
 800ff40:	080144a0 	.word	0x080144a0
 800ff44:	080144c4 	.word	0x080144c4
 800ff48:	080144ec 	.word	0x080144ec
 800ff4c:	20003794 	.word	0x20003794

0800ff50 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ff50:	b590      	push	{r4, r7, lr}
 800ff52:	b08d      	sub	sp, #52	; 0x34
 800ff54:	af02      	add	r7, sp, #8
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d105      	bne.n	800ff70 <udp_input+0x20>
 800ff64:	4b7c      	ldr	r3, [pc, #496]	; (8010158 <udp_input+0x208>)
 800ff66:	22cf      	movs	r2, #207	; 0xcf
 800ff68:	497c      	ldr	r1, [pc, #496]	; (801015c <udp_input+0x20c>)
 800ff6a:	487d      	ldr	r0, [pc, #500]	; (8010160 <udp_input+0x210>)
 800ff6c:	f000 fd46 	bl	80109fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d105      	bne.n	800ff82 <udp_input+0x32>
 800ff76:	4b78      	ldr	r3, [pc, #480]	; (8010158 <udp_input+0x208>)
 800ff78:	22d0      	movs	r2, #208	; 0xd0
 800ff7a:	497a      	ldr	r1, [pc, #488]	; (8010164 <udp_input+0x214>)
 800ff7c:	4878      	ldr	r0, [pc, #480]	; (8010160 <udp_input+0x210>)
 800ff7e:	f000 fd3d 	bl	80109fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	895b      	ldrh	r3, [r3, #10]
 800ff86:	2b07      	cmp	r3, #7
 800ff88:	d803      	bhi.n	800ff92 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f7f9 faf0 	bl	8009570 <pbuf_free>
    goto end;
 800ff90:	e0de      	b.n	8010150 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ff98:	4b73      	ldr	r3, [pc, #460]	; (8010168 <udp_input+0x218>)
 800ff9a:	695a      	ldr	r2, [r3, #20]
 800ff9c:	4b72      	ldr	r3, [pc, #456]	; (8010168 <udp_input+0x218>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	4610      	mov	r0, r2
 800ffa4:	f7f7 f9fc 	bl	80073a0 <ip4_addr_isbroadcast_u32>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	881b      	ldrh	r3, [r3, #0]
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7f3 ff9a 	bl	8003eec <lwip_htons>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	885b      	ldrh	r3, [r3, #2]
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7f3 ff92 	bl	8003eec <lwip_htons>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffd8:	4b64      	ldr	r3, [pc, #400]	; (801016c <udp_input+0x21c>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	627b      	str	r3, [r7, #36]	; 0x24
 800ffde:	e054      	b.n	801008a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe2:	8a5b      	ldrh	r3, [r3, #18]
 800ffe4:	89fa      	ldrh	r2, [r7, #14]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d14a      	bne.n	8010080 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ffea:	7cfb      	ldrb	r3, [r7, #19]
 800ffec:	461a      	mov	r2, r3
 800ffee:	6839      	ldr	r1, [r7, #0]
 800fff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fff2:	f7ff ff49 	bl	800fe88 <udp_input_local_match>
 800fff6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d041      	beq.n	8010080 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffe:	7c1b      	ldrb	r3, [r3, #16]
 8010000:	f003 0304 	and.w	r3, r3, #4
 8010004:	2b00      	cmp	r3, #0
 8010006:	d11d      	bne.n	8010044 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d102      	bne.n	8010014 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801000e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010010:	61fb      	str	r3, [r7, #28]
 8010012:	e017      	b.n	8010044 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010014:	7cfb      	ldrb	r3, [r7, #19]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d014      	beq.n	8010044 <udp_input+0xf4>
 801001a:	4b53      	ldr	r3, [pc, #332]	; (8010168 <udp_input+0x218>)
 801001c:	695b      	ldr	r3, [r3, #20]
 801001e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010022:	d10f      	bne.n	8010044 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	3304      	adds	r3, #4
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	429a      	cmp	r2, r3
 8010030:	d008      	beq.n	8010044 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	3304      	adds	r3, #4
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	429a      	cmp	r2, r3
 801003e:	d101      	bne.n	8010044 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010042:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010046:	8a9b      	ldrh	r3, [r3, #20]
 8010048:	8a3a      	ldrh	r2, [r7, #16]
 801004a:	429a      	cmp	r2, r3
 801004c:	d118      	bne.n	8010080 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801004e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010050:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010052:	2b00      	cmp	r3, #0
 8010054:	d005      	beq.n	8010062 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010058:	685a      	ldr	r2, [r3, #4]
 801005a:	4b43      	ldr	r3, [pc, #268]	; (8010168 <udp_input+0x218>)
 801005c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801005e:	429a      	cmp	r2, r3
 8010060:	d10e      	bne.n	8010080 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d014      	beq.n	8010092 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006a:	68da      	ldr	r2, [r3, #12]
 801006c:	6a3b      	ldr	r3, [r7, #32]
 801006e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010070:	4b3e      	ldr	r3, [pc, #248]	; (801016c <udp_input+0x21c>)
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010076:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010078:	4a3c      	ldr	r2, [pc, #240]	; (801016c <udp_input+0x21c>)
 801007a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801007e:	e008      	b.n	8010092 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010082:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	627b      	str	r3, [r7, #36]	; 0x24
 801008a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801008c:	2b00      	cmp	r3, #0
 801008e:	d1a7      	bne.n	800ffe0 <udp_input+0x90>
 8010090:	e000      	b.n	8010094 <udp_input+0x144>
        break;
 8010092:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010096:	2b00      	cmp	r3, #0
 8010098:	d101      	bne.n	801009e <udp_input+0x14e>
    pcb = uncon_pcb;
 801009a:	69fb      	ldr	r3, [r7, #28]
 801009c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801009e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d002      	beq.n	80100aa <udp_input+0x15a>
    for_us = 1;
 80100a4:	2301      	movs	r3, #1
 80100a6:	76fb      	strb	r3, [r7, #27]
 80100a8:	e00a      	b.n	80100c0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	3304      	adds	r3, #4
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	4b2d      	ldr	r3, [pc, #180]	; (8010168 <udp_input+0x218>)
 80100b2:	695b      	ldr	r3, [r3, #20]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	bf0c      	ite	eq
 80100b8:	2301      	moveq	r3, #1
 80100ba:	2300      	movne	r3, #0
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80100c0:	7efb      	ldrb	r3, [r7, #27]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d041      	beq.n	801014a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80100c6:	2108      	movs	r1, #8
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f7f9 f9cb 	bl	8009464 <pbuf_remove_header>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d00a      	beq.n	80100ea <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80100d4:	4b20      	ldr	r3, [pc, #128]	; (8010158 <udp_input+0x208>)
 80100d6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80100da:	4925      	ldr	r1, [pc, #148]	; (8010170 <udp_input+0x220>)
 80100dc:	4820      	ldr	r0, [pc, #128]	; (8010160 <udp_input+0x210>)
 80100de:	f000 fc8d 	bl	80109fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f7f9 fa44 	bl	8009570 <pbuf_free>
      goto end;
 80100e8:	e032      	b.n	8010150 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80100ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d012      	beq.n	8010116 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80100f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f2:	699b      	ldr	r3, [r3, #24]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d00a      	beq.n	801010e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80100f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fa:	699c      	ldr	r4, [r3, #24]
 80100fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fe:	69d8      	ldr	r0, [r3, #28]
 8010100:	8a3b      	ldrh	r3, [r7, #16]
 8010102:	9300      	str	r3, [sp, #0]
 8010104:	4b1b      	ldr	r3, [pc, #108]	; (8010174 <udp_input+0x224>)
 8010106:	687a      	ldr	r2, [r7, #4]
 8010108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801010a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801010c:	e021      	b.n	8010152 <udp_input+0x202>
        pbuf_free(p);
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f7f9 fa2e 	bl	8009570 <pbuf_free>
        goto end;
 8010114:	e01c      	b.n	8010150 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010116:	7cfb      	ldrb	r3, [r7, #19]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d112      	bne.n	8010142 <udp_input+0x1f2>
 801011c:	4b12      	ldr	r3, [pc, #72]	; (8010168 <udp_input+0x218>)
 801011e:	695b      	ldr	r3, [r3, #20]
 8010120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010124:	2be0      	cmp	r3, #224	; 0xe0
 8010126:	d00c      	beq.n	8010142 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010128:	4b0f      	ldr	r3, [pc, #60]	; (8010168 <udp_input+0x218>)
 801012a:	899b      	ldrh	r3, [r3, #12]
 801012c:	3308      	adds	r3, #8
 801012e:	b29b      	uxth	r3, r3
 8010130:	b21b      	sxth	r3, r3
 8010132:	4619      	mov	r1, r3
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7f9 fa08 	bl	800954a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801013a:	2103      	movs	r1, #3
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f7f6 fdf9 	bl	8006d34 <icmp_dest_unreach>
      pbuf_free(p);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7f9 fa14 	bl	8009570 <pbuf_free>
  return;
 8010148:	e003      	b.n	8010152 <udp_input+0x202>
    pbuf_free(p);
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f7f9 fa10 	bl	8009570 <pbuf_free>
  return;
 8010150:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010152:	372c      	adds	r7, #44	; 0x2c
 8010154:	46bd      	mov	sp, r7
 8010156:	bd90      	pop	{r4, r7, pc}
 8010158:	08014470 	.word	0x08014470
 801015c:	08014514 	.word	0x08014514
 8010160:	080144c4 	.word	0x080144c4
 8010164:	0801452c 	.word	0x0801452c
 8010168:	20003794 	.word	0x20003794
 801016c:	20006d38 	.word	0x20006d38
 8010170:	08014548 	.word	0x08014548
 8010174:	200037a4 	.word	0x200037a4

08010178 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b088      	sub	sp, #32
 801017c:	af02      	add	r7, sp, #8
 801017e:	60f8      	str	r0, [r7, #12]
 8010180:	60b9      	str	r1, [r7, #8]
 8010182:	607a      	str	r2, [r7, #4]
 8010184:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d109      	bne.n	80101a0 <udp_sendto_if+0x28>
 801018c:	4b2e      	ldr	r3, [pc, #184]	; (8010248 <udp_sendto_if+0xd0>)
 801018e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010192:	492e      	ldr	r1, [pc, #184]	; (801024c <udp_sendto_if+0xd4>)
 8010194:	482e      	ldr	r0, [pc, #184]	; (8010250 <udp_sendto_if+0xd8>)
 8010196:	f000 fc31 	bl	80109fc <iprintf>
 801019a:	f06f 030f 	mvn.w	r3, #15
 801019e:	e04f      	b.n	8010240 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d109      	bne.n	80101ba <udp_sendto_if+0x42>
 80101a6:	4b28      	ldr	r3, [pc, #160]	; (8010248 <udp_sendto_if+0xd0>)
 80101a8:	f240 2281 	movw	r2, #641	; 0x281
 80101ac:	4929      	ldr	r1, [pc, #164]	; (8010254 <udp_sendto_if+0xdc>)
 80101ae:	4828      	ldr	r0, [pc, #160]	; (8010250 <udp_sendto_if+0xd8>)
 80101b0:	f000 fc24 	bl	80109fc <iprintf>
 80101b4:	f06f 030f 	mvn.w	r3, #15
 80101b8:	e042      	b.n	8010240 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d109      	bne.n	80101d4 <udp_sendto_if+0x5c>
 80101c0:	4b21      	ldr	r3, [pc, #132]	; (8010248 <udp_sendto_if+0xd0>)
 80101c2:	f240 2282 	movw	r2, #642	; 0x282
 80101c6:	4924      	ldr	r1, [pc, #144]	; (8010258 <udp_sendto_if+0xe0>)
 80101c8:	4821      	ldr	r0, [pc, #132]	; (8010250 <udp_sendto_if+0xd8>)
 80101ca:	f000 fc17 	bl	80109fc <iprintf>
 80101ce:	f06f 030f 	mvn.w	r3, #15
 80101d2:	e035      	b.n	8010240 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80101d4:	6a3b      	ldr	r3, [r7, #32]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d109      	bne.n	80101ee <udp_sendto_if+0x76>
 80101da:	4b1b      	ldr	r3, [pc, #108]	; (8010248 <udp_sendto_if+0xd0>)
 80101dc:	f240 2283 	movw	r2, #643	; 0x283
 80101e0:	491e      	ldr	r1, [pc, #120]	; (801025c <udp_sendto_if+0xe4>)
 80101e2:	481b      	ldr	r0, [pc, #108]	; (8010250 <udp_sendto_if+0xd8>)
 80101e4:	f000 fc0a 	bl	80109fc <iprintf>
 80101e8:	f06f 030f 	mvn.w	r3, #15
 80101ec:	e028      	b.n	8010240 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d009      	beq.n	8010208 <udp_sendto_if+0x90>
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d005      	beq.n	8010208 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010204:	2be0      	cmp	r3, #224	; 0xe0
 8010206:	d103      	bne.n	8010210 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010208:	6a3b      	ldr	r3, [r7, #32]
 801020a:	3304      	adds	r3, #4
 801020c:	617b      	str	r3, [r7, #20]
 801020e:	e00b      	b.n	8010228 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681a      	ldr	r2, [r3, #0]
 8010214:	6a3b      	ldr	r3, [r7, #32]
 8010216:	3304      	adds	r3, #4
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	429a      	cmp	r2, r3
 801021c:	d002      	beq.n	8010224 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801021e:	f06f 0303 	mvn.w	r3, #3
 8010222:	e00d      	b.n	8010240 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010228:	887a      	ldrh	r2, [r7, #2]
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	9301      	str	r3, [sp, #4]
 801022e:	6a3b      	ldr	r3, [r7, #32]
 8010230:	9300      	str	r3, [sp, #0]
 8010232:	4613      	mov	r3, r2
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	68b9      	ldr	r1, [r7, #8]
 8010238:	68f8      	ldr	r0, [r7, #12]
 801023a:	f000 f811 	bl	8010260 <udp_sendto_if_src>
 801023e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010240:	4618      	mov	r0, r3
 8010242:	3718      	adds	r7, #24
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	08014470 	.word	0x08014470
 801024c:	080145e4 	.word	0x080145e4
 8010250:	080144c4 	.word	0x080144c4
 8010254:	08014600 	.word	0x08014600
 8010258:	0801461c 	.word	0x0801461c
 801025c:	0801463c 	.word	0x0801463c

08010260 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b08c      	sub	sp, #48	; 0x30
 8010264:	af04      	add	r7, sp, #16
 8010266:	60f8      	str	r0, [r7, #12]
 8010268:	60b9      	str	r1, [r7, #8]
 801026a:	607a      	str	r2, [r7, #4]
 801026c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d109      	bne.n	8010288 <udp_sendto_if_src+0x28>
 8010274:	4b66      	ldr	r3, [pc, #408]	; (8010410 <udp_sendto_if_src+0x1b0>)
 8010276:	f240 22d1 	movw	r2, #721	; 0x2d1
 801027a:	4966      	ldr	r1, [pc, #408]	; (8010414 <udp_sendto_if_src+0x1b4>)
 801027c:	4866      	ldr	r0, [pc, #408]	; (8010418 <udp_sendto_if_src+0x1b8>)
 801027e:	f000 fbbd 	bl	80109fc <iprintf>
 8010282:	f06f 030f 	mvn.w	r3, #15
 8010286:	e0be      	b.n	8010406 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d109      	bne.n	80102a2 <udp_sendto_if_src+0x42>
 801028e:	4b60      	ldr	r3, [pc, #384]	; (8010410 <udp_sendto_if_src+0x1b0>)
 8010290:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010294:	4961      	ldr	r1, [pc, #388]	; (801041c <udp_sendto_if_src+0x1bc>)
 8010296:	4860      	ldr	r0, [pc, #384]	; (8010418 <udp_sendto_if_src+0x1b8>)
 8010298:	f000 fbb0 	bl	80109fc <iprintf>
 801029c:	f06f 030f 	mvn.w	r3, #15
 80102a0:	e0b1      	b.n	8010406 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d109      	bne.n	80102bc <udp_sendto_if_src+0x5c>
 80102a8:	4b59      	ldr	r3, [pc, #356]	; (8010410 <udp_sendto_if_src+0x1b0>)
 80102aa:	f240 22d3 	movw	r2, #723	; 0x2d3
 80102ae:	495c      	ldr	r1, [pc, #368]	; (8010420 <udp_sendto_if_src+0x1c0>)
 80102b0:	4859      	ldr	r0, [pc, #356]	; (8010418 <udp_sendto_if_src+0x1b8>)
 80102b2:	f000 fba3 	bl	80109fc <iprintf>
 80102b6:	f06f 030f 	mvn.w	r3, #15
 80102ba:	e0a4      	b.n	8010406 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80102bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d109      	bne.n	80102d6 <udp_sendto_if_src+0x76>
 80102c2:	4b53      	ldr	r3, [pc, #332]	; (8010410 <udp_sendto_if_src+0x1b0>)
 80102c4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80102c8:	4956      	ldr	r1, [pc, #344]	; (8010424 <udp_sendto_if_src+0x1c4>)
 80102ca:	4853      	ldr	r0, [pc, #332]	; (8010418 <udp_sendto_if_src+0x1b8>)
 80102cc:	f000 fb96 	bl	80109fc <iprintf>
 80102d0:	f06f 030f 	mvn.w	r3, #15
 80102d4:	e097      	b.n	8010406 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80102d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d109      	bne.n	80102f0 <udp_sendto_if_src+0x90>
 80102dc:	4b4c      	ldr	r3, [pc, #304]	; (8010410 <udp_sendto_if_src+0x1b0>)
 80102de:	f240 22d5 	movw	r2, #725	; 0x2d5
 80102e2:	4951      	ldr	r1, [pc, #324]	; (8010428 <udp_sendto_if_src+0x1c8>)
 80102e4:	484c      	ldr	r0, [pc, #304]	; (8010418 <udp_sendto_if_src+0x1b8>)
 80102e6:	f000 fb89 	bl	80109fc <iprintf>
 80102ea:	f06f 030f 	mvn.w	r3, #15
 80102ee:	e08a      	b.n	8010406 <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	8a5b      	ldrh	r3, [r3, #18]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d10f      	bne.n	8010318 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80102f8:	68f9      	ldr	r1, [r7, #12]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	8a5b      	ldrh	r3, [r3, #18]
 80102fe:	461a      	mov	r2, r3
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	f000 f895 	bl	8010430 <udp_bind>
 8010306:	4603      	mov	r3, r0
 8010308:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801030a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d002      	beq.n	8010318 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010312:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010316:	e076      	b.n	8010406 <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	891b      	ldrh	r3, [r3, #8]
 801031c:	3308      	adds	r3, #8
 801031e:	b29a      	uxth	r2, r3
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	891b      	ldrh	r3, [r3, #8]
 8010324:	429a      	cmp	r2, r3
 8010326:	d202      	bcs.n	801032e <udp_sendto_if_src+0xce>
    return ERR_MEM;
 8010328:	f04f 33ff 	mov.w	r3, #4294967295
 801032c:	e06b      	b.n	8010406 <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801032e:	2108      	movs	r1, #8
 8010330:	68b8      	ldr	r0, [r7, #8]
 8010332:	f7f9 f887 	bl	8009444 <pbuf_add_header>
 8010336:	4603      	mov	r3, r0
 8010338:	2b00      	cmp	r3, #0
 801033a:	d015      	beq.n	8010368 <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801033c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010340:	2108      	movs	r1, #8
 8010342:	2022      	movs	r0, #34	; 0x22
 8010344:	f7f8 fe32 	bl	8008fac <pbuf_alloc>
 8010348:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801034a:	69fb      	ldr	r3, [r7, #28]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d102      	bne.n	8010356 <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010350:	f04f 33ff 	mov.w	r3, #4294967295
 8010354:	e057      	b.n	8010406 <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	891b      	ldrh	r3, [r3, #8]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d006      	beq.n	801036c <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801035e:	68b9      	ldr	r1, [r7, #8]
 8010360:	69f8      	ldr	r0, [r7, #28]
 8010362:	f7f9 fa1d 	bl	80097a0 <pbuf_chain>
 8010366:	e001      	b.n	801036c <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	895b      	ldrh	r3, [r3, #10]
 8010370:	2b07      	cmp	r3, #7
 8010372:	d806      	bhi.n	8010382 <udp_sendto_if_src+0x122>
 8010374:	4b26      	ldr	r3, [pc, #152]	; (8010410 <udp_sendto_if_src+0x1b0>)
 8010376:	f240 320e 	movw	r2, #782	; 0x30e
 801037a:	492c      	ldr	r1, [pc, #176]	; (801042c <udp_sendto_if_src+0x1cc>)
 801037c:	4826      	ldr	r0, [pc, #152]	; (8010418 <udp_sendto_if_src+0x1b8>)
 801037e:	f000 fb3d 	bl	80109fc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	8a5b      	ldrh	r3, [r3, #18]
 801038c:	4618      	mov	r0, r3
 801038e:	f7f3 fdad 	bl	8003eec <lwip_htons>
 8010392:	4603      	mov	r3, r0
 8010394:	461a      	mov	r2, r3
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801039a:	887b      	ldrh	r3, [r7, #2]
 801039c:	4618      	mov	r0, r3
 801039e:	f7f3 fda5 	bl	8003eec <lwip_htons>
 80103a2:	4603      	mov	r3, r0
 80103a4:	461a      	mov	r2, r3
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	2200      	movs	r2, #0
 80103ae:	719a      	strb	r2, [r3, #6]
 80103b0:	2200      	movs	r2, #0
 80103b2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	891b      	ldrh	r3, [r3, #8]
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7f3 fd97 	bl	8003eec <lwip_htons>
 80103be:	4603      	mov	r3, r0
 80103c0:	461a      	mov	r2, r3
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80103c6:	2311      	movs	r3, #17
 80103c8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	7adb      	ldrb	r3, [r3, #11]
 80103ce:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	7a9b      	ldrb	r3, [r3, #10]
 80103d4:	7cb9      	ldrb	r1, [r7, #18]
 80103d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103d8:	9202      	str	r2, [sp, #8]
 80103da:	7cfa      	ldrb	r2, [r7, #19]
 80103dc:	9201      	str	r2, [sp, #4]
 80103de:	9300      	str	r3, [sp, #0]
 80103e0:	460b      	mov	r3, r1
 80103e2:	687a      	ldr	r2, [r7, #4]
 80103e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80103e6:	69f8      	ldr	r0, [r7, #28]
 80103e8:	f7f6 ff2c 	bl	8007244 <ip4_output_if_src>
 80103ec:	4603      	mov	r3, r0
 80103ee:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80103f0:	69fa      	ldr	r2, [r7, #28]
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d004      	beq.n	8010402 <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 80103f8:	69f8      	ldr	r0, [r7, #28]
 80103fa:	f7f9 f8b9 	bl	8009570 <pbuf_free>
    q = NULL;
 80103fe:	2300      	movs	r3, #0
 8010400:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010402:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010406:	4618      	mov	r0, r3
 8010408:	3720      	adds	r7, #32
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	08014470 	.word	0x08014470
 8010414:	0801465c 	.word	0x0801465c
 8010418:	080144c4 	.word	0x080144c4
 801041c:	0801467c 	.word	0x0801467c
 8010420:	0801469c 	.word	0x0801469c
 8010424:	080146c0 	.word	0x080146c0
 8010428:	080146e4 	.word	0x080146e4
 801042c:	08014708 	.word	0x08014708

08010430 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b086      	sub	sp, #24
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	4613      	mov	r3, r2
 801043c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d101      	bne.n	8010448 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010444:	4b39      	ldr	r3, [pc, #228]	; (801052c <udp_bind+0xfc>)
 8010446:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d109      	bne.n	8010462 <udp_bind+0x32>
 801044e:	4b38      	ldr	r3, [pc, #224]	; (8010530 <udp_bind+0x100>)
 8010450:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010454:	4937      	ldr	r1, [pc, #220]	; (8010534 <udp_bind+0x104>)
 8010456:	4838      	ldr	r0, [pc, #224]	; (8010538 <udp_bind+0x108>)
 8010458:	f000 fad0 	bl	80109fc <iprintf>
 801045c:	f06f 030f 	mvn.w	r3, #15
 8010460:	e060      	b.n	8010524 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010462:	2300      	movs	r3, #0
 8010464:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010466:	4b35      	ldr	r3, [pc, #212]	; (801053c <udp_bind+0x10c>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	617b      	str	r3, [r7, #20]
 801046c:	e009      	b.n	8010482 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	429a      	cmp	r2, r3
 8010474:	d102      	bne.n	801047c <udp_bind+0x4c>
      rebind = 1;
 8010476:	2301      	movs	r3, #1
 8010478:	74fb      	strb	r3, [r7, #19]
      break;
 801047a:	e005      	b.n	8010488 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	68db      	ldr	r3, [r3, #12]
 8010480:	617b      	str	r3, [r7, #20]
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d1f2      	bne.n	801046e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010488:	88fb      	ldrh	r3, [r7, #6]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d109      	bne.n	80104a2 <udp_bind+0x72>
    port = udp_new_port();
 801048e:	f7ff fcc3 	bl	800fe18 <udp_new_port>
 8010492:	4603      	mov	r3, r0
 8010494:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010496:	88fb      	ldrh	r3, [r7, #6]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d12c      	bne.n	80104f6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801049c:	f06f 0307 	mvn.w	r3, #7
 80104a0:	e040      	b.n	8010524 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80104a2:	4b26      	ldr	r3, [pc, #152]	; (801053c <udp_bind+0x10c>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	617b      	str	r3, [r7, #20]
 80104a8:	e022      	b.n	80104f0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80104aa:	68fa      	ldr	r2, [r7, #12]
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d01b      	beq.n	80104ea <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	8a5b      	ldrh	r3, [r3, #18]
 80104b6:	88fa      	ldrh	r2, [r7, #6]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d116      	bne.n	80104ea <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d00d      	beq.n	80104e4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00a      	beq.n	80104e4 <udp_bind+0xb4>
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d006      	beq.n	80104e4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80104d6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d003      	beq.n	80104e4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d102      	bne.n	80104ea <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80104e4:	f06f 0307 	mvn.w	r3, #7
 80104e8:	e01c      	b.n	8010524 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	68db      	ldr	r3, [r3, #12]
 80104ee:	617b      	str	r3, [r7, #20]
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d1d9      	bne.n	80104aa <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d002      	beq.n	8010502 <udp_bind+0xd2>
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	e000      	b.n	8010504 <udp_bind+0xd4>
 8010502:	2300      	movs	r3, #0
 8010504:	68fa      	ldr	r2, [r7, #12]
 8010506:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	88fa      	ldrh	r2, [r7, #6]
 801050c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801050e:	7cfb      	ldrb	r3, [r7, #19]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d106      	bne.n	8010522 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010514:	4b09      	ldr	r3, [pc, #36]	; (801053c <udp_bind+0x10c>)
 8010516:	681a      	ldr	r2, [r3, #0]
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801051c:	4a07      	ldr	r2, [pc, #28]	; (801053c <udp_bind+0x10c>)
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010522:	2300      	movs	r3, #0
}
 8010524:	4618      	mov	r0, r3
 8010526:	3718      	adds	r7, #24
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	08014aac 	.word	0x08014aac
 8010530:	08014470 	.word	0x08014470
 8010534:	08014738 	.word	0x08014738
 8010538:	080144c4 	.word	0x080144c4
 801053c:	20006d38 	.word	0x20006d38

08010540 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b086      	sub	sp, #24
 8010544:	af00      	add	r7, sp, #0
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	60b9      	str	r1, [r7, #8]
 801054a:	4613      	mov	r3, r2
 801054c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d109      	bne.n	8010568 <udp_connect+0x28>
 8010554:	4b2c      	ldr	r3, [pc, #176]	; (8010608 <udp_connect+0xc8>)
 8010556:	f240 4235 	movw	r2, #1077	; 0x435
 801055a:	492c      	ldr	r1, [pc, #176]	; (801060c <udp_connect+0xcc>)
 801055c:	482c      	ldr	r0, [pc, #176]	; (8010610 <udp_connect+0xd0>)
 801055e:	f000 fa4d 	bl	80109fc <iprintf>
 8010562:	f06f 030f 	mvn.w	r3, #15
 8010566:	e04b      	b.n	8010600 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d109      	bne.n	8010582 <udp_connect+0x42>
 801056e:	4b26      	ldr	r3, [pc, #152]	; (8010608 <udp_connect+0xc8>)
 8010570:	f240 4236 	movw	r2, #1078	; 0x436
 8010574:	4927      	ldr	r1, [pc, #156]	; (8010614 <udp_connect+0xd4>)
 8010576:	4826      	ldr	r0, [pc, #152]	; (8010610 <udp_connect+0xd0>)
 8010578:	f000 fa40 	bl	80109fc <iprintf>
 801057c:	f06f 030f 	mvn.w	r3, #15
 8010580:	e03e      	b.n	8010600 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	8a5b      	ldrh	r3, [r3, #18]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d10f      	bne.n	80105aa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801058a:	68f9      	ldr	r1, [r7, #12]
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	8a5b      	ldrh	r3, [r3, #18]
 8010590:	461a      	mov	r2, r3
 8010592:	68f8      	ldr	r0, [r7, #12]
 8010594:	f7ff ff4c 	bl	8010430 <udp_bind>
 8010598:	4603      	mov	r3, r0
 801059a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801059c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d002      	beq.n	80105aa <udp_connect+0x6a>
      return err;
 80105a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105a8:	e02a      	b.n	8010600 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d002      	beq.n	80105b6 <udp_connect+0x76>
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	e000      	b.n	80105b8 <udp_connect+0x78>
 80105b6:	2300      	movs	r3, #0
 80105b8:	68fa      	ldr	r2, [r7, #12]
 80105ba:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	88fa      	ldrh	r2, [r7, #6]
 80105c0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	7c1b      	ldrb	r3, [r3, #16]
 80105c6:	f043 0304 	orr.w	r3, r3, #4
 80105ca:	b2da      	uxtb	r2, r3
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80105d0:	4b11      	ldr	r3, [pc, #68]	; (8010618 <udp_connect+0xd8>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	617b      	str	r3, [r7, #20]
 80105d6:	e008      	b.n	80105ea <udp_connect+0xaa>
    if (pcb == ipcb) {
 80105d8:	68fa      	ldr	r2, [r7, #12]
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	429a      	cmp	r2, r3
 80105de:	d101      	bne.n	80105e4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80105e0:	2300      	movs	r3, #0
 80105e2:	e00d      	b.n	8010600 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	617b      	str	r3, [r7, #20]
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d1f3      	bne.n	80105d8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80105f0:	4b09      	ldr	r3, [pc, #36]	; (8010618 <udp_connect+0xd8>)
 80105f2:	681a      	ldr	r2, [r3, #0]
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80105f8:	4a07      	ldr	r2, [pc, #28]	; (8010618 <udp_connect+0xd8>)
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80105fe:	2300      	movs	r3, #0
}
 8010600:	4618      	mov	r0, r3
 8010602:	3718      	adds	r7, #24
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}
 8010608:	08014470 	.word	0x08014470
 801060c:	08014750 	.word	0x08014750
 8010610:	080144c4 	.word	0x080144c4
 8010614:	0801476c 	.word	0x0801476c
 8010618:	20006d38 	.word	0x20006d38

0801061c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d107      	bne.n	801063e <udp_recv+0x22>
 801062e:	4b08      	ldr	r3, [pc, #32]	; (8010650 <udp_recv+0x34>)
 8010630:	f240 428a 	movw	r2, #1162	; 0x48a
 8010634:	4907      	ldr	r1, [pc, #28]	; (8010654 <udp_recv+0x38>)
 8010636:	4808      	ldr	r0, [pc, #32]	; (8010658 <udp_recv+0x3c>)
 8010638:	f000 f9e0 	bl	80109fc <iprintf>
 801063c:	e005      	b.n	801064a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	68ba      	ldr	r2, [r7, #8]
 8010642:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	687a      	ldr	r2, [r7, #4]
 8010648:	61da      	str	r2, [r3, #28]
}
 801064a:	3710      	adds	r7, #16
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	08014470 	.word	0x08014470
 8010654:	080147a4 	.word	0x080147a4
 8010658:	080144c4 	.word	0x080144c4

0801065c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b084      	sub	sp, #16
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d107      	bne.n	801067a <udp_remove+0x1e>
 801066a:	4b19      	ldr	r3, [pc, #100]	; (80106d0 <udp_remove+0x74>)
 801066c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8010670:	4918      	ldr	r1, [pc, #96]	; (80106d4 <udp_remove+0x78>)
 8010672:	4819      	ldr	r0, [pc, #100]	; (80106d8 <udp_remove+0x7c>)
 8010674:	f000 f9c2 	bl	80109fc <iprintf>
 8010678:	e026      	b.n	80106c8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801067a:	4b18      	ldr	r3, [pc, #96]	; (80106dc <udp_remove+0x80>)
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	429a      	cmp	r2, r3
 8010682:	d105      	bne.n	8010690 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010684:	4b15      	ldr	r3, [pc, #84]	; (80106dc <udp_remove+0x80>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	4a14      	ldr	r2, [pc, #80]	; (80106dc <udp_remove+0x80>)
 801068c:	6013      	str	r3, [r2, #0]
 801068e:	e017      	b.n	80106c0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010690:	4b12      	ldr	r3, [pc, #72]	; (80106dc <udp_remove+0x80>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	60fb      	str	r3, [r7, #12]
 8010696:	e010      	b.n	80106ba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d009      	beq.n	80106b4 <udp_remove+0x58>
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	68da      	ldr	r2, [r3, #12]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d104      	bne.n	80106b4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	68da      	ldr	r2, [r3, #12]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	60da      	str	r2, [r3, #12]
        break;
 80106b2:	e005      	b.n	80106c0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	68db      	ldr	r3, [r3, #12]
 80106b8:	60fb      	str	r3, [r7, #12]
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d1eb      	bne.n	8010698 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80106c0:	6879      	ldr	r1, [r7, #4]
 80106c2:	2000      	movs	r0, #0
 80106c4:	f7f8 f93c 	bl	8008940 <memp_free>
}
 80106c8:	3710      	adds	r7, #16
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	bf00      	nop
 80106d0:	08014470 	.word	0x08014470
 80106d4:	080147bc 	.word	0x080147bc
 80106d8:	080144c4 	.word	0x080144c4
 80106dc:	20006d38 	.word	0x20006d38

080106e0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80106e6:	2000      	movs	r0, #0
 80106e8:	f7f8 f8de 	bl	80088a8 <memp_malloc>
 80106ec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d007      	beq.n	8010704 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80106f4:	2220      	movs	r2, #32
 80106f6:	2100      	movs	r1, #0
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f000 f977 	bl	80109ec <memset>
    pcb->ttl = UDP_TTL;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	22ff      	movs	r2, #255	; 0xff
 8010702:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010704:	687b      	ldr	r3, [r7, #4]
}
 8010706:	4618      	mov	r0, r3
 8010708:	3708      	adds	r7, #8
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
	...

08010710 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010710:	b480      	push	{r7}
 8010712:	b085      	sub	sp, #20
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d01e      	beq.n	801075e <udp_netif_ip_addr_changed+0x4e>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d01a      	beq.n	801075e <udp_netif_ip_addr_changed+0x4e>
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d017      	beq.n	801075e <udp_netif_ip_addr_changed+0x4e>
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d013      	beq.n	801075e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010736:	4b0d      	ldr	r3, [pc, #52]	; (801076c <udp_netif_ip_addr_changed+0x5c>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	60fb      	str	r3, [r7, #12]
 801073c:	e00c      	b.n	8010758 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	681a      	ldr	r2, [r3, #0]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	429a      	cmp	r2, r3
 8010748:	d103      	bne.n	8010752 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	681a      	ldr	r2, [r3, #0]
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	68db      	ldr	r3, [r3, #12]
 8010756:	60fb      	str	r3, [r7, #12]
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d1ef      	bne.n	801073e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801075e:	bf00      	nop
 8010760:	3714      	adds	r7, #20
 8010762:	46bd      	mov	sp, r7
 8010764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	20006d38 	.word	0x20006d38

08010770 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b086      	sub	sp, #24
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801077a:	230e      	movs	r3, #14
 801077c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	895b      	ldrh	r3, [r3, #10]
 8010782:	2b0e      	cmp	r3, #14
 8010784:	d96e      	bls.n	8010864 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	7bdb      	ldrb	r3, [r3, #15]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d106      	bne.n	801079c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010794:	3301      	adds	r3, #1
 8010796:	b2da      	uxtb	r2, r3
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	685b      	ldr	r3, [r3, #4]
 80107a0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	7b1a      	ldrb	r2, [r3, #12]
 80107a6:	7b5b      	ldrb	r3, [r3, #13]
 80107a8:	021b      	lsls	r3, r3, #8
 80107aa:	4313      	orrs	r3, r2
 80107ac:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	f003 0301 	and.w	r3, r3, #1
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d023      	beq.n	8010802 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	781b      	ldrb	r3, [r3, #0]
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d10f      	bne.n	80107e2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	785b      	ldrb	r3, [r3, #1]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d11b      	bne.n	8010802 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80107ce:	2b5e      	cmp	r3, #94	; 0x5e
 80107d0:	d117      	bne.n	8010802 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	7b5b      	ldrb	r3, [r3, #13]
 80107d6:	f043 0310 	orr.w	r3, r3, #16
 80107da:	b2da      	uxtb	r2, r3
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	735a      	strb	r2, [r3, #13]
 80107e0:	e00f      	b.n	8010802 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	2206      	movs	r2, #6
 80107e6:	4928      	ldr	r1, [pc, #160]	; (8010888 <ethernet_input+0x118>)
 80107e8:	4618      	mov	r0, r3
 80107ea:	f000 f8e5 	bl	80109b8 <memcmp>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d106      	bne.n	8010802 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	7b5b      	ldrb	r3, [r3, #13]
 80107f8:	f043 0308 	orr.w	r3, r3, #8
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010802:	89fb      	ldrh	r3, [r7, #14]
 8010804:	2b08      	cmp	r3, #8
 8010806:	d003      	beq.n	8010810 <ethernet_input+0xa0>
 8010808:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801080c:	d014      	beq.n	8010838 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801080e:	e032      	b.n	8010876 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010816:	f003 0308 	and.w	r3, r3, #8
 801081a:	2b00      	cmp	r3, #0
 801081c:	d024      	beq.n	8010868 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801081e:	8afb      	ldrh	r3, [r7, #22]
 8010820:	4619      	mov	r1, r3
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7f8 fe1e 	bl	8009464 <pbuf_remove_header>
 8010828:	4603      	mov	r3, r0
 801082a:	2b00      	cmp	r3, #0
 801082c:	d11e      	bne.n	801086c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801082e:	6839      	ldr	r1, [r7, #0]
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f7f6 fb9f 	bl	8006f74 <ip4_input>
      break;
 8010836:	e013      	b.n	8010860 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801083e:	f003 0308 	and.w	r3, r3, #8
 8010842:	2b00      	cmp	r3, #0
 8010844:	d014      	beq.n	8010870 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010846:	8afb      	ldrh	r3, [r7, #22]
 8010848:	4619      	mov	r1, r3
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7f8 fe0a 	bl	8009464 <pbuf_remove_header>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d10e      	bne.n	8010874 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010856:	6839      	ldr	r1, [r7, #0]
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7f5 fd3f 	bl	80062dc <etharp_input>
      break;
 801085e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010860:	2300      	movs	r3, #0
 8010862:	e00c      	b.n	801087e <ethernet_input+0x10e>
    goto free_and_return;
 8010864:	bf00      	nop
 8010866:	e006      	b.n	8010876 <ethernet_input+0x106>
        goto free_and_return;
 8010868:	bf00      	nop
 801086a:	e004      	b.n	8010876 <ethernet_input+0x106>
        goto free_and_return;
 801086c:	bf00      	nop
 801086e:	e002      	b.n	8010876 <ethernet_input+0x106>
        goto free_and_return;
 8010870:	bf00      	nop
 8010872:	e000      	b.n	8010876 <ethernet_input+0x106>
        goto free_and_return;
 8010874:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f7f8 fe7a 	bl	8009570 <pbuf_free>
  return ERR_OK;
 801087c:	2300      	movs	r3, #0
}
 801087e:	4618      	mov	r0, r3
 8010880:	3718      	adds	r7, #24
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
 8010886:	bf00      	nop
 8010888:	08014b94 	.word	0x08014b94

0801088c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801088c:	b580      	push	{r7, lr}
 801088e:	b086      	sub	sp, #24
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	60b9      	str	r1, [r7, #8]
 8010896:	607a      	str	r2, [r7, #4]
 8010898:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801089a:	8c3b      	ldrh	r3, [r7, #32]
 801089c:	4618      	mov	r0, r3
 801089e:	f7f3 fb25 	bl	8003eec <lwip_htons>
 80108a2:	4603      	mov	r3, r0
 80108a4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80108a6:	210e      	movs	r1, #14
 80108a8:	68b8      	ldr	r0, [r7, #8]
 80108aa:	f7f8 fdcb 	bl	8009444 <pbuf_add_header>
 80108ae:	4603      	mov	r3, r0
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d125      	bne.n	8010900 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	8afa      	ldrh	r2, [r7, #22]
 80108be:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80108c0:	693b      	ldr	r3, [r7, #16]
 80108c2:	2206      	movs	r2, #6
 80108c4:	6839      	ldr	r1, [r7, #0]
 80108c6:	4618      	mov	r0, r3
 80108c8:	f000 f885 	bl	80109d6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	3306      	adds	r3, #6
 80108d0:	2206      	movs	r2, #6
 80108d2:	6879      	ldr	r1, [r7, #4]
 80108d4:	4618      	mov	r0, r3
 80108d6:	f000 f87e 	bl	80109d6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80108e0:	2b06      	cmp	r3, #6
 80108e2:	d006      	beq.n	80108f2 <ethernet_output+0x66>
 80108e4:	4b0a      	ldr	r3, [pc, #40]	; (8010910 <ethernet_output+0x84>)
 80108e6:	f240 1233 	movw	r2, #307	; 0x133
 80108ea:	490a      	ldr	r1, [pc, #40]	; (8010914 <ethernet_output+0x88>)
 80108ec:	480a      	ldr	r0, [pc, #40]	; (8010918 <ethernet_output+0x8c>)
 80108ee:	f000 f885 	bl	80109fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	699b      	ldr	r3, [r3, #24]
 80108f6:	68b9      	ldr	r1, [r7, #8]
 80108f8:	68f8      	ldr	r0, [r7, #12]
 80108fa:	4798      	blx	r3
 80108fc:	4603      	mov	r3, r0
 80108fe:	e002      	b.n	8010906 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010900:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010902:	f06f 0301 	mvn.w	r3, #1
}
 8010906:	4618      	mov	r0, r3
 8010908:	3718      	adds	r7, #24
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	080147d4 	.word	0x080147d4
 8010914:	0801480c 	.word	0x0801480c
 8010918:	08014840 	.word	0x08014840

0801091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010920:	480d      	ldr	r0, [pc, #52]	; (8010958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8010922:	490e      	ldr	r1, [pc, #56]	; (801095c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8010924:	4a0e      	ldr	r2, [pc, #56]	; (8010960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8010926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010928:	e002      	b.n	8010930 <LoopCopyDataInit>

0801092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801092e:	3304      	adds	r3, #4

08010930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010934:	d3f9      	bcc.n	801092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010936:	4a0b      	ldr	r2, [pc, #44]	; (8010964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010938:	4c0b      	ldr	r4, [pc, #44]	; (8010968 <LoopFillZerobss+0x26>)
  movs r3, #0
 801093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801093c:	e001      	b.n	8010942 <LoopFillZerobss>

0801093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010940:	3204      	adds	r2, #4

08010942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010944:	d3fb      	bcc.n	801093e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010946:	f7f0 f819 	bl	800097c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801094a:	f000 f811 	bl	8010970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801094e:	f7ef feab 	bl	80006a8 <main>
  bx  lr    
 8010952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010954:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8010958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801095c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8010960:	08014c4c 	.word	0x08014c4c
  ldr r2, =_sbss
 8010964:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8010968:	20006d40 	.word	0x20006d40

0801096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801096c:	e7fe      	b.n	801096c <ADC_IRQHandler>
	...

08010970 <__libc_init_array>:
 8010970:	b570      	push	{r4, r5, r6, lr}
 8010972:	4e0d      	ldr	r6, [pc, #52]	; (80109a8 <__libc_init_array+0x38>)
 8010974:	4c0d      	ldr	r4, [pc, #52]	; (80109ac <__libc_init_array+0x3c>)
 8010976:	1ba4      	subs	r4, r4, r6
 8010978:	10a4      	asrs	r4, r4, #2
 801097a:	2500      	movs	r5, #0
 801097c:	42a5      	cmp	r5, r4
 801097e:	d109      	bne.n	8010994 <__libc_init_array+0x24>
 8010980:	4e0b      	ldr	r6, [pc, #44]	; (80109b0 <__libc_init_array+0x40>)
 8010982:	4c0c      	ldr	r4, [pc, #48]	; (80109b4 <__libc_init_array+0x44>)
 8010984:	f000 ff94 	bl	80118b0 <_init>
 8010988:	1ba4      	subs	r4, r4, r6
 801098a:	10a4      	asrs	r4, r4, #2
 801098c:	2500      	movs	r5, #0
 801098e:	42a5      	cmp	r5, r4
 8010990:	d105      	bne.n	801099e <__libc_init_array+0x2e>
 8010992:	bd70      	pop	{r4, r5, r6, pc}
 8010994:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010998:	4798      	blx	r3
 801099a:	3501      	adds	r5, #1
 801099c:	e7ee      	b.n	801097c <__libc_init_array+0xc>
 801099e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80109a2:	4798      	blx	r3
 80109a4:	3501      	adds	r5, #1
 80109a6:	e7f2      	b.n	801098e <__libc_init_array+0x1e>
 80109a8:	08014c44 	.word	0x08014c44
 80109ac:	08014c44 	.word	0x08014c44
 80109b0:	08014c44 	.word	0x08014c44
 80109b4:	08014c48 	.word	0x08014c48

080109b8 <memcmp>:
 80109b8:	b510      	push	{r4, lr}
 80109ba:	3901      	subs	r1, #1
 80109bc:	4402      	add	r2, r0
 80109be:	4290      	cmp	r0, r2
 80109c0:	d101      	bne.n	80109c6 <memcmp+0xe>
 80109c2:	2000      	movs	r0, #0
 80109c4:	bd10      	pop	{r4, pc}
 80109c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80109ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80109ce:	42a3      	cmp	r3, r4
 80109d0:	d0f5      	beq.n	80109be <memcmp+0x6>
 80109d2:	1b18      	subs	r0, r3, r4
 80109d4:	bd10      	pop	{r4, pc}

080109d6 <memcpy>:
 80109d6:	b510      	push	{r4, lr}
 80109d8:	1e43      	subs	r3, r0, #1
 80109da:	440a      	add	r2, r1
 80109dc:	4291      	cmp	r1, r2
 80109de:	d100      	bne.n	80109e2 <memcpy+0xc>
 80109e0:	bd10      	pop	{r4, pc}
 80109e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109ea:	e7f7      	b.n	80109dc <memcpy+0x6>

080109ec <memset>:
 80109ec:	4402      	add	r2, r0
 80109ee:	4603      	mov	r3, r0
 80109f0:	4293      	cmp	r3, r2
 80109f2:	d100      	bne.n	80109f6 <memset+0xa>
 80109f4:	4770      	bx	lr
 80109f6:	f803 1b01 	strb.w	r1, [r3], #1
 80109fa:	e7f9      	b.n	80109f0 <memset+0x4>

080109fc <iprintf>:
 80109fc:	b40f      	push	{r0, r1, r2, r3}
 80109fe:	4b0a      	ldr	r3, [pc, #40]	; (8010a28 <iprintf+0x2c>)
 8010a00:	b513      	push	{r0, r1, r4, lr}
 8010a02:	681c      	ldr	r4, [r3, #0]
 8010a04:	b124      	cbz	r4, 8010a10 <iprintf+0x14>
 8010a06:	69a3      	ldr	r3, [r4, #24]
 8010a08:	b913      	cbnz	r3, 8010a10 <iprintf+0x14>
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	f000 f8a8 	bl	8010b60 <__sinit>
 8010a10:	ab05      	add	r3, sp, #20
 8010a12:	9a04      	ldr	r2, [sp, #16]
 8010a14:	68a1      	ldr	r1, [r4, #8]
 8010a16:	9301      	str	r3, [sp, #4]
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f000 fa09 	bl	8010e30 <_vfiprintf_r>
 8010a1e:	b002      	add	sp, #8
 8010a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a24:	b004      	add	sp, #16
 8010a26:	4770      	bx	lr
 8010a28:	2000001c 	.word	0x2000001c

08010a2c <rand>:
 8010a2c:	4b19      	ldr	r3, [pc, #100]	; (8010a94 <rand+0x68>)
 8010a2e:	b510      	push	{r4, lr}
 8010a30:	681c      	ldr	r4, [r3, #0]
 8010a32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010a34:	b9d3      	cbnz	r3, 8010a6c <rand+0x40>
 8010a36:	2018      	movs	r0, #24
 8010a38:	f000 f91c 	bl	8010c74 <malloc>
 8010a3c:	f243 330e 	movw	r3, #13070	; 0x330e
 8010a40:	63a0      	str	r0, [r4, #56]	; 0x38
 8010a42:	8003      	strh	r3, [r0, #0]
 8010a44:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8010a48:	8043      	strh	r3, [r0, #2]
 8010a4a:	f241 2334 	movw	r3, #4660	; 0x1234
 8010a4e:	8083      	strh	r3, [r0, #4]
 8010a50:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8010a54:	80c3      	strh	r3, [r0, #6]
 8010a56:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8010a5a:	8103      	strh	r3, [r0, #8]
 8010a5c:	2305      	movs	r3, #5
 8010a5e:	8143      	strh	r3, [r0, #10]
 8010a60:	230b      	movs	r3, #11
 8010a62:	8183      	strh	r3, [r0, #12]
 8010a64:	2201      	movs	r2, #1
 8010a66:	2300      	movs	r3, #0
 8010a68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010a6c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010a6e:	480a      	ldr	r0, [pc, #40]	; (8010a98 <rand+0x6c>)
 8010a70:	690a      	ldr	r2, [r1, #16]
 8010a72:	694b      	ldr	r3, [r1, #20]
 8010a74:	4c09      	ldr	r4, [pc, #36]	; (8010a9c <rand+0x70>)
 8010a76:	4350      	muls	r0, r2
 8010a78:	fb04 0003 	mla	r0, r4, r3, r0
 8010a7c:	fba2 2304 	umull	r2, r3, r2, r4
 8010a80:	3201      	adds	r2, #1
 8010a82:	4403      	add	r3, r0
 8010a84:	f143 0300 	adc.w	r3, r3, #0
 8010a88:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010a8c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8010a90:	bd10      	pop	{r4, pc}
 8010a92:	bf00      	nop
 8010a94:	2000001c 	.word	0x2000001c
 8010a98:	5851f42d 	.word	0x5851f42d
 8010a9c:	4c957f2d 	.word	0x4c957f2d

08010aa0 <strchr>:
 8010aa0:	b2c9      	uxtb	r1, r1
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010aa8:	b11a      	cbz	r2, 8010ab2 <strchr+0x12>
 8010aaa:	4291      	cmp	r1, r2
 8010aac:	d1f9      	bne.n	8010aa2 <strchr+0x2>
 8010aae:	4618      	mov	r0, r3
 8010ab0:	4770      	bx	lr
 8010ab2:	2900      	cmp	r1, #0
 8010ab4:	bf0c      	ite	eq
 8010ab6:	4618      	moveq	r0, r3
 8010ab8:	2000      	movne	r0, #0
 8010aba:	4770      	bx	lr

08010abc <strncmp>:
 8010abc:	b510      	push	{r4, lr}
 8010abe:	b16a      	cbz	r2, 8010adc <strncmp+0x20>
 8010ac0:	3901      	subs	r1, #1
 8010ac2:	1884      	adds	r4, r0, r2
 8010ac4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010ac8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010acc:	4293      	cmp	r3, r2
 8010ace:	d103      	bne.n	8010ad8 <strncmp+0x1c>
 8010ad0:	42a0      	cmp	r0, r4
 8010ad2:	d001      	beq.n	8010ad8 <strncmp+0x1c>
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d1f5      	bne.n	8010ac4 <strncmp+0x8>
 8010ad8:	1a98      	subs	r0, r3, r2
 8010ada:	bd10      	pop	{r4, pc}
 8010adc:	4610      	mov	r0, r2
 8010ade:	bd10      	pop	{r4, pc}

08010ae0 <_cleanup_r>:
 8010ae0:	4901      	ldr	r1, [pc, #4]	; (8010ae8 <_cleanup_r+0x8>)
 8010ae2:	f000 b8a9 	b.w	8010c38 <_fwalk_reent>
 8010ae6:	bf00      	nop
 8010ae8:	08011705 	.word	0x08011705

08010aec <std.isra.0>:
 8010aec:	2300      	movs	r3, #0
 8010aee:	b510      	push	{r4, lr}
 8010af0:	4604      	mov	r4, r0
 8010af2:	6003      	str	r3, [r0, #0]
 8010af4:	6043      	str	r3, [r0, #4]
 8010af6:	6083      	str	r3, [r0, #8]
 8010af8:	8181      	strh	r1, [r0, #12]
 8010afa:	6643      	str	r3, [r0, #100]	; 0x64
 8010afc:	81c2      	strh	r2, [r0, #14]
 8010afe:	6103      	str	r3, [r0, #16]
 8010b00:	6143      	str	r3, [r0, #20]
 8010b02:	6183      	str	r3, [r0, #24]
 8010b04:	4619      	mov	r1, r3
 8010b06:	2208      	movs	r2, #8
 8010b08:	305c      	adds	r0, #92	; 0x5c
 8010b0a:	f7ff ff6f 	bl	80109ec <memset>
 8010b0e:	4b05      	ldr	r3, [pc, #20]	; (8010b24 <std.isra.0+0x38>)
 8010b10:	6263      	str	r3, [r4, #36]	; 0x24
 8010b12:	4b05      	ldr	r3, [pc, #20]	; (8010b28 <std.isra.0+0x3c>)
 8010b14:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b16:	4b05      	ldr	r3, [pc, #20]	; (8010b2c <std.isra.0+0x40>)
 8010b18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b1a:	4b05      	ldr	r3, [pc, #20]	; (8010b30 <std.isra.0+0x44>)
 8010b1c:	6224      	str	r4, [r4, #32]
 8010b1e:	6323      	str	r3, [r4, #48]	; 0x30
 8010b20:	bd10      	pop	{r4, pc}
 8010b22:	bf00      	nop
 8010b24:	080113a9 	.word	0x080113a9
 8010b28:	080113cb 	.word	0x080113cb
 8010b2c:	08011403 	.word	0x08011403
 8010b30:	08011427 	.word	0x08011427

08010b34 <__sfmoreglue>:
 8010b34:	b570      	push	{r4, r5, r6, lr}
 8010b36:	1e4a      	subs	r2, r1, #1
 8010b38:	2568      	movs	r5, #104	; 0x68
 8010b3a:	4355      	muls	r5, r2
 8010b3c:	460e      	mov	r6, r1
 8010b3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010b42:	f000 f8ed 	bl	8010d20 <_malloc_r>
 8010b46:	4604      	mov	r4, r0
 8010b48:	b140      	cbz	r0, 8010b5c <__sfmoreglue+0x28>
 8010b4a:	2100      	movs	r1, #0
 8010b4c:	e880 0042 	stmia.w	r0, {r1, r6}
 8010b50:	300c      	adds	r0, #12
 8010b52:	60a0      	str	r0, [r4, #8]
 8010b54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010b58:	f7ff ff48 	bl	80109ec <memset>
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	bd70      	pop	{r4, r5, r6, pc}

08010b60 <__sinit>:
 8010b60:	6983      	ldr	r3, [r0, #24]
 8010b62:	b510      	push	{r4, lr}
 8010b64:	4604      	mov	r4, r0
 8010b66:	bb33      	cbnz	r3, 8010bb6 <__sinit+0x56>
 8010b68:	6483      	str	r3, [r0, #72]	; 0x48
 8010b6a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8010b6c:	6503      	str	r3, [r0, #80]	; 0x50
 8010b6e:	4b12      	ldr	r3, [pc, #72]	; (8010bb8 <__sinit+0x58>)
 8010b70:	4a12      	ldr	r2, [pc, #72]	; (8010bbc <__sinit+0x5c>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	6282      	str	r2, [r0, #40]	; 0x28
 8010b76:	4298      	cmp	r0, r3
 8010b78:	bf04      	itt	eq
 8010b7a:	2301      	moveq	r3, #1
 8010b7c:	6183      	streq	r3, [r0, #24]
 8010b7e:	f000 f81f 	bl	8010bc0 <__sfp>
 8010b82:	6060      	str	r0, [r4, #4]
 8010b84:	4620      	mov	r0, r4
 8010b86:	f000 f81b 	bl	8010bc0 <__sfp>
 8010b8a:	60a0      	str	r0, [r4, #8]
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f000 f817 	bl	8010bc0 <__sfp>
 8010b92:	2200      	movs	r2, #0
 8010b94:	60e0      	str	r0, [r4, #12]
 8010b96:	2104      	movs	r1, #4
 8010b98:	6860      	ldr	r0, [r4, #4]
 8010b9a:	f7ff ffa7 	bl	8010aec <std.isra.0>
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	2109      	movs	r1, #9
 8010ba2:	68a0      	ldr	r0, [r4, #8]
 8010ba4:	f7ff ffa2 	bl	8010aec <std.isra.0>
 8010ba8:	2202      	movs	r2, #2
 8010baa:	2112      	movs	r1, #18
 8010bac:	68e0      	ldr	r0, [r4, #12]
 8010bae:	f7ff ff9d 	bl	8010aec <std.isra.0>
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	61a3      	str	r3, [r4, #24]
 8010bb6:	bd10      	pop	{r4, pc}
 8010bb8:	08014c04 	.word	0x08014c04
 8010bbc:	08010ae1 	.word	0x08010ae1

08010bc0 <__sfp>:
 8010bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bc2:	4b1c      	ldr	r3, [pc, #112]	; (8010c34 <__sfp+0x74>)
 8010bc4:	681e      	ldr	r6, [r3, #0]
 8010bc6:	69b3      	ldr	r3, [r6, #24]
 8010bc8:	4607      	mov	r7, r0
 8010bca:	b913      	cbnz	r3, 8010bd2 <__sfp+0x12>
 8010bcc:	4630      	mov	r0, r6
 8010bce:	f7ff ffc7 	bl	8010b60 <__sinit>
 8010bd2:	3648      	adds	r6, #72	; 0x48
 8010bd4:	68b4      	ldr	r4, [r6, #8]
 8010bd6:	6873      	ldr	r3, [r6, #4]
 8010bd8:	3b01      	subs	r3, #1
 8010bda:	d503      	bpl.n	8010be4 <__sfp+0x24>
 8010bdc:	6833      	ldr	r3, [r6, #0]
 8010bde:	b133      	cbz	r3, 8010bee <__sfp+0x2e>
 8010be0:	6836      	ldr	r6, [r6, #0]
 8010be2:	e7f7      	b.n	8010bd4 <__sfp+0x14>
 8010be4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010be8:	b16d      	cbz	r5, 8010c06 <__sfp+0x46>
 8010bea:	3468      	adds	r4, #104	; 0x68
 8010bec:	e7f4      	b.n	8010bd8 <__sfp+0x18>
 8010bee:	2104      	movs	r1, #4
 8010bf0:	4638      	mov	r0, r7
 8010bf2:	f7ff ff9f 	bl	8010b34 <__sfmoreglue>
 8010bf6:	6030      	str	r0, [r6, #0]
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	d1f1      	bne.n	8010be0 <__sfp+0x20>
 8010bfc:	230c      	movs	r3, #12
 8010bfe:	603b      	str	r3, [r7, #0]
 8010c00:	4604      	mov	r4, r0
 8010c02:	4620      	mov	r0, r4
 8010c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010c0a:	81e3      	strh	r3, [r4, #14]
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	81a3      	strh	r3, [r4, #12]
 8010c10:	6665      	str	r5, [r4, #100]	; 0x64
 8010c12:	6025      	str	r5, [r4, #0]
 8010c14:	60a5      	str	r5, [r4, #8]
 8010c16:	6065      	str	r5, [r4, #4]
 8010c18:	6125      	str	r5, [r4, #16]
 8010c1a:	6165      	str	r5, [r4, #20]
 8010c1c:	61a5      	str	r5, [r4, #24]
 8010c1e:	2208      	movs	r2, #8
 8010c20:	4629      	mov	r1, r5
 8010c22:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010c26:	f7ff fee1 	bl	80109ec <memset>
 8010c2a:	6365      	str	r5, [r4, #52]	; 0x34
 8010c2c:	63a5      	str	r5, [r4, #56]	; 0x38
 8010c2e:	64a5      	str	r5, [r4, #72]	; 0x48
 8010c30:	64e5      	str	r5, [r4, #76]	; 0x4c
 8010c32:	e7e6      	b.n	8010c02 <__sfp+0x42>
 8010c34:	08014c04 	.word	0x08014c04

08010c38 <_fwalk_reent>:
 8010c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c3c:	4680      	mov	r8, r0
 8010c3e:	4689      	mov	r9, r1
 8010c40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c44:	2600      	movs	r6, #0
 8010c46:	b914      	cbnz	r4, 8010c4e <_fwalk_reent+0x16>
 8010c48:	4630      	mov	r0, r6
 8010c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c4e:	68a5      	ldr	r5, [r4, #8]
 8010c50:	6867      	ldr	r7, [r4, #4]
 8010c52:	3f01      	subs	r7, #1
 8010c54:	d501      	bpl.n	8010c5a <_fwalk_reent+0x22>
 8010c56:	6824      	ldr	r4, [r4, #0]
 8010c58:	e7f5      	b.n	8010c46 <_fwalk_reent+0xe>
 8010c5a:	89ab      	ldrh	r3, [r5, #12]
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	d907      	bls.n	8010c70 <_fwalk_reent+0x38>
 8010c60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c64:	3301      	adds	r3, #1
 8010c66:	d003      	beq.n	8010c70 <_fwalk_reent+0x38>
 8010c68:	4629      	mov	r1, r5
 8010c6a:	4640      	mov	r0, r8
 8010c6c:	47c8      	blx	r9
 8010c6e:	4306      	orrs	r6, r0
 8010c70:	3568      	adds	r5, #104	; 0x68
 8010c72:	e7ee      	b.n	8010c52 <_fwalk_reent+0x1a>

08010c74 <malloc>:
 8010c74:	4b02      	ldr	r3, [pc, #8]	; (8010c80 <malloc+0xc>)
 8010c76:	4601      	mov	r1, r0
 8010c78:	6818      	ldr	r0, [r3, #0]
 8010c7a:	f000 b851 	b.w	8010d20 <_malloc_r>
 8010c7e:	bf00      	nop
 8010c80:	2000001c 	.word	0x2000001c

08010c84 <_free_r>:
 8010c84:	b538      	push	{r3, r4, r5, lr}
 8010c86:	4605      	mov	r5, r0
 8010c88:	2900      	cmp	r1, #0
 8010c8a:	d045      	beq.n	8010d18 <_free_r+0x94>
 8010c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c90:	1f0c      	subs	r4, r1, #4
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	bfb8      	it	lt
 8010c96:	18e4      	addlt	r4, r4, r3
 8010c98:	f000 fdd4 	bl	8011844 <__malloc_lock>
 8010c9c:	4a1f      	ldr	r2, [pc, #124]	; (8010d1c <_free_r+0x98>)
 8010c9e:	6813      	ldr	r3, [r2, #0]
 8010ca0:	4610      	mov	r0, r2
 8010ca2:	b933      	cbnz	r3, 8010cb2 <_free_r+0x2e>
 8010ca4:	6063      	str	r3, [r4, #4]
 8010ca6:	6014      	str	r4, [r2, #0]
 8010ca8:	4628      	mov	r0, r5
 8010caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cae:	f000 bdca 	b.w	8011846 <__malloc_unlock>
 8010cb2:	42a3      	cmp	r3, r4
 8010cb4:	d90c      	bls.n	8010cd0 <_free_r+0x4c>
 8010cb6:	6821      	ldr	r1, [r4, #0]
 8010cb8:	1862      	adds	r2, r4, r1
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	bf04      	itt	eq
 8010cbe:	681a      	ldreq	r2, [r3, #0]
 8010cc0:	685b      	ldreq	r3, [r3, #4]
 8010cc2:	6063      	str	r3, [r4, #4]
 8010cc4:	bf04      	itt	eq
 8010cc6:	1852      	addeq	r2, r2, r1
 8010cc8:	6022      	streq	r2, [r4, #0]
 8010cca:	6004      	str	r4, [r0, #0]
 8010ccc:	e7ec      	b.n	8010ca8 <_free_r+0x24>
 8010cce:	4613      	mov	r3, r2
 8010cd0:	685a      	ldr	r2, [r3, #4]
 8010cd2:	b10a      	cbz	r2, 8010cd8 <_free_r+0x54>
 8010cd4:	42a2      	cmp	r2, r4
 8010cd6:	d9fa      	bls.n	8010cce <_free_r+0x4a>
 8010cd8:	6819      	ldr	r1, [r3, #0]
 8010cda:	1858      	adds	r0, r3, r1
 8010cdc:	42a0      	cmp	r0, r4
 8010cde:	d10b      	bne.n	8010cf8 <_free_r+0x74>
 8010ce0:	6820      	ldr	r0, [r4, #0]
 8010ce2:	4401      	add	r1, r0
 8010ce4:	1858      	adds	r0, r3, r1
 8010ce6:	4282      	cmp	r2, r0
 8010ce8:	6019      	str	r1, [r3, #0]
 8010cea:	d1dd      	bne.n	8010ca8 <_free_r+0x24>
 8010cec:	6810      	ldr	r0, [r2, #0]
 8010cee:	6852      	ldr	r2, [r2, #4]
 8010cf0:	605a      	str	r2, [r3, #4]
 8010cf2:	4401      	add	r1, r0
 8010cf4:	6019      	str	r1, [r3, #0]
 8010cf6:	e7d7      	b.n	8010ca8 <_free_r+0x24>
 8010cf8:	d902      	bls.n	8010d00 <_free_r+0x7c>
 8010cfa:	230c      	movs	r3, #12
 8010cfc:	602b      	str	r3, [r5, #0]
 8010cfe:	e7d3      	b.n	8010ca8 <_free_r+0x24>
 8010d00:	6820      	ldr	r0, [r4, #0]
 8010d02:	1821      	adds	r1, r4, r0
 8010d04:	428a      	cmp	r2, r1
 8010d06:	bf04      	itt	eq
 8010d08:	6811      	ldreq	r1, [r2, #0]
 8010d0a:	6852      	ldreq	r2, [r2, #4]
 8010d0c:	6062      	str	r2, [r4, #4]
 8010d0e:	bf04      	itt	eq
 8010d10:	1809      	addeq	r1, r1, r0
 8010d12:	6021      	streq	r1, [r4, #0]
 8010d14:	605c      	str	r4, [r3, #4]
 8010d16:	e7c7      	b.n	8010ca8 <_free_r+0x24>
 8010d18:	bd38      	pop	{r3, r4, r5, pc}
 8010d1a:	bf00      	nop
 8010d1c:	2000065c 	.word	0x2000065c

08010d20 <_malloc_r>:
 8010d20:	b570      	push	{r4, r5, r6, lr}
 8010d22:	1ccd      	adds	r5, r1, #3
 8010d24:	f025 0503 	bic.w	r5, r5, #3
 8010d28:	3508      	adds	r5, #8
 8010d2a:	2d0c      	cmp	r5, #12
 8010d2c:	bf38      	it	cc
 8010d2e:	250c      	movcc	r5, #12
 8010d30:	2d00      	cmp	r5, #0
 8010d32:	4606      	mov	r6, r0
 8010d34:	db01      	blt.n	8010d3a <_malloc_r+0x1a>
 8010d36:	42a9      	cmp	r1, r5
 8010d38:	d903      	bls.n	8010d42 <_malloc_r+0x22>
 8010d3a:	230c      	movs	r3, #12
 8010d3c:	6033      	str	r3, [r6, #0]
 8010d3e:	2000      	movs	r0, #0
 8010d40:	bd70      	pop	{r4, r5, r6, pc}
 8010d42:	f000 fd7f 	bl	8011844 <__malloc_lock>
 8010d46:	4a23      	ldr	r2, [pc, #140]	; (8010dd4 <_malloc_r+0xb4>)
 8010d48:	6814      	ldr	r4, [r2, #0]
 8010d4a:	4621      	mov	r1, r4
 8010d4c:	b991      	cbnz	r1, 8010d74 <_malloc_r+0x54>
 8010d4e:	4c22      	ldr	r4, [pc, #136]	; (8010dd8 <_malloc_r+0xb8>)
 8010d50:	6823      	ldr	r3, [r4, #0]
 8010d52:	b91b      	cbnz	r3, 8010d5c <_malloc_r+0x3c>
 8010d54:	4630      	mov	r0, r6
 8010d56:	f000 fb17 	bl	8011388 <_sbrk_r>
 8010d5a:	6020      	str	r0, [r4, #0]
 8010d5c:	4629      	mov	r1, r5
 8010d5e:	4630      	mov	r0, r6
 8010d60:	f000 fb12 	bl	8011388 <_sbrk_r>
 8010d64:	1c43      	adds	r3, r0, #1
 8010d66:	d126      	bne.n	8010db6 <_malloc_r+0x96>
 8010d68:	230c      	movs	r3, #12
 8010d6a:	6033      	str	r3, [r6, #0]
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	f000 fd6a 	bl	8011846 <__malloc_unlock>
 8010d72:	e7e4      	b.n	8010d3e <_malloc_r+0x1e>
 8010d74:	680b      	ldr	r3, [r1, #0]
 8010d76:	1b5b      	subs	r3, r3, r5
 8010d78:	d41a      	bmi.n	8010db0 <_malloc_r+0x90>
 8010d7a:	2b0b      	cmp	r3, #11
 8010d7c:	d90f      	bls.n	8010d9e <_malloc_r+0x7e>
 8010d7e:	600b      	str	r3, [r1, #0]
 8010d80:	50cd      	str	r5, [r1, r3]
 8010d82:	18cc      	adds	r4, r1, r3
 8010d84:	4630      	mov	r0, r6
 8010d86:	f000 fd5e 	bl	8011846 <__malloc_unlock>
 8010d8a:	f104 000b 	add.w	r0, r4, #11
 8010d8e:	1d23      	adds	r3, r4, #4
 8010d90:	f020 0007 	bic.w	r0, r0, #7
 8010d94:	1ac3      	subs	r3, r0, r3
 8010d96:	d01b      	beq.n	8010dd0 <_malloc_r+0xb0>
 8010d98:	425a      	negs	r2, r3
 8010d9a:	50e2      	str	r2, [r4, r3]
 8010d9c:	bd70      	pop	{r4, r5, r6, pc}
 8010d9e:	428c      	cmp	r4, r1
 8010da0:	bf0d      	iteet	eq
 8010da2:	6863      	ldreq	r3, [r4, #4]
 8010da4:	684b      	ldrne	r3, [r1, #4]
 8010da6:	6063      	strne	r3, [r4, #4]
 8010da8:	6013      	streq	r3, [r2, #0]
 8010daa:	bf18      	it	ne
 8010dac:	460c      	movne	r4, r1
 8010dae:	e7e9      	b.n	8010d84 <_malloc_r+0x64>
 8010db0:	460c      	mov	r4, r1
 8010db2:	6849      	ldr	r1, [r1, #4]
 8010db4:	e7ca      	b.n	8010d4c <_malloc_r+0x2c>
 8010db6:	1cc4      	adds	r4, r0, #3
 8010db8:	f024 0403 	bic.w	r4, r4, #3
 8010dbc:	42a0      	cmp	r0, r4
 8010dbe:	d005      	beq.n	8010dcc <_malloc_r+0xac>
 8010dc0:	1a21      	subs	r1, r4, r0
 8010dc2:	4630      	mov	r0, r6
 8010dc4:	f000 fae0 	bl	8011388 <_sbrk_r>
 8010dc8:	3001      	adds	r0, #1
 8010dca:	d0cd      	beq.n	8010d68 <_malloc_r+0x48>
 8010dcc:	6025      	str	r5, [r4, #0]
 8010dce:	e7d9      	b.n	8010d84 <_malloc_r+0x64>
 8010dd0:	bd70      	pop	{r4, r5, r6, pc}
 8010dd2:	bf00      	nop
 8010dd4:	2000065c 	.word	0x2000065c
 8010dd8:	20000660 	.word	0x20000660

08010ddc <__sfputc_r>:
 8010ddc:	6893      	ldr	r3, [r2, #8]
 8010dde:	3b01      	subs	r3, #1
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	b410      	push	{r4}
 8010de4:	6093      	str	r3, [r2, #8]
 8010de6:	da09      	bge.n	8010dfc <__sfputc_r+0x20>
 8010de8:	6994      	ldr	r4, [r2, #24]
 8010dea:	42a3      	cmp	r3, r4
 8010dec:	db02      	blt.n	8010df4 <__sfputc_r+0x18>
 8010dee:	b2cb      	uxtb	r3, r1
 8010df0:	2b0a      	cmp	r3, #10
 8010df2:	d103      	bne.n	8010dfc <__sfputc_r+0x20>
 8010df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010df8:	f000 bb1a 	b.w	8011430 <__swbuf_r>
 8010dfc:	6813      	ldr	r3, [r2, #0]
 8010dfe:	1c58      	adds	r0, r3, #1
 8010e00:	6010      	str	r0, [r2, #0]
 8010e02:	7019      	strb	r1, [r3, #0]
 8010e04:	b2c8      	uxtb	r0, r1
 8010e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <__sfputs_r>:
 8010e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e0e:	4606      	mov	r6, r0
 8010e10:	460f      	mov	r7, r1
 8010e12:	4614      	mov	r4, r2
 8010e14:	18d5      	adds	r5, r2, r3
 8010e16:	42ac      	cmp	r4, r5
 8010e18:	d101      	bne.n	8010e1e <__sfputs_r+0x12>
 8010e1a:	2000      	movs	r0, #0
 8010e1c:	e007      	b.n	8010e2e <__sfputs_r+0x22>
 8010e1e:	463a      	mov	r2, r7
 8010e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e24:	4630      	mov	r0, r6
 8010e26:	f7ff ffd9 	bl	8010ddc <__sfputc_r>
 8010e2a:	1c43      	adds	r3, r0, #1
 8010e2c:	d1f3      	bne.n	8010e16 <__sfputs_r+0xa>
 8010e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010e30 <_vfiprintf_r>:
 8010e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e34:	b09d      	sub	sp, #116	; 0x74
 8010e36:	460c      	mov	r4, r1
 8010e38:	4617      	mov	r7, r2
 8010e3a:	9303      	str	r3, [sp, #12]
 8010e3c:	4606      	mov	r6, r0
 8010e3e:	b118      	cbz	r0, 8010e48 <_vfiprintf_r+0x18>
 8010e40:	6983      	ldr	r3, [r0, #24]
 8010e42:	b90b      	cbnz	r3, 8010e48 <_vfiprintf_r+0x18>
 8010e44:	f7ff fe8c 	bl	8010b60 <__sinit>
 8010e48:	4b7c      	ldr	r3, [pc, #496]	; (801103c <_vfiprintf_r+0x20c>)
 8010e4a:	429c      	cmp	r4, r3
 8010e4c:	d157      	bne.n	8010efe <_vfiprintf_r+0xce>
 8010e4e:	6874      	ldr	r4, [r6, #4]
 8010e50:	89a3      	ldrh	r3, [r4, #12]
 8010e52:	0718      	lsls	r0, r3, #28
 8010e54:	d55d      	bpl.n	8010f12 <_vfiprintf_r+0xe2>
 8010e56:	6923      	ldr	r3, [r4, #16]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d05a      	beq.n	8010f12 <_vfiprintf_r+0xe2>
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8010e60:	2320      	movs	r3, #32
 8010e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e66:	2330      	movs	r3, #48	; 0x30
 8010e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e6c:	f04f 0b01 	mov.w	fp, #1
 8010e70:	46b8      	mov	r8, r7
 8010e72:	4645      	mov	r5, r8
 8010e74:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d155      	bne.n	8010f28 <_vfiprintf_r+0xf8>
 8010e7c:	ebb8 0a07 	subs.w	sl, r8, r7
 8010e80:	d00b      	beq.n	8010e9a <_vfiprintf_r+0x6a>
 8010e82:	4653      	mov	r3, sl
 8010e84:	463a      	mov	r2, r7
 8010e86:	4621      	mov	r1, r4
 8010e88:	4630      	mov	r0, r6
 8010e8a:	f7ff ffbf 	bl	8010e0c <__sfputs_r>
 8010e8e:	3001      	adds	r0, #1
 8010e90:	f000 80c4 	beq.w	801101c <_vfiprintf_r+0x1ec>
 8010e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e96:	4453      	add	r3, sl
 8010e98:	9309      	str	r3, [sp, #36]	; 0x24
 8010e9a:	f898 3000 	ldrb.w	r3, [r8]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	f000 80bc 	beq.w	801101c <_vfiprintf_r+0x1ec>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8010eaa:	9304      	str	r3, [sp, #16]
 8010eac:	9307      	str	r3, [sp, #28]
 8010eae:	9205      	str	r2, [sp, #20]
 8010eb0:	9306      	str	r3, [sp, #24]
 8010eb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8010eb8:	2205      	movs	r2, #5
 8010eba:	7829      	ldrb	r1, [r5, #0]
 8010ebc:	4860      	ldr	r0, [pc, #384]	; (8011040 <_vfiprintf_r+0x210>)
 8010ebe:	f7ef f9bf 	bl	8000240 <memchr>
 8010ec2:	f105 0801 	add.w	r8, r5, #1
 8010ec6:	9b04      	ldr	r3, [sp, #16]
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	d131      	bne.n	8010f30 <_vfiprintf_r+0x100>
 8010ecc:	06d9      	lsls	r1, r3, #27
 8010ece:	bf44      	itt	mi
 8010ed0:	2220      	movmi	r2, #32
 8010ed2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010ed6:	071a      	lsls	r2, r3, #28
 8010ed8:	bf44      	itt	mi
 8010eda:	222b      	movmi	r2, #43	; 0x2b
 8010edc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010ee0:	782a      	ldrb	r2, [r5, #0]
 8010ee2:	2a2a      	cmp	r2, #42	; 0x2a
 8010ee4:	d02c      	beq.n	8010f40 <_vfiprintf_r+0x110>
 8010ee6:	9a07      	ldr	r2, [sp, #28]
 8010ee8:	2100      	movs	r1, #0
 8010eea:	200a      	movs	r0, #10
 8010eec:	46a8      	mov	r8, r5
 8010eee:	3501      	adds	r5, #1
 8010ef0:	f898 3000 	ldrb.w	r3, [r8]
 8010ef4:	3b30      	subs	r3, #48	; 0x30
 8010ef6:	2b09      	cmp	r3, #9
 8010ef8:	d96d      	bls.n	8010fd6 <_vfiprintf_r+0x1a6>
 8010efa:	b371      	cbz	r1, 8010f5a <_vfiprintf_r+0x12a>
 8010efc:	e026      	b.n	8010f4c <_vfiprintf_r+0x11c>
 8010efe:	4b51      	ldr	r3, [pc, #324]	; (8011044 <_vfiprintf_r+0x214>)
 8010f00:	429c      	cmp	r4, r3
 8010f02:	d101      	bne.n	8010f08 <_vfiprintf_r+0xd8>
 8010f04:	68b4      	ldr	r4, [r6, #8]
 8010f06:	e7a3      	b.n	8010e50 <_vfiprintf_r+0x20>
 8010f08:	4b4f      	ldr	r3, [pc, #316]	; (8011048 <_vfiprintf_r+0x218>)
 8010f0a:	429c      	cmp	r4, r3
 8010f0c:	bf08      	it	eq
 8010f0e:	68f4      	ldreq	r4, [r6, #12]
 8010f10:	e79e      	b.n	8010e50 <_vfiprintf_r+0x20>
 8010f12:	4621      	mov	r1, r4
 8010f14:	4630      	mov	r0, r6
 8010f16:	f000 faef 	bl	80114f8 <__swsetup_r>
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	d09e      	beq.n	8010e5c <_vfiprintf_r+0x2c>
 8010f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f22:	b01d      	add	sp, #116	; 0x74
 8010f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f28:	2b25      	cmp	r3, #37	; 0x25
 8010f2a:	d0a7      	beq.n	8010e7c <_vfiprintf_r+0x4c>
 8010f2c:	46a8      	mov	r8, r5
 8010f2e:	e7a0      	b.n	8010e72 <_vfiprintf_r+0x42>
 8010f30:	4a43      	ldr	r2, [pc, #268]	; (8011040 <_vfiprintf_r+0x210>)
 8010f32:	1a80      	subs	r0, r0, r2
 8010f34:	fa0b f000 	lsl.w	r0, fp, r0
 8010f38:	4318      	orrs	r0, r3
 8010f3a:	9004      	str	r0, [sp, #16]
 8010f3c:	4645      	mov	r5, r8
 8010f3e:	e7bb      	b.n	8010eb8 <_vfiprintf_r+0x88>
 8010f40:	9a03      	ldr	r2, [sp, #12]
 8010f42:	1d11      	adds	r1, r2, #4
 8010f44:	6812      	ldr	r2, [r2, #0]
 8010f46:	9103      	str	r1, [sp, #12]
 8010f48:	2a00      	cmp	r2, #0
 8010f4a:	db01      	blt.n	8010f50 <_vfiprintf_r+0x120>
 8010f4c:	9207      	str	r2, [sp, #28]
 8010f4e:	e004      	b.n	8010f5a <_vfiprintf_r+0x12a>
 8010f50:	4252      	negs	r2, r2
 8010f52:	f043 0302 	orr.w	r3, r3, #2
 8010f56:	9207      	str	r2, [sp, #28]
 8010f58:	9304      	str	r3, [sp, #16]
 8010f5a:	f898 3000 	ldrb.w	r3, [r8]
 8010f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8010f60:	d110      	bne.n	8010f84 <_vfiprintf_r+0x154>
 8010f62:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010f66:	2b2a      	cmp	r3, #42	; 0x2a
 8010f68:	f108 0101 	add.w	r1, r8, #1
 8010f6c:	d137      	bne.n	8010fde <_vfiprintf_r+0x1ae>
 8010f6e:	9b03      	ldr	r3, [sp, #12]
 8010f70:	1d1a      	adds	r2, r3, #4
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	9203      	str	r2, [sp, #12]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	bfb8      	it	lt
 8010f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f7e:	f108 0802 	add.w	r8, r8, #2
 8010f82:	9305      	str	r3, [sp, #20]
 8010f84:	4d31      	ldr	r5, [pc, #196]	; (801104c <_vfiprintf_r+0x21c>)
 8010f86:	f898 1000 	ldrb.w	r1, [r8]
 8010f8a:	2203      	movs	r2, #3
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	f7ef f957 	bl	8000240 <memchr>
 8010f92:	b140      	cbz	r0, 8010fa6 <_vfiprintf_r+0x176>
 8010f94:	2340      	movs	r3, #64	; 0x40
 8010f96:	1b40      	subs	r0, r0, r5
 8010f98:	fa03 f000 	lsl.w	r0, r3, r0
 8010f9c:	9b04      	ldr	r3, [sp, #16]
 8010f9e:	4303      	orrs	r3, r0
 8010fa0:	9304      	str	r3, [sp, #16]
 8010fa2:	f108 0801 	add.w	r8, r8, #1
 8010fa6:	f898 1000 	ldrb.w	r1, [r8]
 8010faa:	4829      	ldr	r0, [pc, #164]	; (8011050 <_vfiprintf_r+0x220>)
 8010fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fb0:	2206      	movs	r2, #6
 8010fb2:	f108 0701 	add.w	r7, r8, #1
 8010fb6:	f7ef f943 	bl	8000240 <memchr>
 8010fba:	2800      	cmp	r0, #0
 8010fbc:	d034      	beq.n	8011028 <_vfiprintf_r+0x1f8>
 8010fbe:	4b25      	ldr	r3, [pc, #148]	; (8011054 <_vfiprintf_r+0x224>)
 8010fc0:	bb03      	cbnz	r3, 8011004 <_vfiprintf_r+0x1d4>
 8010fc2:	9b03      	ldr	r3, [sp, #12]
 8010fc4:	3307      	adds	r3, #7
 8010fc6:	f023 0307 	bic.w	r3, r3, #7
 8010fca:	3308      	adds	r3, #8
 8010fcc:	9303      	str	r3, [sp, #12]
 8010fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fd0:	444b      	add	r3, r9
 8010fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8010fd4:	e74c      	b.n	8010e70 <_vfiprintf_r+0x40>
 8010fd6:	fb00 3202 	mla	r2, r0, r2, r3
 8010fda:	2101      	movs	r1, #1
 8010fdc:	e786      	b.n	8010eec <_vfiprintf_r+0xbc>
 8010fde:	2300      	movs	r3, #0
 8010fe0:	9305      	str	r3, [sp, #20]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	250a      	movs	r5, #10
 8010fe6:	4688      	mov	r8, r1
 8010fe8:	3101      	adds	r1, #1
 8010fea:	f898 2000 	ldrb.w	r2, [r8]
 8010fee:	3a30      	subs	r2, #48	; 0x30
 8010ff0:	2a09      	cmp	r2, #9
 8010ff2:	d903      	bls.n	8010ffc <_vfiprintf_r+0x1cc>
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d0c5      	beq.n	8010f84 <_vfiprintf_r+0x154>
 8010ff8:	9005      	str	r0, [sp, #20]
 8010ffa:	e7c3      	b.n	8010f84 <_vfiprintf_r+0x154>
 8010ffc:	fb05 2000 	mla	r0, r5, r0, r2
 8011000:	2301      	movs	r3, #1
 8011002:	e7f0      	b.n	8010fe6 <_vfiprintf_r+0x1b6>
 8011004:	ab03      	add	r3, sp, #12
 8011006:	9300      	str	r3, [sp, #0]
 8011008:	4622      	mov	r2, r4
 801100a:	4b13      	ldr	r3, [pc, #76]	; (8011058 <_vfiprintf_r+0x228>)
 801100c:	a904      	add	r1, sp, #16
 801100e:	4630      	mov	r0, r6
 8011010:	f3af 8000 	nop.w
 8011014:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011018:	4681      	mov	r9, r0
 801101a:	d1d8      	bne.n	8010fce <_vfiprintf_r+0x19e>
 801101c:	89a3      	ldrh	r3, [r4, #12]
 801101e:	065b      	lsls	r3, r3, #25
 8011020:	f53f af7d 	bmi.w	8010f1e <_vfiprintf_r+0xee>
 8011024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011026:	e77c      	b.n	8010f22 <_vfiprintf_r+0xf2>
 8011028:	ab03      	add	r3, sp, #12
 801102a:	9300      	str	r3, [sp, #0]
 801102c:	4622      	mov	r2, r4
 801102e:	4b0a      	ldr	r3, [pc, #40]	; (8011058 <_vfiprintf_r+0x228>)
 8011030:	a904      	add	r1, sp, #16
 8011032:	4630      	mov	r0, r6
 8011034:	f000 f888 	bl	8011148 <_printf_i>
 8011038:	e7ec      	b.n	8011014 <_vfiprintf_r+0x1e4>
 801103a:	bf00      	nop
 801103c:	08014bc4 	.word	0x08014bc4
 8011040:	08014c08 	.word	0x08014c08
 8011044:	08014be4 	.word	0x08014be4
 8011048:	08014ba4 	.word	0x08014ba4
 801104c:	08014c0e 	.word	0x08014c0e
 8011050:	08014c12 	.word	0x08014c12
 8011054:	00000000 	.word	0x00000000
 8011058:	08010e0d 	.word	0x08010e0d

0801105c <_printf_common>:
 801105c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011060:	4691      	mov	r9, r2
 8011062:	461f      	mov	r7, r3
 8011064:	688a      	ldr	r2, [r1, #8]
 8011066:	690b      	ldr	r3, [r1, #16]
 8011068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801106c:	4293      	cmp	r3, r2
 801106e:	bfb8      	it	lt
 8011070:	4613      	movlt	r3, r2
 8011072:	f8c9 3000 	str.w	r3, [r9]
 8011076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801107a:	4606      	mov	r6, r0
 801107c:	460c      	mov	r4, r1
 801107e:	b112      	cbz	r2, 8011086 <_printf_common+0x2a>
 8011080:	3301      	adds	r3, #1
 8011082:	f8c9 3000 	str.w	r3, [r9]
 8011086:	6823      	ldr	r3, [r4, #0]
 8011088:	0699      	lsls	r1, r3, #26
 801108a:	bf42      	ittt	mi
 801108c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011090:	3302      	addmi	r3, #2
 8011092:	f8c9 3000 	strmi.w	r3, [r9]
 8011096:	6825      	ldr	r5, [r4, #0]
 8011098:	f015 0506 	ands.w	r5, r5, #6
 801109c:	d107      	bne.n	80110ae <_printf_common+0x52>
 801109e:	f104 0a19 	add.w	sl, r4, #25
 80110a2:	68e3      	ldr	r3, [r4, #12]
 80110a4:	f8d9 2000 	ldr.w	r2, [r9]
 80110a8:	1a9b      	subs	r3, r3, r2
 80110aa:	429d      	cmp	r5, r3
 80110ac:	db29      	blt.n	8011102 <_printf_common+0xa6>
 80110ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80110b2:	6822      	ldr	r2, [r4, #0]
 80110b4:	3300      	adds	r3, #0
 80110b6:	bf18      	it	ne
 80110b8:	2301      	movne	r3, #1
 80110ba:	0692      	lsls	r2, r2, #26
 80110bc:	d42e      	bmi.n	801111c <_printf_common+0xc0>
 80110be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110c2:	4639      	mov	r1, r7
 80110c4:	4630      	mov	r0, r6
 80110c6:	47c0      	blx	r8
 80110c8:	3001      	adds	r0, #1
 80110ca:	d021      	beq.n	8011110 <_printf_common+0xb4>
 80110cc:	6823      	ldr	r3, [r4, #0]
 80110ce:	68e5      	ldr	r5, [r4, #12]
 80110d0:	f8d9 2000 	ldr.w	r2, [r9]
 80110d4:	f003 0306 	and.w	r3, r3, #6
 80110d8:	2b04      	cmp	r3, #4
 80110da:	bf08      	it	eq
 80110dc:	1aad      	subeq	r5, r5, r2
 80110de:	68a3      	ldr	r3, [r4, #8]
 80110e0:	6922      	ldr	r2, [r4, #16]
 80110e2:	bf0c      	ite	eq
 80110e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110e8:	2500      	movne	r5, #0
 80110ea:	4293      	cmp	r3, r2
 80110ec:	bfc4      	itt	gt
 80110ee:	1a9b      	subgt	r3, r3, r2
 80110f0:	18ed      	addgt	r5, r5, r3
 80110f2:	f04f 0900 	mov.w	r9, #0
 80110f6:	341a      	adds	r4, #26
 80110f8:	454d      	cmp	r5, r9
 80110fa:	d11b      	bne.n	8011134 <_printf_common+0xd8>
 80110fc:	2000      	movs	r0, #0
 80110fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011102:	2301      	movs	r3, #1
 8011104:	4652      	mov	r2, sl
 8011106:	4639      	mov	r1, r7
 8011108:	4630      	mov	r0, r6
 801110a:	47c0      	blx	r8
 801110c:	3001      	adds	r0, #1
 801110e:	d103      	bne.n	8011118 <_printf_common+0xbc>
 8011110:	f04f 30ff 	mov.w	r0, #4294967295
 8011114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011118:	3501      	adds	r5, #1
 801111a:	e7c2      	b.n	80110a2 <_printf_common+0x46>
 801111c:	18e1      	adds	r1, r4, r3
 801111e:	1c5a      	adds	r2, r3, #1
 8011120:	2030      	movs	r0, #48	; 0x30
 8011122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011126:	4422      	add	r2, r4
 8011128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801112c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011130:	3302      	adds	r3, #2
 8011132:	e7c4      	b.n	80110be <_printf_common+0x62>
 8011134:	2301      	movs	r3, #1
 8011136:	4622      	mov	r2, r4
 8011138:	4639      	mov	r1, r7
 801113a:	4630      	mov	r0, r6
 801113c:	47c0      	blx	r8
 801113e:	3001      	adds	r0, #1
 8011140:	d0e6      	beq.n	8011110 <_printf_common+0xb4>
 8011142:	f109 0901 	add.w	r9, r9, #1
 8011146:	e7d7      	b.n	80110f8 <_printf_common+0x9c>

08011148 <_printf_i>:
 8011148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801114c:	4617      	mov	r7, r2
 801114e:	7e0a      	ldrb	r2, [r1, #24]
 8011150:	b085      	sub	sp, #20
 8011152:	2a6e      	cmp	r2, #110	; 0x6e
 8011154:	4698      	mov	r8, r3
 8011156:	4606      	mov	r6, r0
 8011158:	460c      	mov	r4, r1
 801115a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801115c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8011160:	f000 80bc 	beq.w	80112dc <_printf_i+0x194>
 8011164:	d81a      	bhi.n	801119c <_printf_i+0x54>
 8011166:	2a63      	cmp	r2, #99	; 0x63
 8011168:	d02e      	beq.n	80111c8 <_printf_i+0x80>
 801116a:	d80a      	bhi.n	8011182 <_printf_i+0x3a>
 801116c:	2a00      	cmp	r2, #0
 801116e:	f000 80c8 	beq.w	8011302 <_printf_i+0x1ba>
 8011172:	2a58      	cmp	r2, #88	; 0x58
 8011174:	f000 808a 	beq.w	801128c <_printf_i+0x144>
 8011178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801117c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8011180:	e02a      	b.n	80111d8 <_printf_i+0x90>
 8011182:	2a64      	cmp	r2, #100	; 0x64
 8011184:	d001      	beq.n	801118a <_printf_i+0x42>
 8011186:	2a69      	cmp	r2, #105	; 0x69
 8011188:	d1f6      	bne.n	8011178 <_printf_i+0x30>
 801118a:	6821      	ldr	r1, [r4, #0]
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8011192:	d023      	beq.n	80111dc <_printf_i+0x94>
 8011194:	1d11      	adds	r1, r2, #4
 8011196:	6019      	str	r1, [r3, #0]
 8011198:	6813      	ldr	r3, [r2, #0]
 801119a:	e027      	b.n	80111ec <_printf_i+0xa4>
 801119c:	2a73      	cmp	r2, #115	; 0x73
 801119e:	f000 80b4 	beq.w	801130a <_printf_i+0x1c2>
 80111a2:	d808      	bhi.n	80111b6 <_printf_i+0x6e>
 80111a4:	2a6f      	cmp	r2, #111	; 0x6f
 80111a6:	d02a      	beq.n	80111fe <_printf_i+0xb6>
 80111a8:	2a70      	cmp	r2, #112	; 0x70
 80111aa:	d1e5      	bne.n	8011178 <_printf_i+0x30>
 80111ac:	680a      	ldr	r2, [r1, #0]
 80111ae:	f042 0220 	orr.w	r2, r2, #32
 80111b2:	600a      	str	r2, [r1, #0]
 80111b4:	e003      	b.n	80111be <_printf_i+0x76>
 80111b6:	2a75      	cmp	r2, #117	; 0x75
 80111b8:	d021      	beq.n	80111fe <_printf_i+0xb6>
 80111ba:	2a78      	cmp	r2, #120	; 0x78
 80111bc:	d1dc      	bne.n	8011178 <_printf_i+0x30>
 80111be:	2278      	movs	r2, #120	; 0x78
 80111c0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80111c4:	496e      	ldr	r1, [pc, #440]	; (8011380 <_printf_i+0x238>)
 80111c6:	e064      	b.n	8011292 <_printf_i+0x14a>
 80111c8:	681a      	ldr	r2, [r3, #0]
 80111ca:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80111ce:	1d11      	adds	r1, r2, #4
 80111d0:	6019      	str	r1, [r3, #0]
 80111d2:	6813      	ldr	r3, [r2, #0]
 80111d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111d8:	2301      	movs	r3, #1
 80111da:	e0a3      	b.n	8011324 <_printf_i+0x1dc>
 80111dc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80111e0:	f102 0104 	add.w	r1, r2, #4
 80111e4:	6019      	str	r1, [r3, #0]
 80111e6:	d0d7      	beq.n	8011198 <_printf_i+0x50>
 80111e8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	da03      	bge.n	80111f8 <_printf_i+0xb0>
 80111f0:	222d      	movs	r2, #45	; 0x2d
 80111f2:	425b      	negs	r3, r3
 80111f4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80111f8:	4962      	ldr	r1, [pc, #392]	; (8011384 <_printf_i+0x23c>)
 80111fa:	220a      	movs	r2, #10
 80111fc:	e017      	b.n	801122e <_printf_i+0xe6>
 80111fe:	6820      	ldr	r0, [r4, #0]
 8011200:	6819      	ldr	r1, [r3, #0]
 8011202:	f010 0f80 	tst.w	r0, #128	; 0x80
 8011206:	d003      	beq.n	8011210 <_printf_i+0xc8>
 8011208:	1d08      	adds	r0, r1, #4
 801120a:	6018      	str	r0, [r3, #0]
 801120c:	680b      	ldr	r3, [r1, #0]
 801120e:	e006      	b.n	801121e <_printf_i+0xd6>
 8011210:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011214:	f101 0004 	add.w	r0, r1, #4
 8011218:	6018      	str	r0, [r3, #0]
 801121a:	d0f7      	beq.n	801120c <_printf_i+0xc4>
 801121c:	880b      	ldrh	r3, [r1, #0]
 801121e:	4959      	ldr	r1, [pc, #356]	; (8011384 <_printf_i+0x23c>)
 8011220:	2a6f      	cmp	r2, #111	; 0x6f
 8011222:	bf14      	ite	ne
 8011224:	220a      	movne	r2, #10
 8011226:	2208      	moveq	r2, #8
 8011228:	2000      	movs	r0, #0
 801122a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801122e:	6865      	ldr	r5, [r4, #4]
 8011230:	60a5      	str	r5, [r4, #8]
 8011232:	2d00      	cmp	r5, #0
 8011234:	f2c0 809c 	blt.w	8011370 <_printf_i+0x228>
 8011238:	6820      	ldr	r0, [r4, #0]
 801123a:	f020 0004 	bic.w	r0, r0, #4
 801123e:	6020      	str	r0, [r4, #0]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d13f      	bne.n	80112c4 <_printf_i+0x17c>
 8011244:	2d00      	cmp	r5, #0
 8011246:	f040 8095 	bne.w	8011374 <_printf_i+0x22c>
 801124a:	4675      	mov	r5, lr
 801124c:	2a08      	cmp	r2, #8
 801124e:	d10b      	bne.n	8011268 <_printf_i+0x120>
 8011250:	6823      	ldr	r3, [r4, #0]
 8011252:	07da      	lsls	r2, r3, #31
 8011254:	d508      	bpl.n	8011268 <_printf_i+0x120>
 8011256:	6923      	ldr	r3, [r4, #16]
 8011258:	6862      	ldr	r2, [r4, #4]
 801125a:	429a      	cmp	r2, r3
 801125c:	bfde      	ittt	le
 801125e:	2330      	movle	r3, #48	; 0x30
 8011260:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011264:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011268:	ebae 0305 	sub.w	r3, lr, r5
 801126c:	6123      	str	r3, [r4, #16]
 801126e:	f8cd 8000 	str.w	r8, [sp]
 8011272:	463b      	mov	r3, r7
 8011274:	aa03      	add	r2, sp, #12
 8011276:	4621      	mov	r1, r4
 8011278:	4630      	mov	r0, r6
 801127a:	f7ff feef 	bl	801105c <_printf_common>
 801127e:	3001      	adds	r0, #1
 8011280:	d155      	bne.n	801132e <_printf_i+0x1e6>
 8011282:	f04f 30ff 	mov.w	r0, #4294967295
 8011286:	b005      	add	sp, #20
 8011288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801128c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8011290:	493c      	ldr	r1, [pc, #240]	; (8011384 <_printf_i+0x23c>)
 8011292:	6822      	ldr	r2, [r4, #0]
 8011294:	6818      	ldr	r0, [r3, #0]
 8011296:	f012 0f80 	tst.w	r2, #128	; 0x80
 801129a:	f100 0504 	add.w	r5, r0, #4
 801129e:	601d      	str	r5, [r3, #0]
 80112a0:	d001      	beq.n	80112a6 <_printf_i+0x15e>
 80112a2:	6803      	ldr	r3, [r0, #0]
 80112a4:	e002      	b.n	80112ac <_printf_i+0x164>
 80112a6:	0655      	lsls	r5, r2, #25
 80112a8:	d5fb      	bpl.n	80112a2 <_printf_i+0x15a>
 80112aa:	8803      	ldrh	r3, [r0, #0]
 80112ac:	07d0      	lsls	r0, r2, #31
 80112ae:	bf44      	itt	mi
 80112b0:	f042 0220 	orrmi.w	r2, r2, #32
 80112b4:	6022      	strmi	r2, [r4, #0]
 80112b6:	b91b      	cbnz	r3, 80112c0 <_printf_i+0x178>
 80112b8:	6822      	ldr	r2, [r4, #0]
 80112ba:	f022 0220 	bic.w	r2, r2, #32
 80112be:	6022      	str	r2, [r4, #0]
 80112c0:	2210      	movs	r2, #16
 80112c2:	e7b1      	b.n	8011228 <_printf_i+0xe0>
 80112c4:	4675      	mov	r5, lr
 80112c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80112ca:	fb02 3310 	mls	r3, r2, r0, r3
 80112ce:	5ccb      	ldrb	r3, [r1, r3]
 80112d0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80112d4:	4603      	mov	r3, r0
 80112d6:	2800      	cmp	r0, #0
 80112d8:	d1f5      	bne.n	80112c6 <_printf_i+0x17e>
 80112da:	e7b7      	b.n	801124c <_printf_i+0x104>
 80112dc:	6808      	ldr	r0, [r1, #0]
 80112de:	681a      	ldr	r2, [r3, #0]
 80112e0:	6949      	ldr	r1, [r1, #20]
 80112e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80112e6:	d004      	beq.n	80112f2 <_printf_i+0x1aa>
 80112e8:	1d10      	adds	r0, r2, #4
 80112ea:	6018      	str	r0, [r3, #0]
 80112ec:	6813      	ldr	r3, [r2, #0]
 80112ee:	6019      	str	r1, [r3, #0]
 80112f0:	e007      	b.n	8011302 <_printf_i+0x1ba>
 80112f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80112f6:	f102 0004 	add.w	r0, r2, #4
 80112fa:	6018      	str	r0, [r3, #0]
 80112fc:	6813      	ldr	r3, [r2, #0]
 80112fe:	d0f6      	beq.n	80112ee <_printf_i+0x1a6>
 8011300:	8019      	strh	r1, [r3, #0]
 8011302:	2300      	movs	r3, #0
 8011304:	6123      	str	r3, [r4, #16]
 8011306:	4675      	mov	r5, lr
 8011308:	e7b1      	b.n	801126e <_printf_i+0x126>
 801130a:	681a      	ldr	r2, [r3, #0]
 801130c:	1d11      	adds	r1, r2, #4
 801130e:	6019      	str	r1, [r3, #0]
 8011310:	6815      	ldr	r5, [r2, #0]
 8011312:	6862      	ldr	r2, [r4, #4]
 8011314:	2100      	movs	r1, #0
 8011316:	4628      	mov	r0, r5
 8011318:	f7ee ff92 	bl	8000240 <memchr>
 801131c:	b108      	cbz	r0, 8011322 <_printf_i+0x1da>
 801131e:	1b40      	subs	r0, r0, r5
 8011320:	6060      	str	r0, [r4, #4]
 8011322:	6863      	ldr	r3, [r4, #4]
 8011324:	6123      	str	r3, [r4, #16]
 8011326:	2300      	movs	r3, #0
 8011328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801132c:	e79f      	b.n	801126e <_printf_i+0x126>
 801132e:	6923      	ldr	r3, [r4, #16]
 8011330:	462a      	mov	r2, r5
 8011332:	4639      	mov	r1, r7
 8011334:	4630      	mov	r0, r6
 8011336:	47c0      	blx	r8
 8011338:	3001      	adds	r0, #1
 801133a:	d0a2      	beq.n	8011282 <_printf_i+0x13a>
 801133c:	6823      	ldr	r3, [r4, #0]
 801133e:	079b      	lsls	r3, r3, #30
 8011340:	d507      	bpl.n	8011352 <_printf_i+0x20a>
 8011342:	2500      	movs	r5, #0
 8011344:	f104 0919 	add.w	r9, r4, #25
 8011348:	68e3      	ldr	r3, [r4, #12]
 801134a:	9a03      	ldr	r2, [sp, #12]
 801134c:	1a9b      	subs	r3, r3, r2
 801134e:	429d      	cmp	r5, r3
 8011350:	db05      	blt.n	801135e <_printf_i+0x216>
 8011352:	68e0      	ldr	r0, [r4, #12]
 8011354:	9b03      	ldr	r3, [sp, #12]
 8011356:	4298      	cmp	r0, r3
 8011358:	bfb8      	it	lt
 801135a:	4618      	movlt	r0, r3
 801135c:	e793      	b.n	8011286 <_printf_i+0x13e>
 801135e:	2301      	movs	r3, #1
 8011360:	464a      	mov	r2, r9
 8011362:	4639      	mov	r1, r7
 8011364:	4630      	mov	r0, r6
 8011366:	47c0      	blx	r8
 8011368:	3001      	adds	r0, #1
 801136a:	d08a      	beq.n	8011282 <_printf_i+0x13a>
 801136c:	3501      	adds	r5, #1
 801136e:	e7eb      	b.n	8011348 <_printf_i+0x200>
 8011370:	2b00      	cmp	r3, #0
 8011372:	d1a7      	bne.n	80112c4 <_printf_i+0x17c>
 8011374:	780b      	ldrb	r3, [r1, #0]
 8011376:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801137a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801137e:	e765      	b.n	801124c <_printf_i+0x104>
 8011380:	08014c2a 	.word	0x08014c2a
 8011384:	08014c19 	.word	0x08014c19

08011388 <_sbrk_r>:
 8011388:	b538      	push	{r3, r4, r5, lr}
 801138a:	4c06      	ldr	r4, [pc, #24]	; (80113a4 <_sbrk_r+0x1c>)
 801138c:	2300      	movs	r3, #0
 801138e:	4605      	mov	r5, r0
 8011390:	4608      	mov	r0, r1
 8011392:	6023      	str	r3, [r4, #0]
 8011394:	f7ef fa90 	bl	80008b8 <_sbrk>
 8011398:	1c43      	adds	r3, r0, #1
 801139a:	d102      	bne.n	80113a2 <_sbrk_r+0x1a>
 801139c:	6823      	ldr	r3, [r4, #0]
 801139e:	b103      	cbz	r3, 80113a2 <_sbrk_r+0x1a>
 80113a0:	602b      	str	r3, [r5, #0]
 80113a2:	bd38      	pop	{r3, r4, r5, pc}
 80113a4:	20006d3c 	.word	0x20006d3c

080113a8 <__sread>:
 80113a8:	b510      	push	{r4, lr}
 80113aa:	460c      	mov	r4, r1
 80113ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113b0:	f000 fa4a 	bl	8011848 <_read_r>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	bfab      	itete	ge
 80113b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80113ba:	89a3      	ldrhlt	r3, [r4, #12]
 80113bc:	181b      	addge	r3, r3, r0
 80113be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80113c2:	bfac      	ite	ge
 80113c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80113c6:	81a3      	strhlt	r3, [r4, #12]
 80113c8:	bd10      	pop	{r4, pc}

080113ca <__swrite>:
 80113ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ce:	461f      	mov	r7, r3
 80113d0:	898b      	ldrh	r3, [r1, #12]
 80113d2:	05db      	lsls	r3, r3, #23
 80113d4:	4605      	mov	r5, r0
 80113d6:	460c      	mov	r4, r1
 80113d8:	4616      	mov	r6, r2
 80113da:	d505      	bpl.n	80113e8 <__swrite+0x1e>
 80113dc:	2302      	movs	r3, #2
 80113de:	2200      	movs	r2, #0
 80113e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113e4:	f000 f9b8 	bl	8011758 <_lseek_r>
 80113e8:	89a3      	ldrh	r3, [r4, #12]
 80113ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80113f2:	81a3      	strh	r3, [r4, #12]
 80113f4:	4632      	mov	r2, r6
 80113f6:	463b      	mov	r3, r7
 80113f8:	4628      	mov	r0, r5
 80113fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113fe:	f000 b869 	b.w	80114d4 <_write_r>

08011402 <__sseek>:
 8011402:	b510      	push	{r4, lr}
 8011404:	460c      	mov	r4, r1
 8011406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801140a:	f000 f9a5 	bl	8011758 <_lseek_r>
 801140e:	1c43      	adds	r3, r0, #1
 8011410:	89a3      	ldrh	r3, [r4, #12]
 8011412:	bf15      	itete	ne
 8011414:	6560      	strne	r0, [r4, #84]	; 0x54
 8011416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801141a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801141e:	81a3      	strheq	r3, [r4, #12]
 8011420:	bf18      	it	ne
 8011422:	81a3      	strhne	r3, [r4, #12]
 8011424:	bd10      	pop	{r4, pc}

08011426 <__sclose>:
 8011426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801142a:	f000 b8d3 	b.w	80115d4 <_close_r>
	...

08011430 <__swbuf_r>:
 8011430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011432:	460e      	mov	r6, r1
 8011434:	4614      	mov	r4, r2
 8011436:	4605      	mov	r5, r0
 8011438:	b118      	cbz	r0, 8011442 <__swbuf_r+0x12>
 801143a:	6983      	ldr	r3, [r0, #24]
 801143c:	b90b      	cbnz	r3, 8011442 <__swbuf_r+0x12>
 801143e:	f7ff fb8f 	bl	8010b60 <__sinit>
 8011442:	4b21      	ldr	r3, [pc, #132]	; (80114c8 <__swbuf_r+0x98>)
 8011444:	429c      	cmp	r4, r3
 8011446:	d12a      	bne.n	801149e <__swbuf_r+0x6e>
 8011448:	686c      	ldr	r4, [r5, #4]
 801144a:	69a3      	ldr	r3, [r4, #24]
 801144c:	60a3      	str	r3, [r4, #8]
 801144e:	89a3      	ldrh	r3, [r4, #12]
 8011450:	071a      	lsls	r2, r3, #28
 8011452:	d52e      	bpl.n	80114b2 <__swbuf_r+0x82>
 8011454:	6923      	ldr	r3, [r4, #16]
 8011456:	b363      	cbz	r3, 80114b2 <__swbuf_r+0x82>
 8011458:	6923      	ldr	r3, [r4, #16]
 801145a:	6820      	ldr	r0, [r4, #0]
 801145c:	1ac0      	subs	r0, r0, r3
 801145e:	6963      	ldr	r3, [r4, #20]
 8011460:	b2f6      	uxtb	r6, r6
 8011462:	4298      	cmp	r0, r3
 8011464:	4637      	mov	r7, r6
 8011466:	db04      	blt.n	8011472 <__swbuf_r+0x42>
 8011468:	4621      	mov	r1, r4
 801146a:	4628      	mov	r0, r5
 801146c:	f000 f94a 	bl	8011704 <_fflush_r>
 8011470:	bb28      	cbnz	r0, 80114be <__swbuf_r+0x8e>
 8011472:	68a3      	ldr	r3, [r4, #8]
 8011474:	3b01      	subs	r3, #1
 8011476:	60a3      	str	r3, [r4, #8]
 8011478:	6823      	ldr	r3, [r4, #0]
 801147a:	1c5a      	adds	r2, r3, #1
 801147c:	6022      	str	r2, [r4, #0]
 801147e:	701e      	strb	r6, [r3, #0]
 8011480:	6963      	ldr	r3, [r4, #20]
 8011482:	3001      	adds	r0, #1
 8011484:	4298      	cmp	r0, r3
 8011486:	d004      	beq.n	8011492 <__swbuf_r+0x62>
 8011488:	89a3      	ldrh	r3, [r4, #12]
 801148a:	07db      	lsls	r3, r3, #31
 801148c:	d519      	bpl.n	80114c2 <__swbuf_r+0x92>
 801148e:	2e0a      	cmp	r6, #10
 8011490:	d117      	bne.n	80114c2 <__swbuf_r+0x92>
 8011492:	4621      	mov	r1, r4
 8011494:	4628      	mov	r0, r5
 8011496:	f000 f935 	bl	8011704 <_fflush_r>
 801149a:	b190      	cbz	r0, 80114c2 <__swbuf_r+0x92>
 801149c:	e00f      	b.n	80114be <__swbuf_r+0x8e>
 801149e:	4b0b      	ldr	r3, [pc, #44]	; (80114cc <__swbuf_r+0x9c>)
 80114a0:	429c      	cmp	r4, r3
 80114a2:	d101      	bne.n	80114a8 <__swbuf_r+0x78>
 80114a4:	68ac      	ldr	r4, [r5, #8]
 80114a6:	e7d0      	b.n	801144a <__swbuf_r+0x1a>
 80114a8:	4b09      	ldr	r3, [pc, #36]	; (80114d0 <__swbuf_r+0xa0>)
 80114aa:	429c      	cmp	r4, r3
 80114ac:	bf08      	it	eq
 80114ae:	68ec      	ldreq	r4, [r5, #12]
 80114b0:	e7cb      	b.n	801144a <__swbuf_r+0x1a>
 80114b2:	4621      	mov	r1, r4
 80114b4:	4628      	mov	r0, r5
 80114b6:	f000 f81f 	bl	80114f8 <__swsetup_r>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	d0cc      	beq.n	8011458 <__swbuf_r+0x28>
 80114be:	f04f 37ff 	mov.w	r7, #4294967295
 80114c2:	4638      	mov	r0, r7
 80114c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114c6:	bf00      	nop
 80114c8:	08014bc4 	.word	0x08014bc4
 80114cc:	08014be4 	.word	0x08014be4
 80114d0:	08014ba4 	.word	0x08014ba4

080114d4 <_write_r>:
 80114d4:	b538      	push	{r3, r4, r5, lr}
 80114d6:	4c07      	ldr	r4, [pc, #28]	; (80114f4 <_write_r+0x20>)
 80114d8:	4605      	mov	r5, r0
 80114da:	4608      	mov	r0, r1
 80114dc:	4611      	mov	r1, r2
 80114de:	2200      	movs	r2, #0
 80114e0:	6022      	str	r2, [r4, #0]
 80114e2:	461a      	mov	r2, r3
 80114e4:	f7ef f9cb 	bl	800087e <_write>
 80114e8:	1c43      	adds	r3, r0, #1
 80114ea:	d102      	bne.n	80114f2 <_write_r+0x1e>
 80114ec:	6823      	ldr	r3, [r4, #0]
 80114ee:	b103      	cbz	r3, 80114f2 <_write_r+0x1e>
 80114f0:	602b      	str	r3, [r5, #0]
 80114f2:	bd38      	pop	{r3, r4, r5, pc}
 80114f4:	20006d3c 	.word	0x20006d3c

080114f8 <__swsetup_r>:
 80114f8:	4b32      	ldr	r3, [pc, #200]	; (80115c4 <__swsetup_r+0xcc>)
 80114fa:	b570      	push	{r4, r5, r6, lr}
 80114fc:	681d      	ldr	r5, [r3, #0]
 80114fe:	4606      	mov	r6, r0
 8011500:	460c      	mov	r4, r1
 8011502:	b125      	cbz	r5, 801150e <__swsetup_r+0x16>
 8011504:	69ab      	ldr	r3, [r5, #24]
 8011506:	b913      	cbnz	r3, 801150e <__swsetup_r+0x16>
 8011508:	4628      	mov	r0, r5
 801150a:	f7ff fb29 	bl	8010b60 <__sinit>
 801150e:	4b2e      	ldr	r3, [pc, #184]	; (80115c8 <__swsetup_r+0xd0>)
 8011510:	429c      	cmp	r4, r3
 8011512:	d10f      	bne.n	8011534 <__swsetup_r+0x3c>
 8011514:	686c      	ldr	r4, [r5, #4]
 8011516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801151a:	b29a      	uxth	r2, r3
 801151c:	0715      	lsls	r5, r2, #28
 801151e:	d42c      	bmi.n	801157a <__swsetup_r+0x82>
 8011520:	06d0      	lsls	r0, r2, #27
 8011522:	d411      	bmi.n	8011548 <__swsetup_r+0x50>
 8011524:	2209      	movs	r2, #9
 8011526:	6032      	str	r2, [r6, #0]
 8011528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801152c:	81a3      	strh	r3, [r4, #12]
 801152e:	f04f 30ff 	mov.w	r0, #4294967295
 8011532:	bd70      	pop	{r4, r5, r6, pc}
 8011534:	4b25      	ldr	r3, [pc, #148]	; (80115cc <__swsetup_r+0xd4>)
 8011536:	429c      	cmp	r4, r3
 8011538:	d101      	bne.n	801153e <__swsetup_r+0x46>
 801153a:	68ac      	ldr	r4, [r5, #8]
 801153c:	e7eb      	b.n	8011516 <__swsetup_r+0x1e>
 801153e:	4b24      	ldr	r3, [pc, #144]	; (80115d0 <__swsetup_r+0xd8>)
 8011540:	429c      	cmp	r4, r3
 8011542:	bf08      	it	eq
 8011544:	68ec      	ldreq	r4, [r5, #12]
 8011546:	e7e6      	b.n	8011516 <__swsetup_r+0x1e>
 8011548:	0751      	lsls	r1, r2, #29
 801154a:	d512      	bpl.n	8011572 <__swsetup_r+0x7a>
 801154c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801154e:	b141      	cbz	r1, 8011562 <__swsetup_r+0x6a>
 8011550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011554:	4299      	cmp	r1, r3
 8011556:	d002      	beq.n	801155e <__swsetup_r+0x66>
 8011558:	4630      	mov	r0, r6
 801155a:	f7ff fb93 	bl	8010c84 <_free_r>
 801155e:	2300      	movs	r3, #0
 8011560:	6363      	str	r3, [r4, #52]	; 0x34
 8011562:	89a3      	ldrh	r3, [r4, #12]
 8011564:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011568:	81a3      	strh	r3, [r4, #12]
 801156a:	2300      	movs	r3, #0
 801156c:	6063      	str	r3, [r4, #4]
 801156e:	6923      	ldr	r3, [r4, #16]
 8011570:	6023      	str	r3, [r4, #0]
 8011572:	89a3      	ldrh	r3, [r4, #12]
 8011574:	f043 0308 	orr.w	r3, r3, #8
 8011578:	81a3      	strh	r3, [r4, #12]
 801157a:	6923      	ldr	r3, [r4, #16]
 801157c:	b94b      	cbnz	r3, 8011592 <__swsetup_r+0x9a>
 801157e:	89a3      	ldrh	r3, [r4, #12]
 8011580:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011588:	d003      	beq.n	8011592 <__swsetup_r+0x9a>
 801158a:	4621      	mov	r1, r4
 801158c:	4630      	mov	r0, r6
 801158e:	f000 f919 	bl	80117c4 <__smakebuf_r>
 8011592:	89a2      	ldrh	r2, [r4, #12]
 8011594:	f012 0301 	ands.w	r3, r2, #1
 8011598:	d00c      	beq.n	80115b4 <__swsetup_r+0xbc>
 801159a:	2300      	movs	r3, #0
 801159c:	60a3      	str	r3, [r4, #8]
 801159e:	6963      	ldr	r3, [r4, #20]
 80115a0:	425b      	negs	r3, r3
 80115a2:	61a3      	str	r3, [r4, #24]
 80115a4:	6923      	ldr	r3, [r4, #16]
 80115a6:	b953      	cbnz	r3, 80115be <__swsetup_r+0xc6>
 80115a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80115b0:	d1ba      	bne.n	8011528 <__swsetup_r+0x30>
 80115b2:	bd70      	pop	{r4, r5, r6, pc}
 80115b4:	0792      	lsls	r2, r2, #30
 80115b6:	bf58      	it	pl
 80115b8:	6963      	ldrpl	r3, [r4, #20]
 80115ba:	60a3      	str	r3, [r4, #8]
 80115bc:	e7f2      	b.n	80115a4 <__swsetup_r+0xac>
 80115be:	2000      	movs	r0, #0
 80115c0:	e7f7      	b.n	80115b2 <__swsetup_r+0xba>
 80115c2:	bf00      	nop
 80115c4:	2000001c 	.word	0x2000001c
 80115c8:	08014bc4 	.word	0x08014bc4
 80115cc:	08014be4 	.word	0x08014be4
 80115d0:	08014ba4 	.word	0x08014ba4

080115d4 <_close_r>:
 80115d4:	b538      	push	{r3, r4, r5, lr}
 80115d6:	4c06      	ldr	r4, [pc, #24]	; (80115f0 <_close_r+0x1c>)
 80115d8:	2300      	movs	r3, #0
 80115da:	4605      	mov	r5, r0
 80115dc:	4608      	mov	r0, r1
 80115de:	6023      	str	r3, [r4, #0]
 80115e0:	f7ef f998 	bl	8000914 <_close>
 80115e4:	1c43      	adds	r3, r0, #1
 80115e6:	d102      	bne.n	80115ee <_close_r+0x1a>
 80115e8:	6823      	ldr	r3, [r4, #0]
 80115ea:	b103      	cbz	r3, 80115ee <_close_r+0x1a>
 80115ec:	602b      	str	r3, [r5, #0]
 80115ee:	bd38      	pop	{r3, r4, r5, pc}
 80115f0:	20006d3c 	.word	0x20006d3c

080115f4 <__sflush_r>:
 80115f4:	898a      	ldrh	r2, [r1, #12]
 80115f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115fa:	4605      	mov	r5, r0
 80115fc:	0710      	lsls	r0, r2, #28
 80115fe:	460c      	mov	r4, r1
 8011600:	d45a      	bmi.n	80116b8 <__sflush_r+0xc4>
 8011602:	684b      	ldr	r3, [r1, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	dc05      	bgt.n	8011614 <__sflush_r+0x20>
 8011608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801160a:	2b00      	cmp	r3, #0
 801160c:	dc02      	bgt.n	8011614 <__sflush_r+0x20>
 801160e:	2000      	movs	r0, #0
 8011610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011616:	2e00      	cmp	r6, #0
 8011618:	d0f9      	beq.n	801160e <__sflush_r+0x1a>
 801161a:	2300      	movs	r3, #0
 801161c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011620:	682f      	ldr	r7, [r5, #0]
 8011622:	602b      	str	r3, [r5, #0]
 8011624:	d033      	beq.n	801168e <__sflush_r+0x9a>
 8011626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011628:	89a3      	ldrh	r3, [r4, #12]
 801162a:	075a      	lsls	r2, r3, #29
 801162c:	d505      	bpl.n	801163a <__sflush_r+0x46>
 801162e:	6863      	ldr	r3, [r4, #4]
 8011630:	1ac0      	subs	r0, r0, r3
 8011632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011634:	b10b      	cbz	r3, 801163a <__sflush_r+0x46>
 8011636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011638:	1ac0      	subs	r0, r0, r3
 801163a:	2300      	movs	r3, #0
 801163c:	4602      	mov	r2, r0
 801163e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011640:	6a21      	ldr	r1, [r4, #32]
 8011642:	4628      	mov	r0, r5
 8011644:	47b0      	blx	r6
 8011646:	1c43      	adds	r3, r0, #1
 8011648:	89a3      	ldrh	r3, [r4, #12]
 801164a:	d106      	bne.n	801165a <__sflush_r+0x66>
 801164c:	6829      	ldr	r1, [r5, #0]
 801164e:	291d      	cmp	r1, #29
 8011650:	d84b      	bhi.n	80116ea <__sflush_r+0xf6>
 8011652:	4a2b      	ldr	r2, [pc, #172]	; (8011700 <__sflush_r+0x10c>)
 8011654:	40ca      	lsrs	r2, r1
 8011656:	07d6      	lsls	r6, r2, #31
 8011658:	d547      	bpl.n	80116ea <__sflush_r+0xf6>
 801165a:	2200      	movs	r2, #0
 801165c:	6062      	str	r2, [r4, #4]
 801165e:	04d9      	lsls	r1, r3, #19
 8011660:	6922      	ldr	r2, [r4, #16]
 8011662:	6022      	str	r2, [r4, #0]
 8011664:	d504      	bpl.n	8011670 <__sflush_r+0x7c>
 8011666:	1c42      	adds	r2, r0, #1
 8011668:	d101      	bne.n	801166e <__sflush_r+0x7a>
 801166a:	682b      	ldr	r3, [r5, #0]
 801166c:	b903      	cbnz	r3, 8011670 <__sflush_r+0x7c>
 801166e:	6560      	str	r0, [r4, #84]	; 0x54
 8011670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011672:	602f      	str	r7, [r5, #0]
 8011674:	2900      	cmp	r1, #0
 8011676:	d0ca      	beq.n	801160e <__sflush_r+0x1a>
 8011678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801167c:	4299      	cmp	r1, r3
 801167e:	d002      	beq.n	8011686 <__sflush_r+0x92>
 8011680:	4628      	mov	r0, r5
 8011682:	f7ff faff 	bl	8010c84 <_free_r>
 8011686:	2000      	movs	r0, #0
 8011688:	6360      	str	r0, [r4, #52]	; 0x34
 801168a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801168e:	6a21      	ldr	r1, [r4, #32]
 8011690:	2301      	movs	r3, #1
 8011692:	4628      	mov	r0, r5
 8011694:	47b0      	blx	r6
 8011696:	1c41      	adds	r1, r0, #1
 8011698:	d1c6      	bne.n	8011628 <__sflush_r+0x34>
 801169a:	682b      	ldr	r3, [r5, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d0c3      	beq.n	8011628 <__sflush_r+0x34>
 80116a0:	2b1d      	cmp	r3, #29
 80116a2:	d001      	beq.n	80116a8 <__sflush_r+0xb4>
 80116a4:	2b16      	cmp	r3, #22
 80116a6:	d101      	bne.n	80116ac <__sflush_r+0xb8>
 80116a8:	602f      	str	r7, [r5, #0]
 80116aa:	e7b0      	b.n	801160e <__sflush_r+0x1a>
 80116ac:	89a3      	ldrh	r3, [r4, #12]
 80116ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116b2:	81a3      	strh	r3, [r4, #12]
 80116b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116b8:	690f      	ldr	r7, [r1, #16]
 80116ba:	2f00      	cmp	r7, #0
 80116bc:	d0a7      	beq.n	801160e <__sflush_r+0x1a>
 80116be:	0793      	lsls	r3, r2, #30
 80116c0:	680e      	ldr	r6, [r1, #0]
 80116c2:	bf08      	it	eq
 80116c4:	694b      	ldreq	r3, [r1, #20]
 80116c6:	600f      	str	r7, [r1, #0]
 80116c8:	bf18      	it	ne
 80116ca:	2300      	movne	r3, #0
 80116cc:	eba6 0807 	sub.w	r8, r6, r7
 80116d0:	608b      	str	r3, [r1, #8]
 80116d2:	f1b8 0f00 	cmp.w	r8, #0
 80116d6:	dd9a      	ble.n	801160e <__sflush_r+0x1a>
 80116d8:	4643      	mov	r3, r8
 80116da:	463a      	mov	r2, r7
 80116dc:	6a21      	ldr	r1, [r4, #32]
 80116de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116e0:	4628      	mov	r0, r5
 80116e2:	47b0      	blx	r6
 80116e4:	2800      	cmp	r0, #0
 80116e6:	dc07      	bgt.n	80116f8 <__sflush_r+0x104>
 80116e8:	89a3      	ldrh	r3, [r4, #12]
 80116ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116ee:	81a3      	strh	r3, [r4, #12]
 80116f0:	f04f 30ff 	mov.w	r0, #4294967295
 80116f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f8:	4407      	add	r7, r0
 80116fa:	eba8 0800 	sub.w	r8, r8, r0
 80116fe:	e7e8      	b.n	80116d2 <__sflush_r+0xde>
 8011700:	20400001 	.word	0x20400001

08011704 <_fflush_r>:
 8011704:	b538      	push	{r3, r4, r5, lr}
 8011706:	690b      	ldr	r3, [r1, #16]
 8011708:	4605      	mov	r5, r0
 801170a:	460c      	mov	r4, r1
 801170c:	b1db      	cbz	r3, 8011746 <_fflush_r+0x42>
 801170e:	b118      	cbz	r0, 8011718 <_fflush_r+0x14>
 8011710:	6983      	ldr	r3, [r0, #24]
 8011712:	b90b      	cbnz	r3, 8011718 <_fflush_r+0x14>
 8011714:	f7ff fa24 	bl	8010b60 <__sinit>
 8011718:	4b0c      	ldr	r3, [pc, #48]	; (801174c <_fflush_r+0x48>)
 801171a:	429c      	cmp	r4, r3
 801171c:	d109      	bne.n	8011732 <_fflush_r+0x2e>
 801171e:	686c      	ldr	r4, [r5, #4]
 8011720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011724:	b17b      	cbz	r3, 8011746 <_fflush_r+0x42>
 8011726:	4621      	mov	r1, r4
 8011728:	4628      	mov	r0, r5
 801172a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801172e:	f7ff bf61 	b.w	80115f4 <__sflush_r>
 8011732:	4b07      	ldr	r3, [pc, #28]	; (8011750 <_fflush_r+0x4c>)
 8011734:	429c      	cmp	r4, r3
 8011736:	d101      	bne.n	801173c <_fflush_r+0x38>
 8011738:	68ac      	ldr	r4, [r5, #8]
 801173a:	e7f1      	b.n	8011720 <_fflush_r+0x1c>
 801173c:	4b05      	ldr	r3, [pc, #20]	; (8011754 <_fflush_r+0x50>)
 801173e:	429c      	cmp	r4, r3
 8011740:	bf08      	it	eq
 8011742:	68ec      	ldreq	r4, [r5, #12]
 8011744:	e7ec      	b.n	8011720 <_fflush_r+0x1c>
 8011746:	2000      	movs	r0, #0
 8011748:	bd38      	pop	{r3, r4, r5, pc}
 801174a:	bf00      	nop
 801174c:	08014bc4 	.word	0x08014bc4
 8011750:	08014be4 	.word	0x08014be4
 8011754:	08014ba4 	.word	0x08014ba4

08011758 <_lseek_r>:
 8011758:	b538      	push	{r3, r4, r5, lr}
 801175a:	4c07      	ldr	r4, [pc, #28]	; (8011778 <_lseek_r+0x20>)
 801175c:	4605      	mov	r5, r0
 801175e:	4608      	mov	r0, r1
 8011760:	4611      	mov	r1, r2
 8011762:	2200      	movs	r2, #0
 8011764:	6022      	str	r2, [r4, #0]
 8011766:	461a      	mov	r2, r3
 8011768:	f7ef f8fb 	bl	8000962 <_lseek>
 801176c:	1c43      	adds	r3, r0, #1
 801176e:	d102      	bne.n	8011776 <_lseek_r+0x1e>
 8011770:	6823      	ldr	r3, [r4, #0]
 8011772:	b103      	cbz	r3, 8011776 <_lseek_r+0x1e>
 8011774:	602b      	str	r3, [r5, #0]
 8011776:	bd38      	pop	{r3, r4, r5, pc}
 8011778:	20006d3c 	.word	0x20006d3c

0801177c <__swhatbuf_r>:
 801177c:	b570      	push	{r4, r5, r6, lr}
 801177e:	460e      	mov	r6, r1
 8011780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011784:	2900      	cmp	r1, #0
 8011786:	b090      	sub	sp, #64	; 0x40
 8011788:	4614      	mov	r4, r2
 801178a:	461d      	mov	r5, r3
 801178c:	da07      	bge.n	801179e <__swhatbuf_r+0x22>
 801178e:	2300      	movs	r3, #0
 8011790:	602b      	str	r3, [r5, #0]
 8011792:	89b3      	ldrh	r3, [r6, #12]
 8011794:	061a      	lsls	r2, r3, #24
 8011796:	d410      	bmi.n	80117ba <__swhatbuf_r+0x3e>
 8011798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801179c:	e00e      	b.n	80117bc <__swhatbuf_r+0x40>
 801179e:	aa01      	add	r2, sp, #4
 80117a0:	f000 f864 	bl	801186c <_fstat_r>
 80117a4:	2800      	cmp	r0, #0
 80117a6:	dbf2      	blt.n	801178e <__swhatbuf_r+0x12>
 80117a8:	9a02      	ldr	r2, [sp, #8]
 80117aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80117ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80117b2:	425a      	negs	r2, r3
 80117b4:	415a      	adcs	r2, r3
 80117b6:	602a      	str	r2, [r5, #0]
 80117b8:	e7ee      	b.n	8011798 <__swhatbuf_r+0x1c>
 80117ba:	2340      	movs	r3, #64	; 0x40
 80117bc:	2000      	movs	r0, #0
 80117be:	6023      	str	r3, [r4, #0]
 80117c0:	b010      	add	sp, #64	; 0x40
 80117c2:	bd70      	pop	{r4, r5, r6, pc}

080117c4 <__smakebuf_r>:
 80117c4:	898b      	ldrh	r3, [r1, #12]
 80117c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80117c8:	079d      	lsls	r5, r3, #30
 80117ca:	4606      	mov	r6, r0
 80117cc:	460c      	mov	r4, r1
 80117ce:	d507      	bpl.n	80117e0 <__smakebuf_r+0x1c>
 80117d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80117d4:	6023      	str	r3, [r4, #0]
 80117d6:	6123      	str	r3, [r4, #16]
 80117d8:	2301      	movs	r3, #1
 80117da:	6163      	str	r3, [r4, #20]
 80117dc:	b002      	add	sp, #8
 80117de:	bd70      	pop	{r4, r5, r6, pc}
 80117e0:	ab01      	add	r3, sp, #4
 80117e2:	466a      	mov	r2, sp
 80117e4:	f7ff ffca 	bl	801177c <__swhatbuf_r>
 80117e8:	9900      	ldr	r1, [sp, #0]
 80117ea:	4605      	mov	r5, r0
 80117ec:	4630      	mov	r0, r6
 80117ee:	f7ff fa97 	bl	8010d20 <_malloc_r>
 80117f2:	b948      	cbnz	r0, 8011808 <__smakebuf_r+0x44>
 80117f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117f8:	059a      	lsls	r2, r3, #22
 80117fa:	d4ef      	bmi.n	80117dc <__smakebuf_r+0x18>
 80117fc:	f023 0303 	bic.w	r3, r3, #3
 8011800:	f043 0302 	orr.w	r3, r3, #2
 8011804:	81a3      	strh	r3, [r4, #12]
 8011806:	e7e3      	b.n	80117d0 <__smakebuf_r+0xc>
 8011808:	4b0d      	ldr	r3, [pc, #52]	; (8011840 <__smakebuf_r+0x7c>)
 801180a:	62b3      	str	r3, [r6, #40]	; 0x28
 801180c:	89a3      	ldrh	r3, [r4, #12]
 801180e:	6020      	str	r0, [r4, #0]
 8011810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011814:	81a3      	strh	r3, [r4, #12]
 8011816:	9b00      	ldr	r3, [sp, #0]
 8011818:	6163      	str	r3, [r4, #20]
 801181a:	9b01      	ldr	r3, [sp, #4]
 801181c:	6120      	str	r0, [r4, #16]
 801181e:	b15b      	cbz	r3, 8011838 <__smakebuf_r+0x74>
 8011820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011824:	4630      	mov	r0, r6
 8011826:	f000 f833 	bl	8011890 <_isatty_r>
 801182a:	b128      	cbz	r0, 8011838 <__smakebuf_r+0x74>
 801182c:	89a3      	ldrh	r3, [r4, #12]
 801182e:	f023 0303 	bic.w	r3, r3, #3
 8011832:	f043 0301 	orr.w	r3, r3, #1
 8011836:	81a3      	strh	r3, [r4, #12]
 8011838:	89a3      	ldrh	r3, [r4, #12]
 801183a:	431d      	orrs	r5, r3
 801183c:	81a5      	strh	r5, [r4, #12]
 801183e:	e7cd      	b.n	80117dc <__smakebuf_r+0x18>
 8011840:	08010ae1 	.word	0x08010ae1

08011844 <__malloc_lock>:
 8011844:	4770      	bx	lr

08011846 <__malloc_unlock>:
 8011846:	4770      	bx	lr

08011848 <_read_r>:
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	4c07      	ldr	r4, [pc, #28]	; (8011868 <_read_r+0x20>)
 801184c:	4605      	mov	r5, r0
 801184e:	4608      	mov	r0, r1
 8011850:	4611      	mov	r1, r2
 8011852:	2200      	movs	r2, #0
 8011854:	6022      	str	r2, [r4, #0]
 8011856:	461a      	mov	r2, r3
 8011858:	f7ee fff4 	bl	8000844 <_read>
 801185c:	1c43      	adds	r3, r0, #1
 801185e:	d102      	bne.n	8011866 <_read_r+0x1e>
 8011860:	6823      	ldr	r3, [r4, #0]
 8011862:	b103      	cbz	r3, 8011866 <_read_r+0x1e>
 8011864:	602b      	str	r3, [r5, #0]
 8011866:	bd38      	pop	{r3, r4, r5, pc}
 8011868:	20006d3c 	.word	0x20006d3c

0801186c <_fstat_r>:
 801186c:	b538      	push	{r3, r4, r5, lr}
 801186e:	4c07      	ldr	r4, [pc, #28]	; (801188c <_fstat_r+0x20>)
 8011870:	2300      	movs	r3, #0
 8011872:	4605      	mov	r5, r0
 8011874:	4608      	mov	r0, r1
 8011876:	4611      	mov	r1, r2
 8011878:	6023      	str	r3, [r4, #0]
 801187a:	f7ef f857 	bl	800092c <_fstat>
 801187e:	1c43      	adds	r3, r0, #1
 8011880:	d102      	bne.n	8011888 <_fstat_r+0x1c>
 8011882:	6823      	ldr	r3, [r4, #0]
 8011884:	b103      	cbz	r3, 8011888 <_fstat_r+0x1c>
 8011886:	602b      	str	r3, [r5, #0]
 8011888:	bd38      	pop	{r3, r4, r5, pc}
 801188a:	bf00      	nop
 801188c:	20006d3c 	.word	0x20006d3c

08011890 <_isatty_r>:
 8011890:	b538      	push	{r3, r4, r5, lr}
 8011892:	4c06      	ldr	r4, [pc, #24]	; (80118ac <_isatty_r+0x1c>)
 8011894:	2300      	movs	r3, #0
 8011896:	4605      	mov	r5, r0
 8011898:	4608      	mov	r0, r1
 801189a:	6023      	str	r3, [r4, #0]
 801189c:	f7ef f856 	bl	800094c <_isatty>
 80118a0:	1c43      	adds	r3, r0, #1
 80118a2:	d102      	bne.n	80118aa <_isatty_r+0x1a>
 80118a4:	6823      	ldr	r3, [r4, #0]
 80118a6:	b103      	cbz	r3, 80118aa <_isatty_r+0x1a>
 80118a8:	602b      	str	r3, [r5, #0]
 80118aa:	bd38      	pop	{r3, r4, r5, pc}
 80118ac:	20006d3c 	.word	0x20006d3c

080118b0 <_init>:
 80118b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b2:	bf00      	nop
 80118b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118b6:	bc08      	pop	{r3}
 80118b8:	469e      	mov	lr, r3
 80118ba:	4770      	bx	lr

080118bc <_fini>:
 80118bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118be:	bf00      	nop
 80118c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118c2:	bc08      	pop	{r3}
 80118c4:	469e      	mov	lr, r3
 80118c6:	4770      	bx	lr
